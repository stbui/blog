{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/2017-01-09_122308.jpg","path":"images/2017-01-09_122308.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_122234.jpg","path":"images/2017-01-09_122234.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_213058.jpg","path":"images/2017-01-09_213058.jpg","modified":1,"renderable":0},{"_id":"source/images/201701091218.jpg","path":"images/201701091218.jpg","modified":1,"renderable":0},{"_id":"source/images/201701091216.jpg","path":"images/201701091216.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_122359.jpg","path":"images/2017-01-09_122359.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_122435.jpg","path":"images/2017-01-09_122435.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_122457.jpg","path":"images/2017-01-09_122457.jpg","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/images/2017-01-09_122138.jpg","path":"images/2017-01-09_122138.jpg","modified":1,"renderable":0},{"_id":"source/images/2017-01-09_122944.jpg","path":"images/2017-01-09_122944.jpg","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar1.png","path":"css/images/avatar1.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","path":"vendor/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","path":"vendor/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","path":"vendor/open-sans/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","path":"vendor/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","path":"vendor/lightgallery/css/lg-fb-comment-box.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","path":"vendor/lightgallery/css/lg-fb-comment-box.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","path":"vendor/lightgallery/css/lg-fb-comment-box.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","path":"vendor/lightgallery/css/lg-transitions.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","path":"vendor/lightgallery/css/lg-transitions.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","path":"vendor/lightgallery/css/lg-transitions.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","path":"vendor/lightgallery/css/lightgallery.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","path":"vendor/lightgallery/css/lightgallery.css.map","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","path":"vendor/lightgallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","path":"vendor/lightgallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","path":"vendor/lightgallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","path":"vendor/lightgallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","path":"vendor/lightgallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","path":"vendor/lightgallery/js/lg-autoplay.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","path":"vendor/lightgallery/js/lg-autoplay.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","path":"vendor/lightgallery/js/lg-fullscreen.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","path":"vendor/lightgallery/js/lg-hash.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","path":"vendor/lightgallery/js/lg-fullscreen.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","path":"vendor/lightgallery/js/lg-hash.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","path":"vendor/lightgallery/js/lg-pager.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","path":"vendor/lightgallery/js/lg-pager.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","path":"vendor/lightgallery/js/lg-share.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","path":"vendor/lightgallery/js/lg-share.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","path":"vendor/lightgallery/js/lg-thumbnail.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","path":"vendor/lightgallery/js/lg-thumbnail.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","path":"vendor/lightgallery/js/lg-video.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","path":"vendor/lightgallery/js/lg-video.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","path":"vendor/lightgallery/js/lg-zoom.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","path":"vendor/lightgallery/js/lg-zoom.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","path":"vendor/lightgallery/js/lightgallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","path":"vendor/lightgallery/js/lightgallery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","path":"vendor/lightgallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","path":"vendor/lightgallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","path":"vendor/lightgallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","path":"vendor/lightgallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":1,"renderable":1},{"_id":"source/images/2017-01-09_221746.jpg","path":"images/2017-01-09_221746.jpg","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/images/hexo-theme-card.png","path":"css/images/hexo-theme-card.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","path":"vendor/jquery/2.1.3/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"2ed2733a5837481f1b7361650c2ece4258eeac7b","modified":1501755684138},{"_id":"themes/icarus/LICENSE","hash":"73ed09aa00f7bda6319fc7d5b722fb40e0c2017e","modified":1501755684138},{"_id":"themes/icarus/README.md","hash":"3cc4c7ab098f6bfcc821327f85a5661a9144c75d","modified":1501755684139},{"_id":"themes/icarus/_config.yml","hash":"96d43eebe0ba4809ac8d16af1a4a7d5903496e07","modified":1501755684139},{"_id":"themes/icarus/package.json","hash":"0e8865c854e0a3888a83ad623c5060cb06d8fbfb","modified":1501755684167},{"_id":"source/_drafts/Arguments对象作用深度研究.md","hash":"f26ea78fbe15ce505d473eb4dc70c82994e33af6","modified":1501755684105},{"_id":"source/_drafts/AJAX工作原理.md","hash":"0084bf2bc2e7039e8a766360c714a816e01202fe","modified":1501755684104},{"_id":"source/_drafts/JS的原型和原型链.md","hash":"3ea7ce6df0d2c3aedbac7ab885faabd34e3838b0","modified":1501755684106},{"_id":"source/_drafts/JS中的callapplybind方法详解.md","hash":"3c066bcb5aa26bd91ef094419ba6029b255e3740","modified":1501755684105},{"_id":"source/_drafts/JavaScript中this指向.md","hash":"999cc77d8858dd1b39f5cb40fd250d5d6fc3ca30","modified":1501755684106},{"_id":"source/_drafts/Jenkins、docker整合.md","hash":"a53615d2c57080edd24c76f59fe0c9577da4accf","modified":1501755684107},{"_id":"source/_drafts/JavaScript闭包(closure).md","hash":"d68708799616f4b04e7e5eb3c4bbd4974740ebde","modified":1501755684106},{"_id":"source/_drafts/docker-compose入门#docker#$2016-07-16$.md","hash":"a613646aef74eb7008978abcc3761a2ec54e9203","modified":1501755684107},{"_id":"source/_drafts/html5 API postMessage跨域详解.md","hash":"1e3bae3bfa583c62673ad8fa12fdbc85da2bb159","modified":1501755684107},{"_id":"source/_drafts/mongo入门之增删改查#mongo#$2016-07-31$.md","hash":"3b366847b2bd5e6ce5f659a9c1fa4b34ba4381d8","modified":1501755684108},{"_id":"source/_drafts/vagrant配置指南#linux#$2016-09-29$.md","hash":"851e994552b3c0214f4d0cd7d85c2989bb072096","modified":1501755684108},{"_id":"source/_drafts/nginx中关于http模块的配置#nginx#$2016-09-15$.md","hash":"6120f58ff6e47c837941bf53b7f000028e7676e9","modified":1501755684108},{"_id":"source/_drafts/vue.md","hash":"04801a4d1b42afed10c23bc22060900d1c7ad5c3","modified":1501755684109},{"_id":"source/_drafts/webpack关于样式的处理.md","hash":"eee1dcf7d885511501931d1eb1eb87c750a053a4","modified":1501755684109},{"_id":"source/_drafts/windowName跨域详解.md","hash":"f8e5b5c4b83b5493ead71b68be704e5ac987ca3d","modified":1501755684109},{"_id":"source/_drafts/事件绑定、事件监听、事件委托.md","hash":"95060f646b206612c3e7566de86bd04119c7a41b","modified":1501755684110},{"_id":"source/_drafts/关于node.js中stream的再一次梳理.md","hash":"e4816a9f3a48c1de0cfc41adb9d6a78ec56bd05e","modified":1501755684110},{"_id":"source/_drafts/浏览器缓存浅析.md","hash":"93a48bd2de498c47fbf05063e97c3be5c8213812","modified":1501755684111},{"_id":"source/_drafts/关于webpack中code splitting的使用.md","hash":"8c3da88df5732343ab7dbce8b538f9cf639ffc3a","modified":1501755684110},{"_id":"source/_drafts/深入了解JavaScript，从作用域链开始（1）.md","hash":"b1600bf4d18c272002ef0417a89d34cbb8f2647d","modified":1501755684111},{"_id":"source/_drafts/深入了解JavaScript，优化作用域链（2）.md","hash":"71fdc23f8f3e1fedf9481974a93be6a3f42a478f","modified":1501755684111},{"_id":"source/_drafts/深入浅出Buffer#node#$2016-05-31$.md","hash":"4b5371aee9dbad1b91266b5cc05eaad50874c89e","modified":1501755684112},{"_id":"source/_posts/WebView-调试.md","hash":"8b346b44f246fcff6aaacbc456c08862882c28ac","modified":1501755684112},{"_id":"source/_posts/js.md","hash":"dcbb32d23133bc396c823348b98cffe1d1113bc3","modified":1501755684115},{"_id":"source/_posts/nginx-cors.md","hash":"2cb0e3528c225020760b1f1655425d595af37961","modified":1501755684116},{"_id":"source/_posts/fed-restructure.md","hash":"8d1928f06679363945838edd37cf305facbabcbe","modified":1501755684115},{"_id":"source/_posts/kali-渗透.md","hash":"d58c3939c64322f0b5a0ed287ba22e24bf8eaa2c","modified":1501755684116},{"_id":"source/_posts/openwrt安装wifidog及配置.md","hash":"7534df1d6c91b9b2328f669ee44233a3201fcbd6","modified":1501755684118},{"_id":"source/_posts/pandorabox中mwan负载均衡配置.md","hash":"223c520b116309861cf55c72750ef016613006e9","modified":1501755684119},{"_id":"source/_posts/raspberry-openwrt.md","hash":"c3b027eb5f2a5b3d68660352e499e80bbbccc9b6","modified":1501755684119},{"_id":"source/_posts/raspberry-系统安装.md","hash":"8f5ce857571c924cd228993b308bdd5c40b8cd5d","modified":1501755684119},{"_id":"source/_posts/setup-app-third.md","hash":"e699ec0183bd83be7ecce5fa0ffcbd05bd967fc6","modified":1501755684121},{"_id":"source/_posts/shadowsocks服务安装.md","hash":"8c48559c64380572d93f1c22712aab2fdbbaf475","modified":1501755684121},{"_id":"source/_posts/share_native.md","hash":"539b8f6b01c1fe692afda2c58557f73a5d0386a9","modified":1501755684121},{"_id":"source/_posts/test.md","hash":"7aad6560ea17cf9a44021ec649a5eb9c5639af54","modified":1501755684122},{"_id":"source/_posts/web桌面虚拟化.md","hash":"edee6bb953792a5b878eef790f5b170a12041e4d","modified":1501755684122},{"_id":"source/_posts/virtual-dom.md","hash":"7e013fd34f13046b6add391721cb4980e2ad04de","modified":1501755684122},{"_id":"source/_posts/wifidog认证服务开发.md","hash":"ecc3fdb8e55dde36cd3f84c254b2334aef4f8afe","modified":1501755684123},{"_id":"themes/icarus/layout/about.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1501755684145},{"_id":"themes/icarus/layout/categories.ejs","hash":"245e54d71f894805c2b77c2b85325ab9c5a0984f","modified":1501755684146},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1501755684145},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1501755684146},{"_id":"themes/icarus/layout/index.ejs","hash":"1a729f4769875115ffd2d9a672c8e6986c93ca72","modified":1501755684156},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1501755684157},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1501755684157},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1501755684160},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1501755684163},{"_id":"themes/icarus/layout/tags.ejs","hash":"ef8ddffff2b6c6123595de48a89a5b8c38a169e2","modified":1501755684165},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1501755684167},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1501755684168},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1501755684142},{"_id":"themes/icarus/languages/en.yml","hash":"cc1c4f3f297dc45ecceead9b067ca78312ae7d7e","modified":1501755684142},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1501755684142},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1501755684143},{"_id":"themes/icarus/languages/id.yml","hash":"2dc3671a92378f4bd499b0dcfb90170bb44c786b","modified":1501755684143},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1501755684143},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1501755684144},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1501755684144},{"_id":"themes/icarus/languages/tr.yml","hash":"fa57cd1b7d15a166a3ceb0b5bb0930f93ddc3482","modified":1501755684144},{"_id":"themes/icarus/languages/zh-Hans.yml","hash":"5d82040dfd60221b6f318d40c2130b26e19490ed","modified":1501755684145},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"36b9ddcc2f4f1e02b7be9d8fe0bfa90f8c47b193","modified":1501755684144},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"35b5d5ecdfafeedc6c858b4b2069ae430b152a8d","modified":1501755684145},{"_id":"source/images/2017-01-09_122308.jpg","hash":"5b6a9a8128a94d90b259c8fb84f50478af584a71","modified":1501755684126},{"_id":"source/images/2017-01-09_122234.jpg","hash":"ea00898435526d813606185117e22997df0e8339","modified":1501755684125},{"_id":"source/images/2017-01-09_213058.jpg","hash":"76c8299a3d5d8a313ff4d7966f98c1203f1eab73","modified":1501755684132},{"_id":"source/images/201701091218.jpg","hash":"19ac9be99062ea636b9bf74027e0b692d11d4333","modified":1501755684137},{"_id":"source/images/201701091216.jpg","hash":"bd548b77173fe7e99d0cffe05266dbef714da629","modified":1501755684136},{"_id":"source/images/2017-01-09_122359.jpg","hash":"247dc02b38074642a7356274ac7dd7f15cca8517","modified":1501755684127},{"_id":"source/images/2017-01-09_122435.jpg","hash":"d3e73d29b2adad4ebc9d2d4c75320501258e5b02","modified":1501755684128},{"_id":"source/images/2017-01-09_122457.jpg","hash":"2cc254d11eea59668a8b01738028ad7c696b682e","modified":1501755684130},{"_id":"source/_posts/docker/docker常见参数.md","hash":"383a2345736d3e7e2aadcfa2c27e100a9489be92","modified":1501755684113},{"_id":"source/_posts/docker/mysql.md","hash":"b130a4b782508d31c68fa37f263b18f263807495","modified":1501755684113},{"_id":"source/_posts/docker/nginx.md","hash":"5b8f99fbfe88899ca1159a0339d2aeb03c50df69","modified":1501755684114},{"_id":"source/_posts/docker/在docker中搭建持续集成环境.md","hash":"fff685f354d11a9366cbaf73aa40b8332e348fb9","modified":1501755684115},{"_id":"source/_posts/docker/php.md","hash":"033a5b818619a30680c3415ffdf65b939f28b710","modified":1501755684114},{"_id":"source/_posts/openwrt/pandorabox-tcpdump.md","hash":"a18120bc677b2a5f0dfd4c2ce9007cad81b74172","modified":1501755684118},{"_id":"source/_posts/openwrt/极路由3刷机过程.md","hash":"fe76671c27e51e74b5c21e5305a3f6b74e1ad5ae","modified":1501755684118},{"_id":"source/_posts/node/nodejs 创建命令行脚本工具.md","hash":"0acfa2aeed0f353956f3207183766ee1fd8f6bde","modified":1501755684116},{"_id":"source/_posts/node/npm镜像.md","hash":"05099c0b33df2c882eccdff1f15cf3705268526a","modified":1501755684117},{"_id":"source/_posts/node/refactor.md","hash":"95b7528999b0f8c03660603d4592c870ce785b1e","modified":1501755684117},{"_id":"source/_posts/react/React-Native开发指南.md","hash":"7d1a4d1fb89df4a3f33370c1fc8f3ddd8ab2a4f9","modified":1501755684120},{"_id":"source/_posts/react/myfav.md","hash":"75b519fd4e14be61fad24fa6f1326f8a23d657b4","modified":1501755684120},{"_id":"source/_posts/react/shadownsocks-install.md","hash":"f4e7c4f7d26701e911eca606391da6d0bcf75f59","modified":1501755684120},{"_id":"themes/icarus/_source/about/index.md","hash":"bd9ed7aa621a326676eb014aa4b78c74c14fcd02","modified":1501755684140},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1501755684141},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1501755684141},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"13f884f07e1ed39fde1a84cd51d45b4d90078b83","modified":1501755684146},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1501755684147},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1501755684147},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"c36e6b376647ae715d417cb928c2082ef56766a9","modified":1501755684147},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1501755684148},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8767c30714baf8011bb191b8a1c652ea114a53f2","modified":1501755684148},{"_id":"themes/icarus/layout/common/article.ejs","hash":"500a4bfef3e6c7f19ba06ee1c12145634bc9c94c","modified":1501755684149},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"4d8362a275ee59513b95a743da0a1da7b34a8b67","modified":1501755684149},{"_id":"themes/icarus/layout/common/head.ejs","hash":"e3bd21e3e5676d82473911c6ed94f79578846b96","modified":1501755684150},{"_id":"themes/icarus/layout/common/header.ejs","hash":"4e27b0bc9fdbc5a5f8cda3e045e8732f3e171fce","modified":1501755684150},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"d4dfa98d6481f9cd8f78b7a749276a76241b35d1","modified":1501755684154},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6599618c414d871f447ef5f95316b693bede06b6","modified":1501755684155},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"058c0f11e725cc92861b6afd0d0ff7547689fd1a","modified":1501755684154},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1501755684155},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1501755684156},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1501755684158},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1501755684158},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"f6d476f4fa5a08e840e97670ae72bd851f445a42","modified":1501755684159},{"_id":"themes/icarus/layout/plugin/tencent-analytics.ejs","hash":"5ceefe92702d94ef190c5f2c77751dea430fc90d","modified":1501755684159},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1501755684161},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1501755684161},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1501755684161},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1501755684161},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1501755684163},{"_id":"themes/icarus/layout/pv/scripts.ejs","hash":"73c165ab250f80b2f47e6e0221cf0fa214ab9d51","modified":1501755684160},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1501755684163},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1501755684163},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1501755684163},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1501755684163},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1501755684163},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1501755684165},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1501755684165},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1501755684165},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1501755684165},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1501755684165},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a04d8b2f8938eb81bd58a83faa5c59128d4926ee","modified":1501755684167},{"_id":"themes/icarus/source/css/_extend.styl","hash":"74dc73324adde45f2635be99e7b44fd8939342e0","modified":1501755684168},{"_id":"themes/icarus/source/css/_variables.styl","hash":"b72a056b8c9f9162d198136b38abf11ccd12bc12","modified":1501755684194},{"_id":"themes/icarus/source/css/style.styl","hash":"0ee1db46634423821d42cacce37503b9621640bb","modified":1501755684198},{"_id":"themes/icarus/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1501755684198},{"_id":"themes/icarus/source/js/main.js","hash":"57066d2be45b6183036364e45d3c995e03f88496","modified":1501755684198},{"_id":"source/images/2017-01-09_122138.jpg","hash":"013963a33f585ad528eab292368e35cd16570419","modified":1501755684124},{"_id":"source/images/2017-01-09_122944.jpg","hash":"f602e5257c16018c15123448691633adc9e43502","modified":1501755684131},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1501755684151},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1501755684151},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1501755684151},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1501755684152},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1501755684152},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1501755684153},{"_id":"themes/icarus/layout/common/post/pv.ejs","hash":"a7ec37632b4d67faaa45b4adbad48228be8841c2","modified":1501755684152},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1501755684153},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1501755684168},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1501755684169},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1501755684169},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1501755684170},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1501755684169},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1501755684170},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1501755684170},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1501755684171},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1501755684171},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1501755684171},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1501755684171},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1501755684172},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1501755684172},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1501755684172},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1501755684173},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1501755684173},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1501755684173},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1501755684174},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1501755684174},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1501755684174},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1501755684175},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1501755684175},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1501755684175},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1501755684175},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1501755684176},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1501755684176},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1501755684176},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1501755684177},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1501755684177},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1501755684178},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1501755684178},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1501755684178},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1501755684179},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1501755684179},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1501755684179},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1501755684179},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1501755684180},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1501755684180},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1501755684180},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1501755684181},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1501755684181},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1501755684181},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1501755684182},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1501755684182},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1501755684182},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1501755684182},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1501755684183},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1501755684183},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1501755684183},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1501755684184},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1501755684184},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1501755684184},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1501755684185},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1501755684185},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1501755684185},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1501755684185},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1501755684186},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1501755684186},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1501755684186},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1501755684187},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1501755684187},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1501755684188},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1501755684188},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1501755684188},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1501755684189},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1501755684189},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1501755684189},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1501755684190},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1501755684190},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1501755684190},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"440afc092e4dd6d10b6e157f0511673c6927ea55","modified":1501755684191},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"9a1d70d743f67fe6487ac67055d527100c41a589","modified":1501755684191},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1501755684191},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"6683f8bd1426e5e39c0fbe946e02045e631063e6","modified":1501755684192},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"48287ef7eb9262aaa3a81875f5c8bd432d747885","modified":1501755684192},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"5a36fc3341c5cd7133461291a7a623a9cb3aec2e","modified":1501755684193},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1501755684192},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"8e2bed7c77bf48f229ff2e3fd63000b98c09698d","modified":1501755684193},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1501755684193},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"72f3b572f12c694520458ff280644c58bf5844fe","modified":1501755684195},{"_id":"themes/icarus/source/css/images/avatar1.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1501755684195},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1501755684197},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1501755684197},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"8d2c804ec29167249b726ad29871df8d1cdb8916","modified":1501755684194},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1501755684194},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1501755684211},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1501755684211},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1501755684236},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1501755684237},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1501755684199},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1501755684199},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1501755684213},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1501755684212},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1501755684212},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1501755684213},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1501755684214},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1501755684214},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1501755684215},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1501755684215},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1501755684216},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1501755684216},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1501755684216},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1501755684217},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1501755684217},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1501755684227},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1501755684228},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1501755684228},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1501755684228},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1501755684229},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1501755684229},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1501755684230},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1501755684230},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1501755684230},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1501755684231},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1501755684231},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1501755684232},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1501755684232},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1501755684233},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1501755684233},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1501755684233},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1501755684234},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1501755684234},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1501755684235},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1501755684235},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1501755684235},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1501755684219},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1501755684219},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1501755684220},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1501755684220},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1501755684220},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1501755684221},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1501755684221},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1501755684221},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1501755684222},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1501755684222},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1501755684223},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1501755684223},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1501755684224},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1501755684224},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1501755684224},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1501755684225},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1501755684226},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1501755684226},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1501755684217},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1501755684218},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1501755684218},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1501755684218},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1501755684236},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1501755684237},{"_id":"source/images/2017-01-09_221746.jpg","hash":"50e58a11c6c24c1c47239eaecce77964ddec0b10","modified":1501755684135},{"_id":"themes/icarus/source/css/images/hexo-theme-card.png","hash":"4870a804b0d6bfacad9defbd4f482e6b300c261b","modified":1501755684197},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1501755684210},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1501755684202},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1501755684201},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1501755684208},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1501755684209},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1501755684207},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1501755684205},{"_id":"public/2017/01/13/wifidog认证服务开发/index.html","hash":"072beacc8f093ed26fdedfac1765e9f0cbd6840f","modified":1501760211975},{"_id":"public/2017/01/09/shadowsocks服务安装/index.html","hash":"25cf33a8014466afc06d005654f43f3a745d260a","modified":1501760212064},{"_id":"public/2017/01/09/react/shadownsocks-install/index.html","hash":"327a5b3fd7d8774477a4f326d593d628fb84030b","modified":1501760212074},{"_id":"public/2017/01/09/openwrt安装wifidog及配置/index.html","hash":"7c331b768e7c2f77085d61ba5ea11402ca15aa3d","modified":1501760212074},{"_id":"public/2017/01/09/pandorabox中mwan负载均衡配置/index.html","hash":"523996494fcf83c56401853a10707a40001e0f03","modified":1501760212074},{"_id":"public/2016/12/02/node/nodejs 创建命令行脚本工具/index.html","hash":"42096d464b8bdeb1111e8893ed60553014d22401","modified":1501760212074},{"_id":"public/2016/11/30/docker/在docker中搭建持续集成环境/index.html","hash":"016a200a1fb20d390effa175ce80f8722cd0dd7e","modified":1501760212075},{"_id":"public/2016/11/10/docker/docker常见参数/index.html","hash":"7fb4fb24149bb65dd31c42adf468827d529c0665","modified":1501760212075},{"_id":"public/2016/11/09/node/npm镜像/index.html","hash":"1c2d0d2b2dc2b5408dc1d78eb42ccb39da1e4a37","modified":1501760212075},{"_id":"public/2016/10/20/node/refactor/index.html","hash":"2d993f25af6a9b7f7d50863e4b1b0ad8c14f7ca6","modified":1501760212075},{"_id":"public/2016/10/20/web桌面虚拟化/index.html","hash":"8744634c1951fc73bdd28cd2dca16fa274e7d7bc","modified":1501760212075},{"_id":"public/2016/10/20/nginx-cors/index.html","hash":"8b648958bb484b1f68726f9a2c0089e60dec925b","modified":1501760212075},{"_id":"public/2016/05/09/raspberry-系统安装/index.html","hash":"c0d32f064fb8543325b1d0e8062915cd55a5ca4b","modified":1501760212075},{"_id":"public/2015/12/30/setup-app-third/index.html","hash":"eea7b68234f2840fc0b412cf0858dd5165c5916d","modified":1501760212076},{"_id":"public/2015/12/12/share_native/index.html","hash":"cbc5afad21fccefd49a3fa42cd2080d252137090","modified":1501760212076},{"_id":"public/2015/12/12/virtual-dom/index.html","hash":"1013c6050b25cdb1bf154543535ffcd59287be02","modified":1501760212076},{"_id":"public/2015/12/10/kali-渗透/index.html","hash":"872c036e6100410ae40aa28af9975078b7675fb9","modified":1501760212076},{"_id":"public/2015/12/10/react/myfav/index.html","hash":"469997a8efc54868127d5d754b228346ab13f233","modified":1501760212076},{"_id":"public/2015/12/08/WebView-调试/index.html","hash":"985f43430795ef20a1305301e0b381c4194f9d3e","modified":1501760212076},{"_id":"public/2015/12/07/react/React-Native开发指南/index.html","hash":"f5d37273a4e0798eabe4c36dbdc6634184844d13","modified":1501760212076},{"_id":"public/2015/06/12/js/index.html","hash":"c5c4f99fb97301675cd585fdaed2ddab608b42c3","modified":1501760212076},{"_id":"public/archives/index.html","hash":"e1cdd3b80a7429675529c8a7d9f23f769c30835b","modified":1501760212076},{"_id":"public/archives/page/2/index.html","hash":"ff92b3645291e535b8c9afcbc730607f43749c32","modified":1501760212076},{"_id":"public/archives/page/3/index.html","hash":"ea9af2f9541f0690e8dca8f28fc1d8f9b0284b6c","modified":1501760212076},{"_id":"public/archives/2015/index.html","hash":"0b0541e322770568bb86da3e316e9ccd5286c5ea","modified":1501760212077},{"_id":"public/archives/2015/06/index.html","hash":"29571e36f21c85f078acb6540d3df60315db4319","modified":1501760212077},{"_id":"public/archives/2015/12/index.html","hash":"501a68e40d6121dc540d47767da89054d254c957","modified":1501760212077},{"_id":"public/archives/2016/index.html","hash":"720d22edb40f7387a9db5e5279b62344e52897a5","modified":1501760212077},{"_id":"public/archives/2016/05/index.html","hash":"d8077f6ec9dc5614ee7f40ffb551bddf0c3825c9","modified":1501760212077},{"_id":"public/archives/2016/10/index.html","hash":"33b29f849ed65a17a339e14239a2a7a05798636c","modified":1501760212077},{"_id":"public/archives/2016/11/index.html","hash":"cdf3bf8e76af1d8b11bc1a93c430c2cff1831abd","modified":1501760212077},{"_id":"public/archives/2016/12/index.html","hash":"01a5e1d2e422bc37388393bea18b46ed03ebc039","modified":1501760212077},{"_id":"public/archives/2017/index.html","hash":"3e3af6a62a9c3bdc6d9c92dd03668773201519e5","modified":1501760212077},{"_id":"public/archives/2017/01/index.html","hash":"89c82b8fb637bbd73190ec9b16e0b21f20196910","modified":1501760212077},{"_id":"public/categories/openwrt/index.html","hash":"a3a9b78405d48ca3bff835078ca61b1887334106","modified":1501760212077},{"_id":"public/categories/raspberry/index.html","hash":"68464e57e40b7a1774b1901bda432ad9773040d3","modified":1501760212077},{"_id":"public/categories/guacamole/index.html","hash":"292189a5fb444618615bb23dab3281fd99a6437a","modified":1501760212077},{"_id":"public/categories/docker/index.html","hash":"7c9f0f9e24d4cdf8971bd4278c723dc243d1d224","modified":1501760212077},{"_id":"public/categories/node/index.html","hash":"316edc14c3bfae5cb7e27c03d8169f9605e342db","modified":1501760212077},{"_id":"public/tags/kali/index.html","hash":"f2fc327e16607b97d7ba2b2b64f5120823de2a96","modified":1501760212078},{"_id":"public/tags/openwrt/index.html","hash":"de46c7b7904711fd5eebbbcfdd17f3a28889349b","modified":1501760212078},{"_id":"public/tags/pandorabox/index.html","hash":"4aee26d1609d571601b89964bfd79f6b5e0acadf","modified":1501760212078},{"_id":"public/tags/hc5861/index.html","hash":"fef9ebbc843cfb06bcdc93cafe754e25f1b90e9f","modified":1501760212078},{"_id":"public/tags/native/index.html","hash":"e36ca705b0d1b7ac2fc165f69865bd2cb1d859bb","modified":1501760212078},{"_id":"public/tags/raspberry/index.html","hash":"5fe40e27f23b77453df3a22bfc915ac8a33031c6","modified":1501760212078},{"_id":"public/tags/nodejs/index.html","hash":"d77564b5ed45553aa716e9d4655b61590221a163","modified":1501760212078},{"_id":"public/tags/react/index.html","hash":"0e070d5dcec6769481fdc49c9be065dcb5bf30e4","modified":1501760212078},{"_id":"public/tags/nw/index.html","hash":"5567c90cb4ca5f87730f1433c3856deed1e75028","modified":1501760212078},{"_id":"public/tags/wifidog/index.html","hash":"0d72914bd3d425ef7b5783a95a0f8e791b0731af","modified":1501760212078},{"_id":"public/tags/docker/index.html","hash":"8cae77e300e2b5b6a1fa75d15cda9100ad7e2541","modified":1501760212078},{"_id":"public/tags/jenkins/index.html","hash":"0bce140d544dfa53e734c054bec77baa0d2ca8a7","modified":1501760212078},{"_id":"public/tags/npm/index.html","hash":"c760421caa358c7c69edfb531083f0120fa791a7","modified":1501760212078},{"_id":"public/tags/ReactNative/index.html","hash":"079ebf69b2c7da5a7473d511c41883f9880c1131","modified":1501760212078},{"_id":"public/tags/React/index.html","hash":"2df5c8beb5ba079dd33bb516168f1606c94091f1","modified":1501760212078},{"_id":"public/tags/代理/index.html","hash":"b31a434355ffe290d00f72a26a00395b3075a6de","modified":1501760212078},{"_id":"public/index.html","hash":"1806646aa0261a9c27caff083781f0620612f871","modified":1501760212078},{"_id":"public/page/2/index.html","hash":"37c1bd003e2718a2c2e45d943413f34d16a1a766","modified":1501760212078},{"_id":"public/page/3/index.html","hash":"10b2e24916ebbd12095a15f8cfa2682867223e26","modified":1501760212078},{"_id":"public/2017/02/23/docker/php/index.html","hash":"d517d0e9f1c7fdf206e1cd41ed91f2d8be672bf8","modified":1501760212105},{"_id":"public/2017/02/17/docker/mysql/index.html","hash":"d4b3d22749ff1d3674092126ddaebed5d476a32b","modified":1501760212105},{"_id":"public/2017/01/23/fed-restructure/index.html","hash":"35517ae0df0cb06cf233974bc33ba660cd024c96","modified":1501760212105},{"_id":"public/2017/02/17/docker/nginx/index.html","hash":"0ab9df08fa18bdbff7bf28485be4ae7fd55cb426","modified":1501760212105},{"_id":"public/2017/01/17/raspberry-openwrt/index.html","hash":"232fdb8a3f88527b43706217c8738fedf444e5c3","modified":1501760212105},{"_id":"public/2017/01/09/openwrt/pandorabox-tcpdump/index.html","hash":"7354dc5327dfbec588e0a604c5f0b0203ecdc25f","modified":1501760212105},{"_id":"public/2017/01/09/openwrt/极路由3刷机过程/index.html","hash":"fd69f573565b17cc5c92e865c653c5015e959d55","modified":1501760212105},{"_id":"public/2017/01/01/test/index.html","hash":"5389bbb2b888ed5f2dae08102b24126ebcf00b72","modified":1501760212105},{"_id":"public/archives/2017/page/2/index.html","hash":"7a7d0e7c0598b773d9d7e385a32b51f9ec725432","modified":1501760212105},{"_id":"public/archives/2017/02/index.html","hash":"003db05d56553936778d6ac3add804353231c392","modified":1501760212105},{"_id":"public/tags/opentwrt/index.html","hash":"9120fbd32ff42939478359996fc4d933146be8b4","modified":1501760212105},{"_id":"public/tags/respberry/index.html","hash":"cf404263289c286f51a1e5c7cf950831174ca6ef","modified":1501760212105},{"_id":"public/tags/mysql/index.html","hash":"162500ca3c14fc9867433a316e8d8aba630d4391","modified":1501760212105},{"_id":"public/tags/git/index.html","hash":"f57455393d9a4b2378ba578f325df481809ee6dd","modified":1501760212105},{"_id":"public/tags/nginx/index.html","hash":"2ba93460e08b24a049dbcb636afe65b59b1eae81","modified":1501760212105},{"_id":"public/tags/tcpdump/index.html","hash":"ebcaa47f3f7f2018eeec6f27a9594702dea31516","modified":1501760212105},{"_id":"public/tags/php/index.html","hash":"04b5bd45a17646708e42f4c1d40d1b447b990ab8","modified":1501760212105},{"_id":"public/css/images/avatar.jpg","hash":"72f3b572f12c694520458ff280644c58bf5844fe","modified":1501760212113},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1501760212113},{"_id":"public/css/images/avatar1.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1501760212113},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1501760212113},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1501760212113},{"_id":"public/vendor/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1501760212113},{"_id":"public/vendor/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1501760212113},{"_id":"public/vendor/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1501760212113},{"_id":"public/vendor/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1501760212113},{"_id":"public/vendor/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1501760212113},{"_id":"public/vendor/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1501760212113},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1501760212114},{"_id":"public/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1501760212114},{"_id":"public/vendor/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1501760212114},{"_id":"public/vendor/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1501760212114},{"_id":"public/vendor/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1501760212114},{"_id":"public/vendor/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1501760212115},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1501760212115},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1501760212115},{"_id":"public/images/2017-01-09_122308.jpg","hash":"5b6a9a8128a94d90b259c8fb84f50478af584a71","modified":1501760212621},{"_id":"public/images/2017-01-09_122234.jpg","hash":"ea00898435526d813606185117e22997df0e8339","modified":1501760212621},{"_id":"public/images/201701091216.jpg","hash":"bd548b77173fe7e99d0cffe05266dbef714da629","modified":1501760212630},{"_id":"public/images/201701091218.jpg","hash":"19ac9be99062ea636b9bf74027e0b692d11d4333","modified":1501760212630},{"_id":"public/images/2017-01-09_213058.jpg","hash":"76c8299a3d5d8a313ff4d7966f98c1203f1eab73","modified":1501760212630},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1501760212630},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1501760212630},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1501760212630},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1501760212630},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1501760212637},{"_id":"public/js/main.js","hash":"92b61b962de6e4d2b3deffe52947886f8cfcc41f","modified":1501760212637},{"_id":"public/vendor/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1501760212637},{"_id":"public/vendor/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1501760212637},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1501760212637},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1501760212637},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1501760212637},{"_id":"public/vendor/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1501760212637},{"_id":"public/vendor/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1501760212637},{"_id":"public/vendor/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1501760212637},{"_id":"public/vendor/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1501760212638},{"_id":"public/vendor/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1501760212638},{"_id":"public/vendor/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1501760212639},{"_id":"public/vendor/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1501760212639},{"_id":"public/css/style.css","hash":"e75b3ea9a5a620e6ff9b965c48aad43e2d971289","modified":1501760212639},{"_id":"public/vendor/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1501760212639},{"_id":"public/vendor/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1501760212639},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1501760212639},{"_id":"public/vendor/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1501760212639},{"_id":"public/vendor/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1501760212639},{"_id":"public/vendor/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1501760212639},{"_id":"public/vendor/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1501760212640},{"_id":"public/vendor/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1501760212640},{"_id":"public/vendor/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1501760212640},{"_id":"public/vendor/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1501760212640},{"_id":"public/vendor/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1501760212640},{"_id":"public/vendor/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501760212640},{"_id":"public/images/2017-01-09_122359.jpg","hash":"247dc02b38074642a7356274ac7dd7f15cca8517","modified":1501760212640},{"_id":"public/images/2017-01-09_122457.jpg","hash":"2cc254d11eea59668a8b01738028ad7c696b682e","modified":1501760212640},{"_id":"public/images/2017-01-09_122435.jpg","hash":"d3e73d29b2adad4ebc9d2d4c75320501258e5b02","modified":1501760212640},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1501760212640},{"_id":"public/images/2017-01-09_122138.jpg","hash":"013963a33f585ad528eab292368e35cd16570419","modified":1501760212643},{"_id":"public/images/2017-01-09_122944.jpg","hash":"f602e5257c16018c15123448691633adc9e43502","modified":1501760212643},{"_id":"public/css/images/hexo-theme-card.png","hash":"4870a804b0d6bfacad9defbd4f482e6b300c261b","modified":1501760212643},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1501760212648},{"_id":"public/images/2017-01-09_221746.jpg","hash":"50e58a11c6c24c1c47239eaecce77964ddec0b10","modified":1501760212653}],"Category":[{"name":"openwrt","_id":"cj5wd96dp000mnou9md14o9vp"},{"name":"raspberry","_id":"cj5wd96dt000snou9jk5blrkd"},{"name":"guacamole","_id":"cj5wd96dy000znou9p2dvy85v"},{"name":"docker","_id":"cj5wd96fj001unou94v3tdfvh"},{"name":"node","_id":"cj5wd96fv002dnou9bnef0fog"}],"Data":[],"Page":[],"Post":[{"_content":"# JavaScript中this指向\n\n------\n\n> 对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了\n> JavaScript 中的 this 关键字，才算是迈入了 JavaScript\n> 这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而\n> JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。\n\n随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，**调用函数的那个对象**。\n\n\n----------\n\n## 1、\t指向window的隐式指向\n```javascript\nfunction sayHello(){\n    this.nama = \"tsrot\";\n    console.log(\"hello \" + this.name);\n}\nsayHello()       //hello tsrot\n```\n此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：\n```javascript\nvar name = \"tsrot\";\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nsayHello();        //hello tsrot\n```\n下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。\n```javascript\nvar name = \"xieliqun\";\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nsayHello();       \nconsole.log(\"hello \" + this.name); //hello tsrot\n```\n*注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input*，例如下面情况：\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello()\">\n<script>\n\tfunction sayHello(){\n    \tconsole.log(\"hello \" + this.tagName);   //hello undefined\n    }\n</script>\n```\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello(this.tagName)\">\n<script>\n\tfunction sayHello(tagName){\n    \tconsole.log(\"hello \" + tagName);   //hello INPUT\n    }\n</script>\n```\n\n\n----------\n## 2、\t指向当前对象的显式调用\n\n### （1）、作为对象方法的调用\n函数还可以作为某个对象的方法调用，这时this就指这个上级对象。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello();  //hello tsrot\n```\n### （2）、作为构造函数调用\n所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。\n```javascript\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nvar o = new sayHello();\nconsole.log(\"hello \" + o.name);  //hello tsrot\n```\n\n----------\n\n\n## 3、\t指向当前对象的隐式调用\n### （1）\tcall、apply调用\ncall（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name;\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello.apply();   //hello\n```\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n如果把最后一行代码修改为\n```javascript\n// o.hello.apply();    //hello\no.hello.apply();      //hello tsrot\n```\n此时this就指向对象o了。\n### （2）\t原生Function方法bind（）调用\n很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //5秒后输出 你好，我是tsrot\n```\n下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\n//var boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(person.sayHello,5000);   //5秒后输出 你好，我是\n```\n用apply和call调用时，函数将立即执行\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.apply(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //立即输出 你好，我是tsrot\n```\n\n\n----------\n## 4、\t当this在构造函数有return时\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return {};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return function(){};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n当return null和undefined时\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return null;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return undefined;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n","source":"_drafts/JavaScript中this指向.md","raw":"# JavaScript中this指向\n\n------\n\n> 对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了\n> JavaScript 中的 this 关键字，才算是迈入了 JavaScript\n> 这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而\n> JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。\n\n随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，**调用函数的那个对象**。\n\n\n----------\n\n## 1、\t指向window的隐式指向\n```javascript\nfunction sayHello(){\n    this.nama = \"tsrot\";\n    console.log(\"hello \" + this.name);\n}\nsayHello()       //hello tsrot\n```\n此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：\n```javascript\nvar name = \"tsrot\";\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nsayHello();        //hello tsrot\n```\n下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。\n```javascript\nvar name = \"xieliqun\";\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nsayHello();       \nconsole.log(\"hello \" + this.name); //hello tsrot\n```\n*注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input*，例如下面情况：\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello()\">\n<script>\n\tfunction sayHello(){\n    \tconsole.log(\"hello \" + this.tagName);   //hello undefined\n    }\n</script>\n```\n```javascript\n<input type=\"button\" value=\"click me\" onclick=\"sayHello(this.tagName)\">\n<script>\n\tfunction sayHello(tagName){\n    \tconsole.log(\"hello \" + tagName);   //hello INPUT\n    }\n</script>\n```\n\n\n----------\n## 2、\t指向当前对象的显式调用\n\n### （1）、作为对象方法的调用\n函数还可以作为某个对象的方法调用，这时this就指这个上级对象。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name);\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello();  //hello tsrot\n```\n### （2）、作为构造函数调用\n所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。\n```javascript\nfunction sayHello(){\n    this.name = \"tsrot\";\n}\nvar o = new sayHello();\nconsole.log(\"hello \" + o.name);  //hello tsrot\n```\n\n----------\n\n\n## 3、\t指向当前对象的隐式调用\n### （1）\tcall、apply调用\ncall（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。\n```javascript\nfunction sayHello(){\n    console.log(\"hello \" + this.name;\n}\nvar o = {};\no.name = \"tsrot\";\no.hello = sayHello;\no.hello.apply();   //hello\n```\napply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。\n如果把最后一行代码修改为\n```javascript\n// o.hello.apply();    //hello\no.hello.apply();      //hello tsrot\n```\n此时this就指向对象o了。\n### （2）\t原生Function方法bind（）调用\n很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //5秒后输出 你好，我是tsrot\n```\n下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\n//var boundFunc = person.sayHello.bind(person,person.sayHello);\nsetTimeout(person.sayHello,5000);   //5秒后输出 你好，我是\n```\n用apply和call调用时，函数将立即执行\n```javascript\nvar person = {\n    name:\"tsrot\",\n    sayHello:function(){\n        console.log(\"你好，我是\"+this.name);\n    }\n}\nvar boundFunc = person.sayHello.apply(person,person.sayHello);\nsetTimeout(boundFunc,5000);   //立即输出 你好，我是tsrot\n```\n\n\n----------\n## 4、\t当this在构造函数有return时\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return {};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return function(){};\n}\nvar o = new fn();\nconsole.log(o.name);  //undefined\n```\n当return null和undefined时\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return null;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n```javascript\nfunction fn(){\n    this.name = \"tsrot\";\n    return undefined;\n}\nvar o = new fn();\nconsole.log(o.name);  //tsrot\n```\n","slug":"JavaScript中this指向","published":0,"date":"2017-08-03T10:21:24.106Z","updated":"2017-08-03T10:21:24.106Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96cg0000nou9o4kretd8","content":"<h1 id=\"JavaScript中this指向\"><a href=\"#JavaScript中this指向\" class=\"headerlink\" title=\"JavaScript中this指向\"></a>JavaScript中this指向</h1><hr>\n<blockquote>\n<p>对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了<br>JavaScript 中的 this 关键字，才算是迈入了 JavaScript<br>这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而<br>JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。</p>\n</blockquote>\n<p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，<strong>调用函数的那个对象</strong>。</p>\n<hr>\n<h2 id=\"1、-指向window的隐式指向\"><a href=\"#1、-指向window的隐式指向\" class=\"headerlink\" title=\"1、    指向window的隐式指向\"></a>1、    指向window的隐式指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.nama = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello()       <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure>\n<p>此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();        <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p>下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xieliqun\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();       </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name); <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p><em>注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input</em>，例如下面情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello()\"</span>&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.tagName);   <span class=\"comment\">//hello undefined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello(this.tagName)\"</span>&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">tagName</span>)</span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + tagName);   <span class=\"comment\">//hello INPUT</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2、-指向当前对象的显式调用\"><a href=\"#2、-指向当前对象的显式调用\" class=\"headerlink\" title=\"2、    指向当前对象的显式调用\"></a>2、    指向当前对象的显式调用</h2><h3 id=\"（1）、作为对象方法的调用\"><a href=\"#（1）、作为对象方法的调用\" class=\"headerlink\" title=\"（1）、作为对象方法的调用\"></a>（1）、作为对象方法的调用</h3><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">o.hello = sayHello;</div><div class=\"line\">o.hello();  <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"（2）、作为构造函数调用\"><a href=\"#（2）、作为构造函数调用\" class=\"headerlink\" title=\"（2）、作为构造函数调用\"></a>（2）、作为构造函数调用</h3><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> sayHello();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + o.name);  <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3、-指向当前对象的隐式调用\"><a href=\"#3、-指向当前对象的隐式调用\" class=\"headerlink\" title=\"3、    指向当前对象的隐式调用\"></a>3、    指向当前对象的隐式调用</h2><h3 id=\"（1）-call、apply调用\"><a href=\"#（1）-call、apply调用\" class=\"headerlink\" title=\"（1）    call、apply调用\"></a>（1）    call、apply调用</h3><p>call（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">o.hello = sayHello;</div><div class=\"line\">o.hello.apply();   <span class=\"comment\">//hello</span></div></pre></td></tr></table></figure></p>\n<p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。<br>如果把最后一行代码修改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// o.hello.apply();    //hello</span></div><div class=\"line\">o.hello.apply();      <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p>此时this就指向对象o了。</p>\n<h3 id=\"（2）-原生Function方法bind（）调用\"><a href=\"#（2）-原生Function方法bind（）调用\" class=\"headerlink\" title=\"（2）    原生Function方法bind（）调用\"></a>（2）    原生Function方法bind（）调用</h3><p>很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(person,person.sayHello);</div><div class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是tsrot</span></div></pre></td></tr></table></figure></p>\n<p>下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//var boundFunc = person.sayHello.bind(person,person.sayHello);</span></div><div class=\"line\">setTimeout(person.sayHello,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是</span></div></pre></td></tr></table></figure></p>\n<p>用apply和call调用时，函数将立即执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.apply(person,person.sayHello);</div><div class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//立即输出 你好，我是tsrot</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4、-当this在构造函数有return时\"><a href=\"#4、-当this在构造函数有return时\" class=\"headerlink\" title=\"4、    当this在构造函数有return时\"></a>4、    当this在构造函数有return时</h2><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>当return null和undefined时<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript中this指向\"><a href=\"#JavaScript中this指向\" class=\"headerlink\" title=\"JavaScript中this指向\"></a>JavaScript中this指向</h1><hr>\n<blockquote>\n<p>对于JavaScript初学者来说，this指针的指向问题一直是很混乱的问题。在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了<br>JavaScript 中的 this 关键字，才算是迈入了 JavaScript<br>这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而<br>JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。</p>\n</blockquote>\n<p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，<strong>调用函数的那个对象</strong>。</p>\n<hr>\n<h2 id=\"1、-指向window的隐式指向\"><a href=\"#1、-指向window的隐式指向\" class=\"headerlink\" title=\"1、    指向window的隐式指向\"></a>1、    指向window的隐式指向</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.nama = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello()       <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure>\n<p>此时的变量name相当于window.name，因为调用sayHello函数的对象为window，相当于window.sayHello()。和下面两种情况是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();        <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p>下面的name相当于在window下赋值了两次，谁后面执行就取谁。如果把var name = “xieliqun”放到sayHello（）后面，此时输出的就是 hello xieliqun。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xieliqun\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">sayHello();       </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name); <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p><em>注：当函数在DOM上调用时，未传入this，此时，this也指向window。当传入this时，this指向当前DOM input</em>，例如下面情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello()\"</span>&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.tagName);   <span class=\"comment\">//hello undefined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> value=<span class=\"string\">\"click me\"</span> onclick=<span class=\"string\">\"sayHello(this.tagName)\"</span>&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\">tagName</span>)</span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + tagName);   <span class=\"comment\">//hello INPUT</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2、-指向当前对象的显式调用\"><a href=\"#2、-指向当前对象的显式调用\" class=\"headerlink\" title=\"2、    指向当前对象的显式调用\"></a>2、    指向当前对象的显式调用</h2><h3 id=\"（1）、作为对象方法的调用\"><a href=\"#（1）、作为对象方法的调用\" class=\"headerlink\" title=\"（1）、作为对象方法的调用\"></a>（1）、作为对象方法的调用</h3><p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">o.hello = sayHello;</div><div class=\"line\">o.hello();  <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"（2）、作为构造函数调用\"><a href=\"#（2）、作为构造函数调用\" class=\"headerlink\" title=\"（2）、作为构造函数调用\"></a>（2）、作为构造函数调用</h3><p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> sayHello();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + o.name);  <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3、-指向当前对象的隐式调用\"><a href=\"#3、-指向当前对象的隐式调用\" class=\"headerlink\" title=\"3、    指向当前对象的隐式调用\"></a>3、    指向当前对象的隐式调用</h2><h3 id=\"（1）-call、apply调用\"><a href=\"#（1）-call、apply调用\" class=\"headerlink\" title=\"（1）    call、apply调用\"></a>（1）    call、apply调用</h3><p>call（）、apply()都是函数对象的一个方法，它们的作用是改变函数的调用对象，它们的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello \"</span> + <span class=\"keyword\">this</span>.name;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">o.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">o.hello = sayHello;</div><div class=\"line\">o.hello.apply();   <span class=\"comment\">//hello</span></div></pre></td></tr></table></figure></p>\n<p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。<br>如果把最后一行代码修改为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// o.hello.apply();    //hello</span></div><div class=\"line\">o.hello.apply();      <span class=\"comment\">//hello tsrot</span></div></pre></td></tr></table></figure></p>\n<p>此时this就指向对象o了。</p>\n<h3 id=\"（2）-原生Function方法bind（）调用\"><a href=\"#（2）-原生Function方法bind（）调用\" class=\"headerlink\" title=\"（2）    原生Function方法bind（）调用\"></a>（2）    原生Function方法bind（）调用</h3><p>很多人不知道原生js也有bind（）方法，一直以为bind（）的方法只有jQuery有，我也是最近看别人博客知道的。其实原生的bind和jQuery的bind是不同的，原生的bind相当于apply和call。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.bind(person,person.sayHello);</div><div class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是tsrot</span></div></pre></td></tr></table></figure></p>\n<p>下图代码中person.sayHello,相当于在window.person.sayHello，所以this指向window。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//var boundFunc = person.sayHello.bind(person,person.sayHello);</span></div><div class=\"line\">setTimeout(person.sayHello,<span class=\"number\">5000</span>);   <span class=\"comment\">//5秒后输出 你好，我是</span></div></pre></td></tr></table></figure></p>\n<p>用apply和call调用时，函数将立即执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    name:<span class=\"string\">\"tsrot\"</span>,</div><div class=\"line\">    sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好，我是\"</span>+<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> boundFunc = person.sayHello.apply(person,person.sayHello);</div><div class=\"line\">setTimeout(boundFunc,<span class=\"number\">5000</span>);   <span class=\"comment\">//立即输出 你好，我是tsrot</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4、-当this在构造函数有return时\"><a href=\"#4、-当this在构造函数有return时\" class=\"headerlink\" title=\"4、    当this在构造函数有return时\"></a>4、    当this在构造函数有return时</h2><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>当return null和undefined时<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> fn();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.name);  <span class=\"comment\">//tsrot</span></div></pre></td></tr></table></figure>\n"},{"_content":"##### 1. 安装docker\nJenkins所在服务器为mac系统，使用docker需要先安装boot2docker，具体安装流程参考[官网](https://docs.docker.com/installation/mac/)。此次安装是使用mobileDev用户进行全局安装boot2docker。\n\n##### 2. Jenkins项目构建脚本——docker build\n安装完docker后，便可以在jenkins中使用，在构建脚本处使用`docker build -t xxx .`进行打包生成images，直接构建运行会遇到一个问题。    \n\n```\nSending build context to Docker daemon \nPost http:///var/run/docker.sock/v1.19/build?cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&memory=0&memswap=0&rm=1&t=ytxdockerhub%2Fpractice: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?\nBuild step 'Execute shell' marked build as failure\nFinished: FAILURE\n```\n这是因为jenkins在运行构建脚本时，没有读取到环境变量`DOCKER_TLS_VERIFY`和`DOCKER_HOST`和`DOCKER_CERT_PATH`。因此需要往系统中加入这三个环境变量。  \n完整事例脚本如下：  \n\n```\nexport DOCKER_TLS_VERIFY=1\nexport DOCKER_HOST=tcp://192.168.59.103:2376\nexport DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm\n\ndocker build -t ytxdockerhub/chat .\n```\n这里有个疑问：  \n在1安装docker的流程中有一步骤是将上述环境变量写入系统，但是Jenkins使用时还是提示没有获取到变量。  \n自行写入`.zshrc`文件，`source`后，使用 `env`也显示环境变量写入成功。但是jenkins还是无法查找到变量。怪异～  \n所以只能在写构建脚本的时候把上述环境变量加上去。有解决方式的请在此处补充。  \n```\n解决方式：  \n目前只找到一种解决方式，即在【系统管理】---> 【系统设置】，手动添加变量\n```\n\n##### 3. Jenkins项目构建脚本——docker push\npush操作需要`docker login`，现在我们使用的用户是mobileDev，即使该用户已经login了，jenkins依然是未登陆状态。所以我们需要将系统用户切换到jenkins，在该用户下进行登陆。不过该用户并没有安装docker，所以我们需要再次使用如下命令安装docker  \n\n```\nsu jenkins  ①  # 密码已经修改为superwolf \nboot2docker init   ②\nboot2docker start  ③\nboot2docker shellinit ④\neval \"$(boot2docker shellinit)\" ⑤\n```\n然而在③执行过程中竟然需要输入docker的密码，不知为何。如下所示：\n\n```\n.docker@localhost's password:\nodocker@localhost's password:\ndocker@localhost's password:\n```\n密码全部是`tcuser`  \n最后使用`docker login`。构建脚本如下:\n\n```\nexport DOCKER_TLS_VERIFY=1\nexport DOCKER_HOST=tcp://192.168.59.103:2376\nexport DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm\n\ndocker build -t ytxdockerhub/chat .\ndocker push ytxdockerhub/chat\n```\n这里有个疑问：  \n我尝试将安装在mobileDev的docker删除掉，使用`boot2docker delete`即可。然后只在jenkins用户下安装docker，安装成功后使用`docker images`等命令时会产生如下错误：  \n\n```\nAn error occurred trying to connect: Get https://192.168.59.103:2376/v1.19/images/json: dial tcp 192.168.59.103:2376: i/o timeout\n```\ndocker无法使用，虽然已经安装成功。最终只能在mobileDev中安装docker后，再在jenkins用户下再安装一遍。有解决方案，请贴出来\n","source":"_drafts/Jenkins、docker整合.md","raw":"##### 1. 安装docker\nJenkins所在服务器为mac系统，使用docker需要先安装boot2docker，具体安装流程参考[官网](https://docs.docker.com/installation/mac/)。此次安装是使用mobileDev用户进行全局安装boot2docker。\n\n##### 2. Jenkins项目构建脚本——docker build\n安装完docker后，便可以在jenkins中使用，在构建脚本处使用`docker build -t xxx .`进行打包生成images，直接构建运行会遇到一个问题。    \n\n```\nSending build context to Docker daemon \nPost http:///var/run/docker.sock/v1.19/build?cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&memory=0&memswap=0&rm=1&t=ytxdockerhub%2Fpractice: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?\nBuild step 'Execute shell' marked build as failure\nFinished: FAILURE\n```\n这是因为jenkins在运行构建脚本时，没有读取到环境变量`DOCKER_TLS_VERIFY`和`DOCKER_HOST`和`DOCKER_CERT_PATH`。因此需要往系统中加入这三个环境变量。  \n完整事例脚本如下：  \n\n```\nexport DOCKER_TLS_VERIFY=1\nexport DOCKER_HOST=tcp://192.168.59.103:2376\nexport DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm\n\ndocker build -t ytxdockerhub/chat .\n```\n这里有个疑问：  \n在1安装docker的流程中有一步骤是将上述环境变量写入系统，但是Jenkins使用时还是提示没有获取到变量。  \n自行写入`.zshrc`文件，`source`后，使用 `env`也显示环境变量写入成功。但是jenkins还是无法查找到变量。怪异～  \n所以只能在写构建脚本的时候把上述环境变量加上去。有解决方式的请在此处补充。  \n```\n解决方式：  \n目前只找到一种解决方式，即在【系统管理】---> 【系统设置】，手动添加变量\n```\n\n##### 3. Jenkins项目构建脚本——docker push\npush操作需要`docker login`，现在我们使用的用户是mobileDev，即使该用户已经login了，jenkins依然是未登陆状态。所以我们需要将系统用户切换到jenkins，在该用户下进行登陆。不过该用户并没有安装docker，所以我们需要再次使用如下命令安装docker  \n\n```\nsu jenkins  ①  # 密码已经修改为superwolf \nboot2docker init   ②\nboot2docker start  ③\nboot2docker shellinit ④\neval \"$(boot2docker shellinit)\" ⑤\n```\n然而在③执行过程中竟然需要输入docker的密码，不知为何。如下所示：\n\n```\n.docker@localhost's password:\nodocker@localhost's password:\ndocker@localhost's password:\n```\n密码全部是`tcuser`  \n最后使用`docker login`。构建脚本如下:\n\n```\nexport DOCKER_TLS_VERIFY=1\nexport DOCKER_HOST=tcp://192.168.59.103:2376\nexport DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm\n\ndocker build -t ytxdockerhub/chat .\ndocker push ytxdockerhub/chat\n```\n这里有个疑问：  \n我尝试将安装在mobileDev的docker删除掉，使用`boot2docker delete`即可。然后只在jenkins用户下安装docker，安装成功后使用`docker images`等命令时会产生如下错误：  \n\n```\nAn error occurred trying to connect: Get https://192.168.59.103:2376/v1.19/images/json: dial tcp 192.168.59.103:2376: i/o timeout\n```\ndocker无法使用，虽然已经安装成功。最终只能在mobileDev中安装docker后，再在jenkins用户下再安装一遍。有解决方案，请贴出来\n","slug":"Jenkins、docker整合","published":0,"date":"2017-08-03T10:21:24.106Z","updated":"2017-08-03T10:21:24.107Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96cp0001nou9av52m96z","content":"<h5 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1. 安装docker\"></a>1. 安装docker</h5><p>Jenkins所在服务器为mac系统，使用docker需要先安装boot2docker，具体安装流程参考<a href=\"https://docs.docker.com/installation/mac/\" target=\"_blank\" rel=\"external\">官网</a>。此次安装是使用mobileDev用户进行全局安装boot2docker。</p>\n<h5 id=\"2-Jenkins项目构建脚本——docker-build\"><a href=\"#2-Jenkins项目构建脚本——docker-build\" class=\"headerlink\" title=\"2. Jenkins项目构建脚本——docker build\"></a>2. Jenkins项目构建脚本——docker build</h5><p>安装完docker后，便可以在jenkins中使用，在构建脚本处使用<code>docker build -t xxx .</code>进行打包生成images，直接构建运行会遇到一个问题。    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sending build context to Docker daemon </div><div class=\"line\">Post http:///var/run/docker.sock/v1.19/build?cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;memory=0&amp;memswap=0&amp;rm=1&amp;t=ytxdockerhub%2Fpractice: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?</div><div class=\"line\">Build step &apos;Execute shell&apos; marked build as failure</div><div class=\"line\">Finished: FAILURE</div></pre></td></tr></table></figure>\n<p>这是因为jenkins在运行构建脚本时，没有读取到环境变量<code>DOCKER_TLS_VERIFY</code>和<code>DOCKER_HOST</code>和<code>DOCKER_CERT_PATH</code>。因此需要往系统中加入这三个环境变量。<br>完整事例脚本如下：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export DOCKER_TLS_VERIFY=1</div><div class=\"line\">export DOCKER_HOST=tcp://192.168.59.103:2376</div><div class=\"line\">export DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm</div><div class=\"line\"></div><div class=\"line\">docker build -t ytxdockerhub/chat .</div></pre></td></tr></table></figure>\n<p>这里有个疑问：<br>在1安装docker的流程中有一步骤是将上述环境变量写入系统，但是Jenkins使用时还是提示没有获取到变量。<br>自行写入<code>.zshrc</code>文件，<code>source</code>后，使用 <code>env</code>也显示环境变量写入成功。但是jenkins还是无法查找到变量。怪异～<br>所以只能在写构建脚本的时候把上述环境变量加上去。有解决方式的请在此处补充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">解决方式：  </div><div class=\"line\">目前只找到一种解决方式，即在【系统管理】---&gt; 【系统设置】，手动添加变量</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-Jenkins项目构建脚本——docker-push\"><a href=\"#3-Jenkins项目构建脚本——docker-push\" class=\"headerlink\" title=\"3. Jenkins项目构建脚本——docker push\"></a>3. Jenkins项目构建脚本——docker push</h5><p>push操作需要<code>docker login</code>，现在我们使用的用户是mobileDev，即使该用户已经login了，jenkins依然是未登陆状态。所以我们需要将系统用户切换到jenkins，在该用户下进行登陆。不过该用户并没有安装docker，所以我们需要再次使用如下命令安装docker  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">su jenkins  ①  # 密码已经修改为superwolf </div><div class=\"line\">boot2docker init   ②</div><div class=\"line\">boot2docker start  ③</div><div class=\"line\">boot2docker shellinit ④</div><div class=\"line\">eval &quot;$(boot2docker shellinit)&quot; ⑤</div></pre></td></tr></table></figure>\n<p>然而在③执行过程中竟然需要输入docker的密码，不知为何。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.docker@localhost&apos;s password:</div><div class=\"line\">odocker@localhost&apos;s password:</div><div class=\"line\">docker@localhost&apos;s password:</div></pre></td></tr></table></figure>\n<p>密码全部是<code>tcuser</code><br>最后使用<code>docker login</code>。构建脚本如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export DOCKER_TLS_VERIFY=1</div><div class=\"line\">export DOCKER_HOST=tcp://192.168.59.103:2376</div><div class=\"line\">export DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm</div><div class=\"line\"></div><div class=\"line\">docker build -t ytxdockerhub/chat .</div><div class=\"line\">docker push ytxdockerhub/chat</div></pre></td></tr></table></figure>\n<p>这里有个疑问：<br>我尝试将安装在mobileDev的docker删除掉，使用<code>boot2docker delete</code>即可。然后只在jenkins用户下安装docker，安装成功后使用<code>docker images</code>等命令时会产生如下错误：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">An error occurred trying to connect: Get https://192.168.59.103:2376/v1.19/images/json: dial tcp 192.168.59.103:2376: i/o timeout</div></pre></td></tr></table></figure>\n<p>docker无法使用，虽然已经安装成功。最终只能在mobileDev中安装docker后，再在jenkins用户下再安装一遍。有解决方案，请贴出来</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1. 安装docker\"></a>1. 安装docker</h5><p>Jenkins所在服务器为mac系统，使用docker需要先安装boot2docker，具体安装流程参考<a href=\"https://docs.docker.com/installation/mac/\" target=\"_blank\" rel=\"external\">官网</a>。此次安装是使用mobileDev用户进行全局安装boot2docker。</p>\n<h5 id=\"2-Jenkins项目构建脚本——docker-build\"><a href=\"#2-Jenkins项目构建脚本——docker-build\" class=\"headerlink\" title=\"2. Jenkins项目构建脚本——docker build\"></a>2. Jenkins项目构建脚本——docker build</h5><p>安装完docker后，便可以在jenkins中使用，在构建脚本处使用<code>docker build -t xxx .</code>进行打包生成images，直接构建运行会遇到一个问题。    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sending build context to Docker daemon </div><div class=\"line\">Post http:///var/run/docker.sock/v1.19/build?cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;memory=0&amp;memswap=0&amp;rm=1&amp;t=ytxdockerhub%2Fpractice: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?</div><div class=\"line\">Build step &apos;Execute shell&apos; marked build as failure</div><div class=\"line\">Finished: FAILURE</div></pre></td></tr></table></figure>\n<p>这是因为jenkins在运行构建脚本时，没有读取到环境变量<code>DOCKER_TLS_VERIFY</code>和<code>DOCKER_HOST</code>和<code>DOCKER_CERT_PATH</code>。因此需要往系统中加入这三个环境变量。<br>完整事例脚本如下：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">export DOCKER_TLS_VERIFY=1</div><div class=\"line\">export DOCKER_HOST=tcp://192.168.59.103:2376</div><div class=\"line\">export DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm</div><div class=\"line\"></div><div class=\"line\">docker build -t ytxdockerhub/chat .</div></pre></td></tr></table></figure>\n<p>这里有个疑问：<br>在1安装docker的流程中有一步骤是将上述环境变量写入系统，但是Jenkins使用时还是提示没有获取到变量。<br>自行写入<code>.zshrc</code>文件，<code>source</code>后，使用 <code>env</code>也显示环境变量写入成功。但是jenkins还是无法查找到变量。怪异～<br>所以只能在写构建脚本的时候把上述环境变量加上去。有解决方式的请在此处补充。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">解决方式：  </div><div class=\"line\">目前只找到一种解决方式，即在【系统管理】---&gt; 【系统设置】，手动添加变量</div></pre></td></tr></table></figure></p>\n<h5 id=\"3-Jenkins项目构建脚本——docker-push\"><a href=\"#3-Jenkins项目构建脚本——docker-push\" class=\"headerlink\" title=\"3. Jenkins项目构建脚本——docker push\"></a>3. Jenkins项目构建脚本——docker push</h5><p>push操作需要<code>docker login</code>，现在我们使用的用户是mobileDev，即使该用户已经login了，jenkins依然是未登陆状态。所以我们需要将系统用户切换到jenkins，在该用户下进行登陆。不过该用户并没有安装docker，所以我们需要再次使用如下命令安装docker  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">su jenkins  ①  # 密码已经修改为superwolf </div><div class=\"line\">boot2docker init   ②</div><div class=\"line\">boot2docker start  ③</div><div class=\"line\">boot2docker shellinit ④</div><div class=\"line\">eval &quot;$(boot2docker shellinit)&quot; ⑤</div></pre></td></tr></table></figure>\n<p>然而在③执行过程中竟然需要输入docker的密码，不知为何。如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.docker@localhost&apos;s password:</div><div class=\"line\">odocker@localhost&apos;s password:</div><div class=\"line\">docker@localhost&apos;s password:</div></pre></td></tr></table></figure>\n<p>密码全部是<code>tcuser</code><br>最后使用<code>docker login</code>。构建脚本如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export DOCKER_TLS_VERIFY=1</div><div class=\"line\">export DOCKER_HOST=tcp://192.168.59.103:2376</div><div class=\"line\">export DOCKER_CERT_PATH=/Users/Shared/Jenkins/.boot2docker/certs/boot2docker-vm</div><div class=\"line\"></div><div class=\"line\">docker build -t ytxdockerhub/chat .</div><div class=\"line\">docker push ytxdockerhub/chat</div></pre></td></tr></table></figure>\n<p>这里有个疑问：<br>我尝试将安装在mobileDev的docker删除掉，使用<code>boot2docker delete</code>即可。然后只在jenkins用户下安装docker，安装成功后使用<code>docker images</code>等命令时会产生如下错误：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">An error occurred trying to connect: Get https://192.168.59.103:2376/v1.19/images/json: dial tcp 192.168.59.103:2376: i/o timeout</div></pre></td></tr></table></figure>\n<p>docker无法使用，虽然已经安装成功。最终只能在mobileDev中安装docker后，再在jenkins用户下再安装一遍。有解决方案，请贴出来</p>\n"},{"_content":"很多时候，我们需要集中的管理多个docker容器，例如我们会希望自己不用一个个的去启动容器，毕竟这样会很耗费时间和精力。我们希望可以通过配置文件，将启动容器时需要的配置信息写好，然后通过一条命令就可以启动所有容器。\n\n目前github上已经有这样的开源工具，如crane。\n\n而docker官方也实现和开源了这样的一套工具，即编排系统，docker-compose。它的前身就是Fig。\n\n接下来我们就来学习使用这样的一个工具，我们将会以Node.js为例子来学习使用。\n\n### Getting Started\n首先你需要安装docker-compose。如何安装直接就看[官网](https://docs.docker.com/compose/install/)了，已经很清楚。\n\n#### 创建node.js项目\n1.创建一个项目目录\n\n```bash\n$ mkdir compose-demo\n$ cd compose-demo\n$ npm init\n$ npm i redis --save \n```\n2.创建一个简单的node.js服务器\n```javascript\n// app.js\nconst http = require('http')\nconst redis = require('redis')\n\nconst redisCli = redis.createClient(6379, 'redis')\n\nconst server = http.createServer((req, res) => {\n  const num = Math.floor(Math.random() * 100)\n  redisCli.set('num', num)\n\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain')\n\n  res.end(`Hello, you set a random num ${num} to redis \\n`)\n})\n\nserver.listen(8080)\n```\n\n3.创建Dockerfile\n```dockerfile\nFROM node:6.2\n\nCOPY ./package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /compose-demo && cp -a /tmp/node_modules /compose-demo/\n\nWORKDIR /compose-demo\nADD . /compose-demo/\n\nEXPOSE 8080\n\nCMD [\"node\", \"app.js\"]\n```\n\n4.创建docker镜像\n```bash\n$ docker build -t compose-demo:latest .\n```\n\n5.创建compose配置文件docker-compose.yml\n```yaml\nversion: '2'\n\nservices:\n  compose-demo:\n    build: .\n    container_name: compose-demo\n    ports:\n      - \"18080:8080\"\n    volumes:\n      - .:/compose-demo\n    depends_on:\n      - redis\n  redis:\n    image: redis \n```\n整个过程其实最重要的就是这份配置文件了，分析一下这份文件。\n\n首行就是说明了这份文件使用compose版本2来解析，版本1也会在不远的将来被淘汰掉。\n\n接下来就是服务的配置了，compose将要编排的的容器称之为服务，多个服务组成了一个服务组，compose便是对这些服务进行管理。\n\n这里我们将会启动两个容器，第一个是我们的Node项目容器，它会将容器中的8080端口暴露在宿主机器的18080端口上面。\n\n我们还会将容器中的/compose-demo目录挂在到宿主机器的当前目录下面，这样我们修改源代码的时候就不用重新构建镜像了。\n\n最后我们使用ddpends_on关键字，说明这个容器依赖于另外一个容器redis，配置之后容器之间便可以进行交互，又不会暴露在外部宿主机器，有点像link命令。\n\n6.使用docker-compose构建镜像和容器\n```bash\n$ docker-compose up\n```\n会发现首先构建的是redis镜像，并首先启动redis容器。之后才是我们自己的容器，因为我们的容器依赖于redis容器。\n\n启动成功后便可以直接访问`http://localhost:18080`，会看到类似这样的页面\n```\nHello, you set a random num 35 to redis\n```\n\n上面使用的启动命令，会使compose在前台运行，如果想让它在后台运行可以使用`docker-compose up -d`\n\n### 环境变量\n#### docker-compose.yml变量替换\ncompose配置文件允许我们动态的传入环境变量。\n\n还是上面的配置文件，不过我们让宿主端口动态的绑定\n```yaml\nversion: '2'\n\nservices:\n  compose-demo:\n    build: .\n    container_name: compose-demo\n    ports:\n      - \"${WEB_PORTS}:8080\"\n    volumes:\n      - .:/compose-demo\n    depends_on:\n      - redis\n  redis:\n    image: redis\n```\n\ncompose使用$符号来引入环境变量，$var和${var}都是支持的。\n\n运行`docker-compose up`的时候，compose会先去我们当前的shell的环境变量中查找WEB_PORTS，找到了则为它赋值。如果没找到则compose会抛出错误。\n\ncompose也支持使用环境变量配置文件的方式引入变量，docker-compose.yml的目录下面创建一个.env的文件，compose运行的时候会去读取它。\n```\n# .env file\nWEB_PORTS=28080\n```\n不过，如果我们当前的shell环境中也含有同名的变量，则compose会以shell环境变量优先，即shell环境变量会覆盖.env配置文件中的同名变量。\n\n#### 容器环境变量\n我们在运行容器的时候经常会传入一些环境变量，例如`docker run -e NODE_ENV=development ...`。compose支持多种方式给容器传递环境变量。\n\n1.在compose配置文件中定义环境变量\n```yaml\nservices:\n  compose-demo:\n    environment:\n      - NODE_ENV=development\n```\n2.在compose配置文件中配置env_file选项\n```yaml\nservices:\n  compose-demo:\n    env_file:\n      - web-variables.env\n```\n这时，应该在docker-compose.yml下应该有一个web-variables.env文件\n```\n# web-variables.env\nNODE_ENV=development\n```\n3.运行docker-compose run 为单独的容器配置环境变量\n```bash\n$ docker-compose up -e NODE_ENV=development compose-demo node app.js\n```\n\n### compose配置文件\ncompose默认的配置文件是docker-compose.yml，当然我们也可以使用`docker-compose -f`指定配置文件。接下来我们来了解下配置文件中每一项的配置方法。\n\n注意：我们的配置都是基于版本2的，即version:2\n\n#### build\n该命令会在镜像构建的时候被应用到，它可以是个字符串，代表了镜像构建时的上下文的路径。也可以是个对象，包含了context，dockerfile和args三个选项。\n```yaml\nbuild: ./dir\n\nbuild:\n  context: ./dir\n  dockerfile: Dockerfile-alternate\n  args:\n    buildno: 1\n```\n其中context代表了dockerfile的路径或者git仓库的路径。dockerfile则是使用的dockerfile的文件名，该选项也可以独立出来，不做为build的子选项。\n\n#### cap_add, cap_drop\n添加或者删除容器能力。linux下有capabilities命令，自己尚未研究过，不做讨论。\n```bash\ncap_add:\n  - ALL\n\ncap_drop:\n  - NET_ADMIN\n  - SYS_ADMIN\n```\n\n#### command\n覆盖容器运行时的CMD指令\n\n#### cgroup_parent\n配置容器的父组\n\n#### container_name\n配置容器的名称。默认compose会自己生成一个名字给容器。\n\n#### devices\n将容器的设备映射到宿主机器\n\n#### depends_on\ncompose服务间的依赖关系，被依赖的服务会优先启动\n```yaml\nversion: '2'\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n无论使用`docker-compose up`还是`docker-compose up web`，redis和db都会优先启动。  \n\ndepends_on还有个好处就是，我们可以直接使用service的名字当作访问地址来访问容器，例如连接redis可以如下所示\n```javascript\nredis.createClient({host: 'redis', port: 6379})\n```\n\n#### dns\n设置dns\n\n#### dns_search\n设置dns搜索域名\n\n#### tmpfs\n挂在一个临时目录到容器中\n\n#### entrypoint\n覆盖默认的entrypoint\n\n#### env_file\n指定环境变量文件，前面环境变量例子已经提到\n\n#### environment\n配置容器环境变量，前面环境变量例子已经提到\n\n#### expose\n暴露端口。只有互联的容器才能使用，宿主机器无法访问暴露的端口。\n\n#### extends\n用于扩展服务。可以对指定的service进行扩展，因此该选项中必须包含一个新的compose配置文件\n```yaml\nextends:\n  file: common.yml\n  service: webapp\n```\n一般来说，但各个服务之间有很多共有的配置项时，会把它们抽取成独立的文件，这样各个服务间便可以相互引用\n```yaml\n# common.yml\napp:\n  build: .\n  environment:\n    CONFIG_FILE_PATH: /code/config\n    API_KEY: xxxyyy\n  cpu_shares: 5\n\n\n# docker-compose.yml\nwebapp:\n  extends:\n    file: common.yml\n    service: app\n  command: /code/run_web_app\n  ports:\n    - 8080:8080\n  links:\n    - queue\n    - db\n\nqueue_worker:\n  extends:\n    file: common.yml\n    service: app\n  command: /code/run_worker\n  links:\n    - queue\n```\n\n#### external_links\n用于连接其他compose配置文件的容器\n\n#### extra_hosts\n为容器添加host\n```yaml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"otherhost:50.31.209.229\"\n```\n相当于在容器的/etc/hosts中添加了\n```\n162.242.195.82  somehost\n50.31.209.229   otherhost\n```\n\n#### image\n指定了容器启动时的镜像。如果该镜像在本地不存在，则会执行pull拉取。\n\n如果和build一起使用，则会使用该配置项的值作为镜像的名字进行镜像的构建。\n\n#### labels\n设置label标签\n\n#### links\n和docker的links一致，用于连接到其他的容器，容器之间可以使用service的名称相互访问，和depends_on用法一样，也会决定service的启动顺序。\n\n#### logging\n为service配置日志\n```yaml\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n其中drive的值可以为json-file、syslog和none。当想使用`docker-compose logs`必须使用json-file的格式，日志才可以看到。\n\n#### net/network_mode \n配置网络的模式\n```yaml\nnet: \"bridge\"\nnet: \"host\"\nnet: \"none\"\nnet: \"container:[service name or container name/id]\"\n```\n#### networks\n要加入service的网络\n\n#### pid\n应用也是用于和其他容器交互的\n\n#### ports\n同docker配置ports一样，用于暴露容器端口，并和宿主端口进行映射。  \n需要注意的是，yaml的语法会将`xx:yy`这种格式的数字转化为60进制的格式，所以应该将数字用双引号括起来\n```yaml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n```\n\n#### security_opt\n覆盖默认的标签模式\n\n#### volumes/volumes_from\n同docker的volumes是一致的\n","source":"_drafts/docker-compose入门#docker#$2016-07-16$.md","raw":"很多时候，我们需要集中的管理多个docker容器，例如我们会希望自己不用一个个的去启动容器，毕竟这样会很耗费时间和精力。我们希望可以通过配置文件，将启动容器时需要的配置信息写好，然后通过一条命令就可以启动所有容器。\n\n目前github上已经有这样的开源工具，如crane。\n\n而docker官方也实现和开源了这样的一套工具，即编排系统，docker-compose。它的前身就是Fig。\n\n接下来我们就来学习使用这样的一个工具，我们将会以Node.js为例子来学习使用。\n\n### Getting Started\n首先你需要安装docker-compose。如何安装直接就看[官网](https://docs.docker.com/compose/install/)了，已经很清楚。\n\n#### 创建node.js项目\n1.创建一个项目目录\n\n```bash\n$ mkdir compose-demo\n$ cd compose-demo\n$ npm init\n$ npm i redis --save \n```\n2.创建一个简单的node.js服务器\n```javascript\n// app.js\nconst http = require('http')\nconst redis = require('redis')\n\nconst redisCli = redis.createClient(6379, 'redis')\n\nconst server = http.createServer((req, res) => {\n  const num = Math.floor(Math.random() * 100)\n  redisCli.set('num', num)\n\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain')\n\n  res.end(`Hello, you set a random num ${num} to redis \\n`)\n})\n\nserver.listen(8080)\n```\n\n3.创建Dockerfile\n```dockerfile\nFROM node:6.2\n\nCOPY ./package.json /tmp/package.json\nRUN cd /tmp && npm install\nRUN mkdir -p /compose-demo && cp -a /tmp/node_modules /compose-demo/\n\nWORKDIR /compose-demo\nADD . /compose-demo/\n\nEXPOSE 8080\n\nCMD [\"node\", \"app.js\"]\n```\n\n4.创建docker镜像\n```bash\n$ docker build -t compose-demo:latest .\n```\n\n5.创建compose配置文件docker-compose.yml\n```yaml\nversion: '2'\n\nservices:\n  compose-demo:\n    build: .\n    container_name: compose-demo\n    ports:\n      - \"18080:8080\"\n    volumes:\n      - .:/compose-demo\n    depends_on:\n      - redis\n  redis:\n    image: redis \n```\n整个过程其实最重要的就是这份配置文件了，分析一下这份文件。\n\n首行就是说明了这份文件使用compose版本2来解析，版本1也会在不远的将来被淘汰掉。\n\n接下来就是服务的配置了，compose将要编排的的容器称之为服务，多个服务组成了一个服务组，compose便是对这些服务进行管理。\n\n这里我们将会启动两个容器，第一个是我们的Node项目容器，它会将容器中的8080端口暴露在宿主机器的18080端口上面。\n\n我们还会将容器中的/compose-demo目录挂在到宿主机器的当前目录下面，这样我们修改源代码的时候就不用重新构建镜像了。\n\n最后我们使用ddpends_on关键字，说明这个容器依赖于另外一个容器redis，配置之后容器之间便可以进行交互，又不会暴露在外部宿主机器，有点像link命令。\n\n6.使用docker-compose构建镜像和容器\n```bash\n$ docker-compose up\n```\n会发现首先构建的是redis镜像，并首先启动redis容器。之后才是我们自己的容器，因为我们的容器依赖于redis容器。\n\n启动成功后便可以直接访问`http://localhost:18080`，会看到类似这样的页面\n```\nHello, you set a random num 35 to redis\n```\n\n上面使用的启动命令，会使compose在前台运行，如果想让它在后台运行可以使用`docker-compose up -d`\n\n### 环境变量\n#### docker-compose.yml变量替换\ncompose配置文件允许我们动态的传入环境变量。\n\n还是上面的配置文件，不过我们让宿主端口动态的绑定\n```yaml\nversion: '2'\n\nservices:\n  compose-demo:\n    build: .\n    container_name: compose-demo\n    ports:\n      - \"${WEB_PORTS}:8080\"\n    volumes:\n      - .:/compose-demo\n    depends_on:\n      - redis\n  redis:\n    image: redis\n```\n\ncompose使用$符号来引入环境变量，$var和${var}都是支持的。\n\n运行`docker-compose up`的时候，compose会先去我们当前的shell的环境变量中查找WEB_PORTS，找到了则为它赋值。如果没找到则compose会抛出错误。\n\ncompose也支持使用环境变量配置文件的方式引入变量，docker-compose.yml的目录下面创建一个.env的文件，compose运行的时候会去读取它。\n```\n# .env file\nWEB_PORTS=28080\n```\n不过，如果我们当前的shell环境中也含有同名的变量，则compose会以shell环境变量优先，即shell环境变量会覆盖.env配置文件中的同名变量。\n\n#### 容器环境变量\n我们在运行容器的时候经常会传入一些环境变量，例如`docker run -e NODE_ENV=development ...`。compose支持多种方式给容器传递环境变量。\n\n1.在compose配置文件中定义环境变量\n```yaml\nservices:\n  compose-demo:\n    environment:\n      - NODE_ENV=development\n```\n2.在compose配置文件中配置env_file选项\n```yaml\nservices:\n  compose-demo:\n    env_file:\n      - web-variables.env\n```\n这时，应该在docker-compose.yml下应该有一个web-variables.env文件\n```\n# web-variables.env\nNODE_ENV=development\n```\n3.运行docker-compose run 为单独的容器配置环境变量\n```bash\n$ docker-compose up -e NODE_ENV=development compose-demo node app.js\n```\n\n### compose配置文件\ncompose默认的配置文件是docker-compose.yml，当然我们也可以使用`docker-compose -f`指定配置文件。接下来我们来了解下配置文件中每一项的配置方法。\n\n注意：我们的配置都是基于版本2的，即version:2\n\n#### build\n该命令会在镜像构建的时候被应用到，它可以是个字符串，代表了镜像构建时的上下文的路径。也可以是个对象，包含了context，dockerfile和args三个选项。\n```yaml\nbuild: ./dir\n\nbuild:\n  context: ./dir\n  dockerfile: Dockerfile-alternate\n  args:\n    buildno: 1\n```\n其中context代表了dockerfile的路径或者git仓库的路径。dockerfile则是使用的dockerfile的文件名，该选项也可以独立出来，不做为build的子选项。\n\n#### cap_add, cap_drop\n添加或者删除容器能力。linux下有capabilities命令，自己尚未研究过，不做讨论。\n```bash\ncap_add:\n  - ALL\n\ncap_drop:\n  - NET_ADMIN\n  - SYS_ADMIN\n```\n\n#### command\n覆盖容器运行时的CMD指令\n\n#### cgroup_parent\n配置容器的父组\n\n#### container_name\n配置容器的名称。默认compose会自己生成一个名字给容器。\n\n#### devices\n将容器的设备映射到宿主机器\n\n#### depends_on\ncompose服务间的依赖关系，被依赖的服务会优先启动\n```yaml\nversion: '2'\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n无论使用`docker-compose up`还是`docker-compose up web`，redis和db都会优先启动。  \n\ndepends_on还有个好处就是，我们可以直接使用service的名字当作访问地址来访问容器，例如连接redis可以如下所示\n```javascript\nredis.createClient({host: 'redis', port: 6379})\n```\n\n#### dns\n设置dns\n\n#### dns_search\n设置dns搜索域名\n\n#### tmpfs\n挂在一个临时目录到容器中\n\n#### entrypoint\n覆盖默认的entrypoint\n\n#### env_file\n指定环境变量文件，前面环境变量例子已经提到\n\n#### environment\n配置容器环境变量，前面环境变量例子已经提到\n\n#### expose\n暴露端口。只有互联的容器才能使用，宿主机器无法访问暴露的端口。\n\n#### extends\n用于扩展服务。可以对指定的service进行扩展，因此该选项中必须包含一个新的compose配置文件\n```yaml\nextends:\n  file: common.yml\n  service: webapp\n```\n一般来说，但各个服务之间有很多共有的配置项时，会把它们抽取成独立的文件，这样各个服务间便可以相互引用\n```yaml\n# common.yml\napp:\n  build: .\n  environment:\n    CONFIG_FILE_PATH: /code/config\n    API_KEY: xxxyyy\n  cpu_shares: 5\n\n\n# docker-compose.yml\nwebapp:\n  extends:\n    file: common.yml\n    service: app\n  command: /code/run_web_app\n  ports:\n    - 8080:8080\n  links:\n    - queue\n    - db\n\nqueue_worker:\n  extends:\n    file: common.yml\n    service: app\n  command: /code/run_worker\n  links:\n    - queue\n```\n\n#### external_links\n用于连接其他compose配置文件的容器\n\n#### extra_hosts\n为容器添加host\n```yaml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"otherhost:50.31.209.229\"\n```\n相当于在容器的/etc/hosts中添加了\n```\n162.242.195.82  somehost\n50.31.209.229   otherhost\n```\n\n#### image\n指定了容器启动时的镜像。如果该镜像在本地不存在，则会执行pull拉取。\n\n如果和build一起使用，则会使用该配置项的值作为镜像的名字进行镜像的构建。\n\n#### labels\n设置label标签\n\n#### links\n和docker的links一致，用于连接到其他的容器，容器之间可以使用service的名称相互访问，和depends_on用法一样，也会决定service的启动顺序。\n\n#### logging\n为service配置日志\n```yaml\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n其中drive的值可以为json-file、syslog和none。当想使用`docker-compose logs`必须使用json-file的格式，日志才可以看到。\n\n#### net/network_mode \n配置网络的模式\n```yaml\nnet: \"bridge\"\nnet: \"host\"\nnet: \"none\"\nnet: \"container:[service name or container name/id]\"\n```\n#### networks\n要加入service的网络\n\n#### pid\n应用也是用于和其他容器交互的\n\n#### ports\n同docker配置ports一样，用于暴露容器端口，并和宿主端口进行映射。  \n需要注意的是，yaml的语法会将`xx:yy`这种格式的数字转化为60进制的格式，所以应该将数字用双引号括起来\n```yaml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n```\n\n#### security_opt\n覆盖默认的标签模式\n\n#### volumes/volumes_from\n同docker的volumes是一致的\n","slug":"docker-compose入门#docker#$2016-07-16$","published":0,"date":"2017-08-03T10:21:24.107Z","updated":"2017-08-03T10:21:24.107Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96cr0002nou95kfesglq","content":"<p>很多时候，我们需要集中的管理多个docker容器，例如我们会希望自己不用一个个的去启动容器，毕竟这样会很耗费时间和精力。我们希望可以通过配置文件，将启动容器时需要的配置信息写好，然后通过一条命令就可以启动所有容器。</p>\n<p>目前github上已经有这样的开源工具，如crane。</p>\n<p>而docker官方也实现和开源了这样的一套工具，即编排系统，docker-compose。它的前身就是Fig。</p>\n<p>接下来我们就来学习使用这样的一个工具，我们将会以Node.js为例子来学习使用。</p>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>首先你需要安装docker-compose。如何安装直接就看<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"external\">官网</a>了，已经很清楚。</p>\n<h4 id=\"创建node-js项目\"><a href=\"#创建node-js项目\" class=\"headerlink\" title=\"创建node.js项目\"></a>创建node.js项目</h4><p>1.创建一个项目目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir compose-demo</div><div class=\"line\">$ <span class=\"built_in\">cd</span> compose-demo</div><div class=\"line\">$ npm init</div><div class=\"line\">$ npm i redis --save</div></pre></td></tr></table></figure>\n<p>2.创建一个简单的node.js服务器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> redisCli = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">'redis'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>)</div><div class=\"line\">  redisCli.set(<span class=\"string\">'num'</span>, num)</div><div class=\"line\"></div><div class=\"line\">  res.statusCode = <span class=\"number\">200</span></div><div class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</div><div class=\"line\"></div><div class=\"line\">  res.end(<span class=\"string\">`Hello, you set a random num <span class=\"subst\">$&#123;num&#125;</span> to redis \\n`</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">server.listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>3.创建Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">6.2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /tmp/package.json</span></div><div class=\"line\"><span class=\"bash\">RUN <span class=\"built_in\">cd</span> /tmp &amp;&amp; npm install</span></div><div class=\"line\"><span class=\"bash\">RUN mkdir -p /compose-demo &amp;&amp; cp -a /tmp/node_modules /compose-demo/</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">WORKDIR /compose-demo</span></div><div class=\"line\"><span class=\"bash\">ADD . /compose-demo/</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">EXPOSE 8080</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"app.js\"</span>]</span></div></pre></td></tr></table></figure></p>\n<p>4.创建docker镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker build -t compose-demo:latest .</div></pre></td></tr></table></figure></p>\n<p>5.创建compose配置文件docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">compose-demo</span></div><div class=\"line\"><span class=\"attr\">    ports:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"18080:8080\"</span></div><div class=\"line\"><span class=\"attr\">    volumes:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">.:/compose-demo</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div></pre></td></tr></table></figure></p>\n<p>整个过程其实最重要的就是这份配置文件了，分析一下这份文件。</p>\n<p>首行就是说明了这份文件使用compose版本2来解析，版本1也会在不远的将来被淘汰掉。</p>\n<p>接下来就是服务的配置了，compose将要编排的的容器称之为服务，多个服务组成了一个服务组，compose便是对这些服务进行管理。</p>\n<p>这里我们将会启动两个容器，第一个是我们的Node项目容器，它会将容器中的8080端口暴露在宿主机器的18080端口上面。</p>\n<p>我们还会将容器中的/compose-demo目录挂在到宿主机器的当前目录下面，这样我们修改源代码的时候就不用重新构建镜像了。</p>\n<p>最后我们使用ddpends_on关键字，说明这个容器依赖于另外一个容器redis，配置之后容器之间便可以进行交互，又不会暴露在外部宿主机器，有点像link命令。</p>\n<p>6.使用docker-compose构建镜像和容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up</div></pre></td></tr></table></figure></p>\n<p>会发现首先构建的是redis镜像，并首先启动redis容器。之后才是我们自己的容器，因为我们的容器依赖于redis容器。</p>\n<p>启动成功后便可以直接访问<code>http://localhost:18080</code>，会看到类似这样的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello, you set a random num 35 to redis</div></pre></td></tr></table></figure></p>\n<p>上面使用的启动命令，会使compose在前台运行，如果想让它在后台运行可以使用<code>docker-compose up -d</code></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><h4 id=\"docker-compose-yml变量替换\"><a href=\"#docker-compose-yml变量替换\" class=\"headerlink\" title=\"docker-compose.yml变量替换\"></a>docker-compose.yml变量替换</h4><p>compose配置文件允许我们动态的传入环境变量。</p>\n<p>还是上面的配置文件，不过我们让宿主端口动态的绑定<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">compose-demo</span></div><div class=\"line\"><span class=\"attr\">    ports:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"$&#123;WEB_PORTS&#125;:8080\"</span></div><div class=\"line\"><span class=\"attr\">    volumes:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">.:/compose-demo</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div></pre></td></tr></table></figure></p>\n<p>compose使用$符号来引入环境变量，$var和${var}都是支持的。</p>\n<p>运行<code>docker-compose up</code>的时候，compose会先去我们当前的shell的环境变量中查找WEB_PORTS，找到了则为它赋值。如果没找到则compose会抛出错误。</p>\n<p>compose也支持使用环境变量配置文件的方式引入变量，docker-compose.yml的目录下面创建一个.env的文件，compose运行的时候会去读取它。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># .env file</div><div class=\"line\">WEB_PORTS=28080</div></pre></td></tr></table></figure></p>\n<p>不过，如果我们当前的shell环境中也含有同名的变量，则compose会以shell环境变量优先，即shell环境变量会覆盖.env配置文件中的同名变量。</p>\n<h4 id=\"容器环境变量\"><a href=\"#容器环境变量\" class=\"headerlink\" title=\"容器环境变量\"></a>容器环境变量</h4><p>我们在运行容器的时候经常会传入一些环境变量，例如<code>docker run -e NODE_ENV=development ...</code>。compose支持多种方式给容器传递环境变量。</p>\n<p>1.在compose配置文件中定义环境变量<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    environment:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NODE_ENV=development</span></div></pre></td></tr></table></figure></p>\n<p>2.在compose配置文件中配置env_file选项<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    env_file:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">web-variables.env</span></div></pre></td></tr></table></figure></p>\n<p>这时，应该在docker-compose.yml下应该有一个web-variables.env文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># web-variables.env</div><div class=\"line\">NODE_ENV=development</div></pre></td></tr></table></figure></p>\n<p>3.运行docker-compose run 为单独的容器配置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up -e NODE_ENV=development compose-demo node app.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"compose配置文件\"><a href=\"#compose配置文件\" class=\"headerlink\" title=\"compose配置文件\"></a>compose配置文件</h3><p>compose默认的配置文件是docker-compose.yml，当然我们也可以使用<code>docker-compose -f</code>指定配置文件。接下来我们来了解下配置文件中每一项的配置方法。</p>\n<p>注意：我们的配置都是基于版本2的，即version:2</p>\n<h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p>该命令会在镜像构建的时候被应用到，它可以是个字符串，代表了镜像构建时的上下文的路径。也可以是个对象，包含了context，dockerfile和args三个选项。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">build:</span> <span class=\"string\">./dir</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">build:</span></div><div class=\"line\"><span class=\"attr\">  context:</span> <span class=\"string\">./dir</span></div><div class=\"line\"><span class=\"attr\">  dockerfile:</span> <span class=\"string\">Dockerfile-alternate</span></div><div class=\"line\"><span class=\"attr\">  args:</span></div><div class=\"line\"><span class=\"attr\">    buildno:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>其中context代表了dockerfile的路径或者git仓库的路径。dockerfile则是使用的dockerfile的文件名，该选项也可以独立出来，不做为build的子选项。</p>\n<h4 id=\"cap-add-cap-drop\"><a href=\"#cap-add-cap-drop\" class=\"headerlink\" title=\"cap_add, cap_drop\"></a>cap_add, cap_drop</h4><p>添加或者删除容器能力。linux下有capabilities命令，自己尚未研究过，不做讨论。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cap_add:</div><div class=\"line\">  - ALL</div><div class=\"line\"></div><div class=\"line\">cap_drop:</div><div class=\"line\">  - NET_ADMIN</div><div class=\"line\">  - SYS_ADMIN</div></pre></td></tr></table></figure></p>\n<h4 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h4><p>覆盖容器运行时的CMD指令</p>\n<h4 id=\"cgroup-parent\"><a href=\"#cgroup-parent\" class=\"headerlink\" title=\"cgroup_parent\"></a>cgroup_parent</h4><p>配置容器的父组</p>\n<h4 id=\"container-name\"><a href=\"#container-name\" class=\"headerlink\" title=\"container_name\"></a>container_name</h4><p>配置容器的名称。默认compose会自己生成一个名字给容器。</p>\n<h4 id=\"devices\"><a href=\"#devices\" class=\"headerlink\" title=\"devices\"></a>devices</h4><p>将容器的设备映射到宿主机器</p>\n<h4 id=\"depends-on\"><a href=\"#depends-on\" class=\"headerlink\" title=\"depends_on\"></a>depends_on</h4><p>compose服务间的依赖关系，被依赖的服务会优先启动<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  web:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">db</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  db:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">postgres</span></div></pre></td></tr></table></figure></p>\n<p>无论使用<code>docker-compose up</code>还是<code>docker-compose up web</code>，redis和db都会优先启动。  </p>\n<p>depends_on还有个好处就是，我们可以直接使用service的名字当作访问地址来访问容器，例如连接redis可以如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.createClient(&#123;<span class=\"attr\">host</span>: <span class=\"string\">'redis'</span>, <span class=\"attr\">port</span>: <span class=\"number\">6379</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"dns\"><a href=\"#dns\" class=\"headerlink\" title=\"dns\"></a>dns</h4><p>设置dns</p>\n<h4 id=\"dns-search\"><a href=\"#dns-search\" class=\"headerlink\" title=\"dns_search\"></a>dns_search</h4><p>设置dns搜索域名</p>\n<h4 id=\"tmpfs\"><a href=\"#tmpfs\" class=\"headerlink\" title=\"tmpfs\"></a>tmpfs</h4><p>挂在一个临时目录到容器中</p>\n<h4 id=\"entrypoint\"><a href=\"#entrypoint\" class=\"headerlink\" title=\"entrypoint\"></a>entrypoint</h4><p>覆盖默认的entrypoint</p>\n<h4 id=\"env-file\"><a href=\"#env-file\" class=\"headerlink\" title=\"env_file\"></a>env_file</h4><p>指定环境变量文件，前面环境变量例子已经提到</p>\n<h4 id=\"environment\"><a href=\"#environment\" class=\"headerlink\" title=\"environment\"></a>environment</h4><p>配置容器环境变量，前面环境变量例子已经提到</p>\n<h4 id=\"expose\"><a href=\"#expose\" class=\"headerlink\" title=\"expose\"></a>expose</h4><p>暴露端口。只有互联的容器才能使用，宿主机器无法访问暴露的端口。</p>\n<h4 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h4><p>用于扩展服务。可以对指定的service进行扩展，因此该选项中必须包含一个新的compose配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">extends:</span></div><div class=\"line\"><span class=\"attr\">  file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">  service:</span> <span class=\"string\">webapp</span></div></pre></td></tr></table></figure></p>\n<p>一般来说，但各个服务之间有很多共有的配置项时，会把它们抽取成独立的文件，这样各个服务间便可以相互引用<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># common.yml</span></div><div class=\"line\"><span class=\"attr\">app:</span></div><div class=\"line\"><span class=\"attr\">  build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">  environment:</span></div><div class=\"line\"><span class=\"attr\">    CONFIG_FILE_PATH:</span> <span class=\"string\">/code/config</span></div><div class=\"line\"><span class=\"attr\">    API_KEY:</span> <span class=\"string\">xxxyyy</span></div><div class=\"line\"><span class=\"attr\">  cpu_shares:</span> <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># docker-compose.yml</span></div><div class=\"line\"><span class=\"attr\">webapp:</span></div><div class=\"line\"><span class=\"attr\">  extends:</span></div><div class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">    service:</span> <span class=\"string\">app</span></div><div class=\"line\"><span class=\"attr\">  command:</span> <span class=\"string\">/code/run_web_app</span></div><div class=\"line\"><span class=\"attr\">  ports:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></div><div class=\"line\"><span class=\"attr\">  links:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">queue</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">db</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">queue_worker:</span></div><div class=\"line\"><span class=\"attr\">  extends:</span></div><div class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">    service:</span> <span class=\"string\">app</span></div><div class=\"line\"><span class=\"attr\">  command:</span> <span class=\"string\">/code/run_worker</span></div><div class=\"line\"><span class=\"attr\">  links:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">queue</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"external-links\"><a href=\"#external-links\" class=\"headerlink\" title=\"external_links\"></a>external_links</h4><p>用于连接其他compose配置文件的容器</p>\n<h4 id=\"extra-hosts\"><a href=\"#extra-hosts\" class=\"headerlink\" title=\"extra_hosts\"></a>extra_hosts</h4><p>为容器添加host<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">extra_hosts:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"somehost:162.242.195.82\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"otherhost:50.31.209.229\"</span></div></pre></td></tr></table></figure></p>\n<p>相当于在容器的/etc/hosts中添加了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">162.242.195.82  somehost</div><div class=\"line\">50.31.209.229   otherhost</div></pre></td></tr></table></figure></p>\n<h4 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h4><p>指定了容器启动时的镜像。如果该镜像在本地不存在，则会执行pull拉取。</p>\n<p>如果和build一起使用，则会使用该配置项的值作为镜像的名字进行镜像的构建。</p>\n<h4 id=\"labels\"><a href=\"#labels\" class=\"headerlink\" title=\"labels\"></a>labels</h4><p>设置label标签</p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><p>和docker的links一致，用于连接到其他的容器，容器之间可以使用service的名称相互访问，和depends_on用法一样，也会决定service的启动顺序。</p>\n<h4 id=\"logging\"><a href=\"#logging\" class=\"headerlink\" title=\"logging\"></a>logging</h4><p>为service配置日志<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  driver:</span> <span class=\"string\">syslog</span></div><div class=\"line\"><span class=\"attr\">  options:</span></div><div class=\"line\"><span class=\"attr\">    syslog-address:</span> <span class=\"string\">\"tcp://192.168.0.42:123\"</span></div></pre></td></tr></table></figure></p>\n<p>其中drive的值可以为json-file、syslog和none。当想使用<code>docker-compose logs</code>必须使用json-file的格式，日志才可以看到。</p>\n<h4 id=\"net-network-mode\"><a href=\"#net-network-mode\" class=\"headerlink\" title=\"net/network_mode\"></a>net/network_mode</h4><p>配置网络的模式<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"bridge\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"host\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"none\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"container:[service name or container name/id]\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"networks\"><a href=\"#networks\" class=\"headerlink\" title=\"networks\"></a>networks</h4><p>要加入service的网络</p>\n<h4 id=\"pid\"><a href=\"#pid\" class=\"headerlink\" title=\"pid\"></a>pid</h4><p>应用也是用于和其他容器交互的</p>\n<h4 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h4><p>同docker配置ports一样，用于暴露容器端口，并和宿主端口进行映射。<br>需要注意的是，yaml的语法会将<code>xx:yy</code>这种格式的数字转化为60进制的格式，所以应该将数字用双引号括起来<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">ports:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"3000\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"3000-3005\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"8000:8000\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"9090-9091:8080-8081\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"49100:22\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"127.0.0.1:8001:8001\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"127.0.0.1:5000-5010:5000-5010\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"security-opt\"><a href=\"#security-opt\" class=\"headerlink\" title=\"security_opt\"></a>security_opt</h4><p>覆盖默认的标签模式</p>\n<h4 id=\"volumes-volumes-from\"><a href=\"#volumes-volumes-from\" class=\"headerlink\" title=\"volumes/volumes_from\"></a>volumes/volumes_from</h4><p>同docker的volumes是一致的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很多时候，我们需要集中的管理多个docker容器，例如我们会希望自己不用一个个的去启动容器，毕竟这样会很耗费时间和精力。我们希望可以通过配置文件，将启动容器时需要的配置信息写好，然后通过一条命令就可以启动所有容器。</p>\n<p>目前github上已经有这样的开源工具，如crane。</p>\n<p>而docker官方也实现和开源了这样的一套工具，即编排系统，docker-compose。它的前身就是Fig。</p>\n<p>接下来我们就来学习使用这样的一个工具，我们将会以Node.js为例子来学习使用。</p>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>首先你需要安装docker-compose。如何安装直接就看<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"external\">官网</a>了，已经很清楚。</p>\n<h4 id=\"创建node-js项目\"><a href=\"#创建node-js项目\" class=\"headerlink\" title=\"创建node.js项目\"></a>创建node.js项目</h4><p>1.创建一个项目目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir compose-demo</div><div class=\"line\">$ <span class=\"built_in\">cd</span> compose-demo</div><div class=\"line\">$ npm init</div><div class=\"line\">$ npm i redis --save</div></pre></td></tr></table></figure>\n<p>2.创建一个简单的node.js服务器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> redisCli = redis.createClient(<span class=\"number\">6379</span>, <span class=\"string\">'redis'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>)</div><div class=\"line\">  redisCli.set(<span class=\"string\">'num'</span>, num)</div><div class=\"line\"></div><div class=\"line\">  res.statusCode = <span class=\"number\">200</span></div><div class=\"line\">  res.setHeader(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)</div><div class=\"line\"></div><div class=\"line\">  res.end(<span class=\"string\">`Hello, you set a random num <span class=\"subst\">$&#123;num&#125;</span> to redis \\n`</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">server.listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>3.创建Dockerfile<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">6.2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /tmp/package.json</span></div><div class=\"line\"><span class=\"bash\">RUN <span class=\"built_in\">cd</span> /tmp &amp;&amp; npm install</span></div><div class=\"line\"><span class=\"bash\">RUN mkdir -p /compose-demo &amp;&amp; cp -a /tmp/node_modules /compose-demo/</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">WORKDIR /compose-demo</span></div><div class=\"line\"><span class=\"bash\">ADD . /compose-demo/</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">EXPOSE 8080</span></div><div class=\"line\"><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">CMD [<span class=\"string\">\"node\"</span>, <span class=\"string\">\"app.js\"</span>]</span></div></pre></td></tr></table></figure></p>\n<p>4.创建docker镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker build -t compose-demo:latest .</div></pre></td></tr></table></figure></p>\n<p>5.创建compose配置文件docker-compose.yml<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">compose-demo</span></div><div class=\"line\"><span class=\"attr\">    ports:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"18080:8080\"</span></div><div class=\"line\"><span class=\"attr\">    volumes:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">.:/compose-demo</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div></pre></td></tr></table></figure></p>\n<p>整个过程其实最重要的就是这份配置文件了，分析一下这份文件。</p>\n<p>首行就是说明了这份文件使用compose版本2来解析，版本1也会在不远的将来被淘汰掉。</p>\n<p>接下来就是服务的配置了，compose将要编排的的容器称之为服务，多个服务组成了一个服务组，compose便是对这些服务进行管理。</p>\n<p>这里我们将会启动两个容器，第一个是我们的Node项目容器，它会将容器中的8080端口暴露在宿主机器的18080端口上面。</p>\n<p>我们还会将容器中的/compose-demo目录挂在到宿主机器的当前目录下面，这样我们修改源代码的时候就不用重新构建镜像了。</p>\n<p>最后我们使用ddpends_on关键字，说明这个容器依赖于另外一个容器redis，配置之后容器之间便可以进行交互，又不会暴露在外部宿主机器，有点像link命令。</p>\n<p>6.使用docker-compose构建镜像和容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up</div></pre></td></tr></table></figure></p>\n<p>会发现首先构建的是redis镜像，并首先启动redis容器。之后才是我们自己的容器，因为我们的容器依赖于redis容器。</p>\n<p>启动成功后便可以直接访问<code>http://localhost:18080</code>，会看到类似这样的页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hello, you set a random num 35 to redis</div></pre></td></tr></table></figure></p>\n<p>上面使用的启动命令，会使compose在前台运行，如果想让它在后台运行可以使用<code>docker-compose up -d</code></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><h4 id=\"docker-compose-yml变量替换\"><a href=\"#docker-compose-yml变量替换\" class=\"headerlink\" title=\"docker-compose.yml变量替换\"></a>docker-compose.yml变量替换</h4><p>compose配置文件允许我们动态的传入环境变量。</p>\n<p>还是上面的配置文件，不过我们让宿主端口动态的绑定<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">compose-demo</span></div><div class=\"line\"><span class=\"attr\">    ports:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"$&#123;WEB_PORTS&#125;:8080\"</span></div><div class=\"line\"><span class=\"attr\">    volumes:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">.:/compose-demo</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div></pre></td></tr></table></figure></p>\n<p>compose使用$符号来引入环境变量，$var和${var}都是支持的。</p>\n<p>运行<code>docker-compose up</code>的时候，compose会先去我们当前的shell的环境变量中查找WEB_PORTS，找到了则为它赋值。如果没找到则compose会抛出错误。</p>\n<p>compose也支持使用环境变量配置文件的方式引入变量，docker-compose.yml的目录下面创建一个.env的文件，compose运行的时候会去读取它。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># .env file</div><div class=\"line\">WEB_PORTS=28080</div></pre></td></tr></table></figure></p>\n<p>不过，如果我们当前的shell环境中也含有同名的变量，则compose会以shell环境变量优先，即shell环境变量会覆盖.env配置文件中的同名变量。</p>\n<h4 id=\"容器环境变量\"><a href=\"#容器环境变量\" class=\"headerlink\" title=\"容器环境变量\"></a>容器环境变量</h4><p>我们在运行容器的时候经常会传入一些环境变量，例如<code>docker run -e NODE_ENV=development ...</code>。compose支持多种方式给容器传递环境变量。</p>\n<p>1.在compose配置文件中定义环境变量<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    environment:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">NODE_ENV=development</span></div></pre></td></tr></table></figure></p>\n<p>2.在compose配置文件中配置env_file选项<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  compose-demo:</span></div><div class=\"line\"><span class=\"attr\">    env_file:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">web-variables.env</span></div></pre></td></tr></table></figure></p>\n<p>这时，应该在docker-compose.yml下应该有一个web-variables.env文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># web-variables.env</div><div class=\"line\">NODE_ENV=development</div></pre></td></tr></table></figure></p>\n<p>3.运行docker-compose run 为单独的容器配置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ docker-compose up -e NODE_ENV=development compose-demo node app.js</div></pre></td></tr></table></figure></p>\n<h3 id=\"compose配置文件\"><a href=\"#compose配置文件\" class=\"headerlink\" title=\"compose配置文件\"></a>compose配置文件</h3><p>compose默认的配置文件是docker-compose.yml，当然我们也可以使用<code>docker-compose -f</code>指定配置文件。接下来我们来了解下配置文件中每一项的配置方法。</p>\n<p>注意：我们的配置都是基于版本2的，即version:2</p>\n<h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p>该命令会在镜像构建的时候被应用到，它可以是个字符串，代表了镜像构建时的上下文的路径。也可以是个对象，包含了context，dockerfile和args三个选项。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">build:</span> <span class=\"string\">./dir</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">build:</span></div><div class=\"line\"><span class=\"attr\">  context:</span> <span class=\"string\">./dir</span></div><div class=\"line\"><span class=\"attr\">  dockerfile:</span> <span class=\"string\">Dockerfile-alternate</span></div><div class=\"line\"><span class=\"attr\">  args:</span></div><div class=\"line\"><span class=\"attr\">    buildno:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>其中context代表了dockerfile的路径或者git仓库的路径。dockerfile则是使用的dockerfile的文件名，该选项也可以独立出来，不做为build的子选项。</p>\n<h4 id=\"cap-add-cap-drop\"><a href=\"#cap-add-cap-drop\" class=\"headerlink\" title=\"cap_add, cap_drop\"></a>cap_add, cap_drop</h4><p>添加或者删除容器能力。linux下有capabilities命令，自己尚未研究过，不做讨论。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cap_add:</div><div class=\"line\">  - ALL</div><div class=\"line\"></div><div class=\"line\">cap_drop:</div><div class=\"line\">  - NET_ADMIN</div><div class=\"line\">  - SYS_ADMIN</div></pre></td></tr></table></figure></p>\n<h4 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h4><p>覆盖容器运行时的CMD指令</p>\n<h4 id=\"cgroup-parent\"><a href=\"#cgroup-parent\" class=\"headerlink\" title=\"cgroup_parent\"></a>cgroup_parent</h4><p>配置容器的父组</p>\n<h4 id=\"container-name\"><a href=\"#container-name\" class=\"headerlink\" title=\"container_name\"></a>container_name</h4><p>配置容器的名称。默认compose会自己生成一个名字给容器。</p>\n<h4 id=\"devices\"><a href=\"#devices\" class=\"headerlink\" title=\"devices\"></a>devices</h4><p>将容器的设备映射到宿主机器</p>\n<h4 id=\"depends-on\"><a href=\"#depends-on\" class=\"headerlink\" title=\"depends_on\"></a>depends_on</h4><p>compose服务间的依赖关系，被依赖的服务会优先启动<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></div><div class=\"line\"><span class=\"attr\">services:</span></div><div class=\"line\"><span class=\"attr\">  web:</span></div><div class=\"line\"><span class=\"attr\">    build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">    depends_on:</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">db</span></div><div class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">redis</span></div><div class=\"line\"><span class=\"attr\">  db:</span></div><div class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">postgres</span></div></pre></td></tr></table></figure></p>\n<p>无论使用<code>docker-compose up</code>还是<code>docker-compose up web</code>，redis和db都会优先启动。  </p>\n<p>depends_on还有个好处就是，我们可以直接使用service的名字当作访问地址来访问容器，例如连接redis可以如下所示<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis.createClient(&#123;<span class=\"attr\">host</span>: <span class=\"string\">'redis'</span>, <span class=\"attr\">port</span>: <span class=\"number\">6379</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"dns\"><a href=\"#dns\" class=\"headerlink\" title=\"dns\"></a>dns</h4><p>设置dns</p>\n<h4 id=\"dns-search\"><a href=\"#dns-search\" class=\"headerlink\" title=\"dns_search\"></a>dns_search</h4><p>设置dns搜索域名</p>\n<h4 id=\"tmpfs\"><a href=\"#tmpfs\" class=\"headerlink\" title=\"tmpfs\"></a>tmpfs</h4><p>挂在一个临时目录到容器中</p>\n<h4 id=\"entrypoint\"><a href=\"#entrypoint\" class=\"headerlink\" title=\"entrypoint\"></a>entrypoint</h4><p>覆盖默认的entrypoint</p>\n<h4 id=\"env-file\"><a href=\"#env-file\" class=\"headerlink\" title=\"env_file\"></a>env_file</h4><p>指定环境变量文件，前面环境变量例子已经提到</p>\n<h4 id=\"environment\"><a href=\"#environment\" class=\"headerlink\" title=\"environment\"></a>environment</h4><p>配置容器环境变量，前面环境变量例子已经提到</p>\n<h4 id=\"expose\"><a href=\"#expose\" class=\"headerlink\" title=\"expose\"></a>expose</h4><p>暴露端口。只有互联的容器才能使用，宿主机器无法访问暴露的端口。</p>\n<h4 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h4><p>用于扩展服务。可以对指定的service进行扩展，因此该选项中必须包含一个新的compose配置文件<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">extends:</span></div><div class=\"line\"><span class=\"attr\">  file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">  service:</span> <span class=\"string\">webapp</span></div></pre></td></tr></table></figure></p>\n<p>一般来说，但各个服务之间有很多共有的配置项时，会把它们抽取成独立的文件，这样各个服务间便可以相互引用<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># common.yml</span></div><div class=\"line\"><span class=\"attr\">app:</span></div><div class=\"line\"><span class=\"attr\">  build:</span> <span class=\"string\">.</span></div><div class=\"line\"><span class=\"attr\">  environment:</span></div><div class=\"line\"><span class=\"attr\">    CONFIG_FILE_PATH:</span> <span class=\"string\">/code/config</span></div><div class=\"line\"><span class=\"attr\">    API_KEY:</span> <span class=\"string\">xxxyyy</span></div><div class=\"line\"><span class=\"attr\">  cpu_shares:</span> <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># docker-compose.yml</span></div><div class=\"line\"><span class=\"attr\">webapp:</span></div><div class=\"line\"><span class=\"attr\">  extends:</span></div><div class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">    service:</span> <span class=\"string\">app</span></div><div class=\"line\"><span class=\"attr\">  command:</span> <span class=\"string\">/code/run_web_app</span></div><div class=\"line\"><span class=\"attr\">  ports:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></div><div class=\"line\"><span class=\"attr\">  links:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">queue</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">db</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">queue_worker:</span></div><div class=\"line\"><span class=\"attr\">  extends:</span></div><div class=\"line\"><span class=\"attr\">    file:</span> <span class=\"string\">common.yml</span></div><div class=\"line\"><span class=\"attr\">    service:</span> <span class=\"string\">app</span></div><div class=\"line\"><span class=\"attr\">  command:</span> <span class=\"string\">/code/run_worker</span></div><div class=\"line\"><span class=\"attr\">  links:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">queue</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"external-links\"><a href=\"#external-links\" class=\"headerlink\" title=\"external_links\"></a>external_links</h4><p>用于连接其他compose配置文件的容器</p>\n<h4 id=\"extra-hosts\"><a href=\"#extra-hosts\" class=\"headerlink\" title=\"extra_hosts\"></a>extra_hosts</h4><p>为容器添加host<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">extra_hosts:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"somehost:162.242.195.82\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"otherhost:50.31.209.229\"</span></div></pre></td></tr></table></figure></p>\n<p>相当于在容器的/etc/hosts中添加了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">162.242.195.82  somehost</div><div class=\"line\">50.31.209.229   otherhost</div></pre></td></tr></table></figure></p>\n<h4 id=\"image\"><a href=\"#image\" class=\"headerlink\" title=\"image\"></a>image</h4><p>指定了容器启动时的镜像。如果该镜像在本地不存在，则会执行pull拉取。</p>\n<p>如果和build一起使用，则会使用该配置项的值作为镜像的名字进行镜像的构建。</p>\n<h4 id=\"labels\"><a href=\"#labels\" class=\"headerlink\" title=\"labels\"></a>labels</h4><p>设置label标签</p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><p>和docker的links一致，用于连接到其他的容器，容器之间可以使用service的名称相互访问，和depends_on用法一样，也会决定service的启动顺序。</p>\n<h4 id=\"logging\"><a href=\"#logging\" class=\"headerlink\" title=\"logging\"></a>logging</h4><p>为service配置日志<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  driver:</span> <span class=\"string\">syslog</span></div><div class=\"line\"><span class=\"attr\">  options:</span></div><div class=\"line\"><span class=\"attr\">    syslog-address:</span> <span class=\"string\">\"tcp://192.168.0.42:123\"</span></div></pre></td></tr></table></figure></p>\n<p>其中drive的值可以为json-file、syslog和none。当想使用<code>docker-compose logs</code>必须使用json-file的格式，日志才可以看到。</p>\n<h4 id=\"net-network-mode\"><a href=\"#net-network-mode\" class=\"headerlink\" title=\"net/network_mode\"></a>net/network_mode</h4><p>配置网络的模式<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"bridge\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"host\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"none\"</span></div><div class=\"line\"><span class=\"attr\">net:</span> <span class=\"string\">\"container:[service name or container name/id]\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"networks\"><a href=\"#networks\" class=\"headerlink\" title=\"networks\"></a>networks</h4><p>要加入service的网络</p>\n<h4 id=\"pid\"><a href=\"#pid\" class=\"headerlink\" title=\"pid\"></a>pid</h4><p>应用也是用于和其他容器交互的</p>\n<h4 id=\"ports\"><a href=\"#ports\" class=\"headerlink\" title=\"ports\"></a>ports</h4><p>同docker配置ports一样，用于暴露容器端口，并和宿主端口进行映射。<br>需要注意的是，yaml的语法会将<code>xx:yy</code>这种格式的数字转化为60进制的格式，所以应该将数字用双引号括起来<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">ports:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"3000\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"3000-3005\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"8000:8000\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"9090-9091:8080-8081\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"49100:22\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"127.0.0.1:8001:8001\"</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">\"127.0.0.1:5000-5010:5000-5010\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"security-opt\"><a href=\"#security-opt\" class=\"headerlink\" title=\"security_opt\"></a>security_opt</h4><p>覆盖默认的标签模式</p>\n<h4 id=\"volumes-volumes-from\"><a href=\"#volumes-volumes-from\" class=\"headerlink\" title=\"volumes/volumes_from\"></a>volumes/volumes_from</h4><p>同docker的volumes是一致的</p>\n"},{"_content":"> mongodb入门之增删改\n\n```bash\n./mongod\n\nuse test\n```\n\n### 新增\n`db.foo.insert({bar: \"baz\"})`\n\n批量插入\n`db.foo.batchInsert([{f1: \"b1\"}, {f2: \"b2\"}, {f3: \"b3\"}])`\n\n### 删除\n删除文档所有数据  \n`db.foo.remove()`\n\n删除文档中指定的数据  \n`db.foo.remove({bar: \"baz\"})` \n\n更快的清楚文档的数据  \n`db.foo.drop()`\n\n### 更新文档\nupdate(condition, modifier)\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"friends\": 32,\n  \"enemies\": 2\n}\n\nvar joe = db.users.find({\"name\", \"joe\"})\njoe.releationships = {\"friends\": joe.friends, \"enemies\": joe.enemies}\n\njoe.username = joe.name\ndelete joe.name\ndelete joe.friends\ndelete joe.enemies\n\ndb.users.update({name: 'joe'}, joe)\n```\n\n#### mongo内置了一些修改器\n1.$set\n用于指定一个字段值，如果不存在则创建它，存在则更新它。\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"age\": 20,\n  \"sex\": \"male\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$set\": {\"favoriteBook\": \"war and piece\"}\n})\n\ndb.users.findOne()\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"age\": 20,\n  \"sex\": \"male\",\n  \"favoriteBook\": \"war and piece\"\n}\n```\nunset可以将键删除掉\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$unset\": {\"favoriteBook\": 1}\n})\n\n2.$inc\n$inc用于增加数值\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$inc\": {\"score\": 50}\n})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"score\": 50\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$inc\": {\"score\": 100}\n})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"score\": 150\n}\n```\n\n3.$push\n用于向已有的数组末尾添加一条记录，要是没有则新增一个数组。\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"content\": \"test\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      name: \"tim\",\n      content: \"hello\"\n    }\n  }\n})\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      name: \"jim\",\n      content: \"world\"\n    }\n  }\n})\n\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"comments\": [{\n    name: \"tim\",\n    content: \"hello\" \n  }, {\n    {\n      name: \"jim\",\n      content: \"world\"\n    } \n  }]\n}\n```\n配合$each一次添加多条记录\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\"\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n        }\n      }]\n    }\n  }\n})\n```\n配合$slice可以控制数组的长度，只保留最后加入的n条记录。\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\"\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n        }\n      }],\n      // $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录\n      \"$slice\": -10\n    }\n  }\n})\n```\n使用$order还可以将数组排序后再添加到库中，但是它必须和$each一同使用。\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\",\n          rate: 6.1\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n          rate: 3.2\n        }\n      }],\n      // $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录\n      \"$slice\": -10,\n      \"$order\": {rate: -1}\n    }\n  }\n})\n```\n4.添加不重复元素  \n有时为了保证数组内的元素不重复，可以在添加的时候再做一个判断，而$ne可以做到。而使用$addToSet会更加直观好用一点。\n```javascript\ndb.users.update({\"favoriteSports\": {\"$ne\": \"backetball\"}}, {\n  \"$push\": {\n    \"favoriteSports\": \"backetball\"\n  }\n})\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$addToSet\": {\n    \"favoriteSports\": \"backetball\"\n  }\n})\n\n// $addToSet还可以和$each联合使用，为数组添加多个值，并且数组中不会有重复值。\n// 而ne不能这么做\ndb.user.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"}, {\n  \"$addToSet\": {\n    \"favoriteSports\": {\n      \"$each\": [\"backetball\", \"football\"]\n    }\n  }\n})\n```\n5.删除元素  \n第一种方式是使用$pop删除头部或者尾部的元素\n```javascirpt\ndb.lists.find({})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"todo\": [\"dishes\", \"laundry\", \"dry cleaning\", \"wash window\"]\n}\n\ndb.lists.update({}, {\n  \"todo\": {\n    \"$pop\": {\"key\": 1}\n  }\n})\ndb.lists.update({}, {\n  \"todo\": {\n    \"$pop\": {\"key\": -1}\n  }\n})\n```\n删除特定元素\n```javascirpt\ndb.lists.update({}, {\n  \"$pull\": {\n    \"todo\": \"laundry\"\n  }\n})\n```\n6.upsert  \n会先查询集合有没符合的文档，没有则会创建\n```javascript\ndb.users.update({name: \"tim\"}, {\n  score: 50\n}, true)\n```\nupdate的第三个参数即为是否为upsert操作，如果集合中没有找到name为tim的记录，则会使用创建一个`{name: \"tim\", score: 50}`的记录。\n\n另外使用$setOrInsert还可以做到只在第一次时创建值，之后的更新操作该值都不变。\n```javascript\ndb.users.update({}, {\n  \"$setOrInsert\": {\"createdAt\": new Date()}\n}, true)\n```\n如果再次运行这个脚本，都不会改变createdAt的值\n\n### save\n如果文档不存在，使用它会自动创建文档。如果文档存在则更新它。  \n它接受一个参数，文档，如果该文档存在\"_id\"键，则调用upsert，否则调用insert。\n```javascript\nvar x = db.users.findOne()\nx.age = 22\ndb.user.save(x)\n```\n\n### 更新多个文档\n默认情况下，当有多个文档匹配时，update时只会更新第一个匹配的文档，若要更新多个，则需要将第四个参数置为true\n```javascript\ndb.user.update({birthday: \"07/31/2016\"}, {\"$set\": {age: 22}}, false, true)\n```\n\n### find基本用法\nfind(condi)根据特定条件查询\n```javascript\ndb.users.find({name: 'jim'})\n\n{\n  _id: ObjectId(\"...\"),\n  name: \"jim\",\n  age: 22,\n  sex: male\n}\n```\n也可以只返回指定的键\n```javascript\ndb.users.find({name: 'jim'}, {name: 1, age: 1})\n\n{\n  _id: ObjectId(\"...\"),\n  name: \"jim\",\n  age: 22\n}\n```\n默认情况下，_id一定会被返回。我们可以指定某个键不被返回，利用这个特性可以不返回\\_id\n```javascript\ndb.users.find({name: 'jim'}, {sex: 0, _id: 0})\n\n{\n  name: \"jim\",\n  age: 22\n}\n```\n\n### 查询条件\n$lt、$lte、$gt、$gte分别代表了<、<=、>、>=。\n```javascript\ndb.users.find({age: {\"$gt\": 20, \"$lt\": 30}})\n```\n还有一个$ne，代表不等于\n```javascript\ndb.users.find({name: {\"$ne\": \"tim\"}})\n```\n\n#### or查询\n$in用于查询单个键的多个值，与之相反的是$nin\n```javascript\ndb.users.find({name: {\"$in\": [\"tim\", \"tom\"]}})\ndb.users.find({name: {\"$nin\": [\"tim\", \"tom\"]}})\n```\n$or用于查询多个键\n```javascript\ndb.users.find({\"$or\": [{name: \"tim\"}, {age: {\"$in\": [20, 22]}}]})\n```\n\n#### not语句\n```javascript\n// $mod取模，第一个参数是除以给定值，第二个参数是余数\ndb.users.find({\"id_num\": {\"$mod\": [5, 1]}})\ndb.users.find({\"id_num\": {\"$not\": {\"$mod\": [5, 1]}}})\n```\n\n### 特定类型的查询\n#### null\n查询为null的记录\n\n```javascript\ndb.users.find({male: null})\n```\n但是如果该指定的键在文档中不存在，文档会被查询出来。因此需要指定exists字段\n```javascript\ndb.users.find({male: {\"$in\": [null], \"$exists\": true}})\n```\n#### 支持正则表达式\n```javascript\ndb.users.find({name: /joe/i})\n```\n\n### 数组查询\n当有这样一个文档\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\n\ndb.food.find({fruits: 'banana'})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n这会查询到拥有banana的记录，想要绝对匹配，则需要指定为数组\n\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana', 'cherry']})\n\ndb.food.find({fruits: ['apple', 'banana', 'orange']})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n可以指定从数组的某个下标开始查询\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana', 'cherry']})\n\ndb.food.find({\"fruits.2\": \"banana\"})\n```\n\n#### $all\n通过多个元素匹配数组\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'kumquat', 'orange']})\ndb.food.insert({fruits: ['cherry', 'banana', 'apple']})\n\ndb.food.find({fruits: {\"$all\": [\"apple\", \"banana\"]}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n{\n  _id: ObjectId(xxxx)\n  fruits: ['cherry', 'banana', 'banana']\n}\n```\n\n#### $size\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana']})\n\ndb.food.find({\"fruits\": {\"$size\": 3}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n\n#### $slice\n查询的第二个参数，可以返回指定的键，而使用slice可以返回数组中指定位置的值\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange', 'cherry']})\n\n// 返回fruits的前2条记录\ndb.food.find({}, {\"fruits\": {\"$slice\": 2}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana']\n}\n\n// 返回fruits的后2条记录\ndb.food.find({}, {\"fruits\": {\"$slice\": -2}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['orange', 'cherry']\n}\n\n// 返回fruits指定位置的记录\ndb.food.find({}, {\"fruits\": {\"$slice\": [1, 2]}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['banana', 'orange']\n}\n```\n","source":"_drafts/mongo入门之增删改查#mongo#$2016-07-31$.md","raw":"> mongodb入门之增删改\n\n```bash\n./mongod\n\nuse test\n```\n\n### 新增\n`db.foo.insert({bar: \"baz\"})`\n\n批量插入\n`db.foo.batchInsert([{f1: \"b1\"}, {f2: \"b2\"}, {f3: \"b3\"}])`\n\n### 删除\n删除文档所有数据  \n`db.foo.remove()`\n\n删除文档中指定的数据  \n`db.foo.remove({bar: \"baz\"})` \n\n更快的清楚文档的数据  \n`db.foo.drop()`\n\n### 更新文档\nupdate(condition, modifier)\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"friends\": 32,\n  \"enemies\": 2\n}\n\nvar joe = db.users.find({\"name\", \"joe\"})\njoe.releationships = {\"friends\": joe.friends, \"enemies\": joe.enemies}\n\njoe.username = joe.name\ndelete joe.name\ndelete joe.friends\ndelete joe.enemies\n\ndb.users.update({name: 'joe'}, joe)\n```\n\n#### mongo内置了一些修改器\n1.$set\n用于指定一个字段值，如果不存在则创建它，存在则更新它。\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"age\": 20,\n  \"sex\": \"male\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$set\": {\"favoriteBook\": \"war and piece\"}\n})\n\ndb.users.findOne()\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"age\": 20,\n  \"sex\": \"male\",\n  \"favoriteBook\": \"war and piece\"\n}\n```\nunset可以将键删除掉\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$unset\": {\"favoriteBook\": 1}\n})\n\n2.$inc\n$inc用于增加数值\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$inc\": {\"score\": 50}\n})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"score\": 50\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$inc\": {\"score\": 100}\n})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"score\": 150\n}\n```\n\n3.$push\n用于向已有的数组末尾添加一条记录，要是没有则新增一个数组。\n```javascript\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"content\": \"test\"\n}\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      name: \"tim\",\n      content: \"hello\"\n    }\n  }\n})\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      name: \"jim\",\n      content: \"world\"\n    }\n  }\n})\n\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"name\": \"joe\",\n  \"comments\": [{\n    name: \"tim\",\n    content: \"hello\" \n  }, {\n    {\n      name: \"jim\",\n      content: \"world\"\n    } \n  }]\n}\n```\n配合$each一次添加多条记录\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\"\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n        }\n      }]\n    }\n  }\n})\n```\n配合$slice可以控制数组的长度，只保留最后加入的n条记录。\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\"\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n        }\n      }],\n      // $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录\n      \"$slice\": -10\n    }\n  }\n})\n```\n使用$order还可以将数组排序后再添加到库中，但是它必须和$each一同使用。\n```javascript\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$push\": {\n    \"comments\": {\n      \"$each\": [{\n        {\n          name: \"tom\",\n          content: \"hello world\",\n          rate: 6.1\n        },\n        {\n          name: \"marry\",\n          content: \"sound's good\"\n          rate: 3.2\n        }\n      }],\n      // $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录\n      \"$slice\": -10,\n      \"$order\": {rate: -1}\n    }\n  }\n})\n```\n4.添加不重复元素  \n有时为了保证数组内的元素不重复，可以在添加的时候再做一个判断，而$ne可以做到。而使用$addToSet会更加直观好用一点。\n```javascript\ndb.users.update({\"favoriteSports\": {\"$ne\": \"backetball\"}}, {\n  \"$push\": {\n    \"favoriteSports\": \"backetball\"\n  }\n})\n\ndb.users.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\")}, {\n  \"$addToSet\": {\n    \"favoriteSports\": \"backetball\"\n  }\n})\n\n// $addToSet还可以和$each联合使用，为数组添加多个值，并且数组中不会有重复值。\n// 而ne不能这么做\ndb.user.update({\"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"}, {\n  \"$addToSet\": {\n    \"favoriteSports\": {\n      \"$each\": [\"backetball\", \"football\"]\n    }\n  }\n})\n```\n5.删除元素  \n第一种方式是使用$pop删除头部或者尾部的元素\n```javascirpt\ndb.lists.find({})\n{\n  \"_id\": ObjectId(\"571ae75b7d309173ab2c745c\"),\n  \"todo\": [\"dishes\", \"laundry\", \"dry cleaning\", \"wash window\"]\n}\n\ndb.lists.update({}, {\n  \"todo\": {\n    \"$pop\": {\"key\": 1}\n  }\n})\ndb.lists.update({}, {\n  \"todo\": {\n    \"$pop\": {\"key\": -1}\n  }\n})\n```\n删除特定元素\n```javascirpt\ndb.lists.update({}, {\n  \"$pull\": {\n    \"todo\": \"laundry\"\n  }\n})\n```\n6.upsert  \n会先查询集合有没符合的文档，没有则会创建\n```javascript\ndb.users.update({name: \"tim\"}, {\n  score: 50\n}, true)\n```\nupdate的第三个参数即为是否为upsert操作，如果集合中没有找到name为tim的记录，则会使用创建一个`{name: \"tim\", score: 50}`的记录。\n\n另外使用$setOrInsert还可以做到只在第一次时创建值，之后的更新操作该值都不变。\n```javascript\ndb.users.update({}, {\n  \"$setOrInsert\": {\"createdAt\": new Date()}\n}, true)\n```\n如果再次运行这个脚本，都不会改变createdAt的值\n\n### save\n如果文档不存在，使用它会自动创建文档。如果文档存在则更新它。  \n它接受一个参数，文档，如果该文档存在\"_id\"键，则调用upsert，否则调用insert。\n```javascript\nvar x = db.users.findOne()\nx.age = 22\ndb.user.save(x)\n```\n\n### 更新多个文档\n默认情况下，当有多个文档匹配时，update时只会更新第一个匹配的文档，若要更新多个，则需要将第四个参数置为true\n```javascript\ndb.user.update({birthday: \"07/31/2016\"}, {\"$set\": {age: 22}}, false, true)\n```\n\n### find基本用法\nfind(condi)根据特定条件查询\n```javascript\ndb.users.find({name: 'jim'})\n\n{\n  _id: ObjectId(\"...\"),\n  name: \"jim\",\n  age: 22,\n  sex: male\n}\n```\n也可以只返回指定的键\n```javascript\ndb.users.find({name: 'jim'}, {name: 1, age: 1})\n\n{\n  _id: ObjectId(\"...\"),\n  name: \"jim\",\n  age: 22\n}\n```\n默认情况下，_id一定会被返回。我们可以指定某个键不被返回，利用这个特性可以不返回\\_id\n```javascript\ndb.users.find({name: 'jim'}, {sex: 0, _id: 0})\n\n{\n  name: \"jim\",\n  age: 22\n}\n```\n\n### 查询条件\n$lt、$lte、$gt、$gte分别代表了<、<=、>、>=。\n```javascript\ndb.users.find({age: {\"$gt\": 20, \"$lt\": 30}})\n```\n还有一个$ne，代表不等于\n```javascript\ndb.users.find({name: {\"$ne\": \"tim\"}})\n```\n\n#### or查询\n$in用于查询单个键的多个值，与之相反的是$nin\n```javascript\ndb.users.find({name: {\"$in\": [\"tim\", \"tom\"]}})\ndb.users.find({name: {\"$nin\": [\"tim\", \"tom\"]}})\n```\n$or用于查询多个键\n```javascript\ndb.users.find({\"$or\": [{name: \"tim\"}, {age: {\"$in\": [20, 22]}}]})\n```\n\n#### not语句\n```javascript\n// $mod取模，第一个参数是除以给定值，第二个参数是余数\ndb.users.find({\"id_num\": {\"$mod\": [5, 1]}})\ndb.users.find({\"id_num\": {\"$not\": {\"$mod\": [5, 1]}}})\n```\n\n### 特定类型的查询\n#### null\n查询为null的记录\n\n```javascript\ndb.users.find({male: null})\n```\n但是如果该指定的键在文档中不存在，文档会被查询出来。因此需要指定exists字段\n```javascript\ndb.users.find({male: {\"$in\": [null], \"$exists\": true}})\n```\n#### 支持正则表达式\n```javascript\ndb.users.find({name: /joe/i})\n```\n\n### 数组查询\n当有这样一个文档\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\n\ndb.food.find({fruits: 'banana'})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n这会查询到拥有banana的记录，想要绝对匹配，则需要指定为数组\n\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana', 'cherry']})\n\ndb.food.find({fruits: ['apple', 'banana', 'orange']})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n可以指定从数组的某个下标开始查询\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana', 'cherry']})\n\ndb.food.find({\"fruits.2\": \"banana\"})\n```\n\n#### $all\n通过多个元素匹配数组\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'kumquat', 'orange']})\ndb.food.insert({fruits: ['cherry', 'banana', 'apple']})\n\ndb.food.find({fruits: {\"$all\": [\"apple\", \"banana\"]}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n{\n  _id: ObjectId(xxxx)\n  fruits: ['cherry', 'banana', 'banana']\n}\n```\n\n#### $size\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange']})\ndb.food.insert({fruits: ['apple', 'banana']})\n\ndb.food.find({\"fruits\": {\"$size\": 3}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana', 'orange']\n}\n```\n\n#### $slice\n查询的第二个参数，可以返回指定的键，而使用slice可以返回数组中指定位置的值\n```javascript\ndb.food.insert({fruits: ['apple', 'banana', 'orange', 'cherry']})\n\n// 返回fruits的前2条记录\ndb.food.find({}, {\"fruits\": {\"$slice\": 2}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['apple', 'banana']\n}\n\n// 返回fruits的后2条记录\ndb.food.find({}, {\"fruits\": {\"$slice\": -2}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['orange', 'cherry']\n}\n\n// 返回fruits指定位置的记录\ndb.food.find({}, {\"fruits\": {\"$slice\": [1, 2]}})\n{\n  _id: ObjectId(xxxx)\n  fruits: ['banana', 'orange']\n}\n```\n","slug":"mongo入门之增删改查#mongo#$2016-07-31$","published":0,"date":"2017-08-03T10:21:24.108Z","updated":"2017-08-03T10:21:24.108Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96ct0003nou9jwdwn0rw","content":"<blockquote>\n<p>mongodb入门之增删改</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./mongod</div><div class=\"line\"></div><div class=\"line\">use <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h3 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h3><p><code>db.foo.insert({bar: &quot;baz&quot;})</code></p>\n<p>批量插入<br><code>db.foo.batchInsert([{f1: &quot;b1&quot;}, {f2: &quot;b2&quot;}, {f3: &quot;b3&quot;}])</code></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除文档所有数据<br><code>db.foo.remove()</code></p>\n<p>删除文档中指定的数据<br><code>db.foo.remove({bar: &quot;baz&quot;})</code> </p>\n<p>更快的清楚文档的数据<br><code>db.foo.drop()</code></p>\n<h3 id=\"更新文档\"><a href=\"#更新文档\" class=\"headerlink\" title=\"更新文档\"></a>更新文档</h3><p>update(condition, modifier)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"friends\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">  <span class=\"string\">\"enemies\"</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> joe = db.users.find(&#123;<span class=\"string\">\"name\"</span>, <span class=\"string\">\"joe\"</span>&#125;)</div><div class=\"line\">joe.releationships = &#123;<span class=\"string\">\"friends\"</span>: joe.friends, <span class=\"string\">\"enemies\"</span>: joe.enemies&#125;</div><div class=\"line\"></div><div class=\"line\">joe.username = joe.name</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.name</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.friends</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.enemies</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'joe'</span>&#125;, joe)</div></pre></td></tr></table></figure></p>\n<h4 id=\"mongo内置了一些修改器\"><a href=\"#mongo内置了一些修改器\" class=\"headerlink\" title=\"mongo内置了一些修改器\"></a>mongo内置了一些修改器</h4><p>1.$set<br>用于指定一个字段值，如果不存在则创建它，存在则更新它。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"male\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$set\"</span>: &#123;<span class=\"string\">\"favoriteBook\"</span>: <span class=\"string\">\"war and piece\"</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">db.users.findOne()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"male\"</span>,</div><div class=\"line\">  <span class=\"string\">\"favoriteBook\"</span>: <span class=\"string\">\"war and piece\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>unset可以将键删除掉<br>db.users.update({“_id”: ObjectId(“571ae75b7d309173ab2c745c”)}, {<br>  “$unset”: {“favoriteBook”: 1}<br>})</p>\n<p>2.$inc<br>$inc用于增加数值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$inc\"</span>: &#123;<span class=\"string\">\"score\"</span>: <span class=\"number\">50</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"score\"</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$inc\"</span>: &#123;<span class=\"string\">\"score\"</span>: <span class=\"number\">100</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"score\"</span>: <span class=\"number\">150</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.$push<br>用于向已有的数组末尾添加一条记录，要是没有则新增一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"content\"</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      name: <span class=\"string\">\"tim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"world\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"comments\"</span>: [&#123;</div><div class=\"line\">    name: <span class=\"string\">\"tim\"</span>,</div><div class=\"line\">    content: <span class=\"string\">\"hello\"</span> </div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"world\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配合$each一次添加多条记录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>配合$slice可以控制数组的长度，只保留最后加入的n条记录。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      <span class=\"comment\">// $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录</span></div><div class=\"line\">      <span class=\"string\">\"$slice\"</span>: <span class=\"number\">-10</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>使用$order还可以将数组排序后再添加到库中，但是它必须和$each一同使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span>,</div><div class=\"line\">          rate: <span class=\"number\">6.1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">          rate: <span class=\"number\">3.2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      <span class=\"comment\">// $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录</span></div><div class=\"line\">      <span class=\"string\">\"$slice\"</span>: <span class=\"number\">-10</span>,</div><div class=\"line\">      <span class=\"string\">\"$order\"</span>: &#123;<span class=\"attr\">rate</span>: <span class=\"number\">-1</span>&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.添加不重复元素<br>有时为了保证数组内的元素不重复，可以在添加的时候再做一个判断，而$ne可以做到。而使用$addToSet会更加直观好用一点。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"favoriteSports\"</span>: &#123;<span class=\"string\">\"$ne\"</span>: <span class=\"string\">\"backetball\"</span>&#125;&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: <span class=\"string\">\"backetball\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$addToSet\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: <span class=\"string\">\"backetball\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// $addToSet还可以和$each联合使用，为数组添加多个值，并且数组中不会有重复值。</span></div><div class=\"line\"><span class=\"comment\">// 而ne不能这么做</span></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$addToSet\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [<span class=\"string\">\"backetball\"</span>, <span class=\"string\">\"football\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>5.删除元素<br>第一种方式是使用$pop删除头部或者尾部的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.lists.find(&#123;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_id&quot;: ObjectId(&quot;571ae75b7d309173ab2c745c&quot;),</div><div class=\"line\">  &quot;todo&quot;: [&quot;dishes&quot;, &quot;laundry&quot;, &quot;dry cleaning&quot;, &quot;wash window&quot;]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;todo&quot;: &#123;</div><div class=\"line\">    &quot;$pop&quot;: &#123;&quot;key&quot;: 1&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;todo&quot;: &#123;</div><div class=\"line\">    &quot;$pop&quot;: &#123;&quot;key&quot;: -1&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>删除特定元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;$pull&quot;: &#123;</div><div class=\"line\">    &quot;todo&quot;: &quot;laundry&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>6.upsert<br>会先查询集合有没符合的文档，没有则会创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"tim\"</span>&#125;, &#123;</div><div class=\"line\">  score: <span class=\"number\">50</span></div><div class=\"line\">&#125;, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>update的第三个参数即为是否为upsert操作，如果集合中没有找到name为tim的记录，则会使用创建一个<code>{name: &quot;tim&quot;, score: 50}</code>的记录。</p>\n<p>另外使用$setOrInsert还可以做到只在第一次时创建值，之后的更新操作该值都不变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$setOrInsert\"</span>: &#123;<span class=\"string\">\"createdAt\"</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</div><div class=\"line\">&#125;, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>如果再次运行这个脚本，都不会改变createdAt的值</p>\n<h3 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h3><p>如果文档不存在，使用它会自动创建文档。如果文档存在则更新它。<br>它接受一个参数，文档，如果该文档存在”_id”键，则调用upsert，否则调用insert。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = db.users.findOne()</div><div class=\"line\">x.age = <span class=\"number\">22</span></div><div class=\"line\">db.user.save(x)</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新多个文档\"><a href=\"#更新多个文档\" class=\"headerlink\" title=\"更新多个文档\"></a>更新多个文档</h3><p>默认情况下，当有多个文档匹配时，update时只会更新第一个匹配的文档，若要更新多个，则需要将第四个参数置为true<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">birthday</span>: <span class=\"string\">\"07/31/2016\"</span>&#125;, &#123;<span class=\"string\">\"$set\"</span>: &#123;<span class=\"attr\">age</span>: <span class=\"number\">22</span>&#125;&#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"find基本用法\"><a href=\"#find基本用法\" class=\"headerlink\" title=\"find基本用法\"></a>find基本用法</h3><p>find(condi)根据特定条件查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(<span class=\"string\">\"...\"</span>),</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span>,</div><div class=\"line\">  sex: male</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以只返回指定的键<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">age</span>: <span class=\"number\">1</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(<span class=\"string\">\"...\"</span>),</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认情况下，_id一定会被返回。我们可以指定某个键不被返回，利用这个特性可以不返回_id<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;, &#123;<span class=\"attr\">sex</span>: <span class=\"number\">0</span>, <span class=\"attr\">_id</span>: <span class=\"number\">0</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h3><p>$lt、$lte、$gt、$gte分别代表了&lt;、&lt;=、&gt;、&gt;=。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">age</span>: &#123;<span class=\"string\">\"$gt\"</span>: <span class=\"number\">20</span>, <span class=\"string\">\"$lt\"</span>: <span class=\"number\">30</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>还有一个$ne，代表不等于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$ne\"</span>: <span class=\"string\">\"tim\"</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"or查询\"><a href=\"#or查询\" class=\"headerlink\" title=\"or查询\"></a>or查询</h4><p>$in用于查询单个键的多个值，与之相反的是$nin<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"string\">\"tim\"</span>, <span class=\"string\">\"tom\"</span>]&#125;&#125;)</div><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$nin\"</span>: [<span class=\"string\">\"tim\"</span>, <span class=\"string\">\"tom\"</span>]&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>$or用于查询多个键<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"$or\"</span>: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"tim\"</span>&#125;, &#123;<span class=\"attr\">age</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"number\">20</span>, <span class=\"number\">22</span>]&#125;&#125;]&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"not语句\"><a href=\"#not语句\" class=\"headerlink\" title=\"not语句\"></a>not语句</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $mod取模，第一个参数是除以给定值，第二个参数是余数</span></div><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"id_num\"</span>: &#123;<span class=\"string\">\"$mod\"</span>: [<span class=\"number\">5</span>, <span class=\"number\">1</span>]&#125;&#125;)</div><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"id_num\"</span>: &#123;<span class=\"string\">\"$not\"</span>: &#123;<span class=\"string\">\"$mod\"</span>: [<span class=\"number\">5</span>, <span class=\"number\">1</span>]&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"特定类型的查询\"><a href=\"#特定类型的查询\" class=\"headerlink\" title=\"特定类型的查询\"></a>特定类型的查询</h3><h4 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h4><p>查询为null的记录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">male</span>: <span class=\"literal\">null</span>&#125;)</div></pre></td></tr></table></figure>\n<p>但是如果该指定的键在文档中不存在，文档会被查询出来。因此需要指定exists字段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">male</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"literal\">null</span>], <span class=\"string\">\"$exists\"</span>: <span class=\"literal\">true</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"支持正则表达式\"><a href=\"#支持正则表达式\" class=\"headerlink\" title=\"支持正则表达式\"></a>支持正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"regexp\">/joe/i</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"数组查询\"><a href=\"#数组查询\" class=\"headerlink\" title=\"数组查询\"></a>数组查询</h3><p>当有这样一个文档<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: <span class=\"string\">'banana'</span>&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这会查询到拥有banana的记录，想要绝对匹配，则需要指定为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以指定从数组的某个下标开始查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"string\">\"fruits.2\"</span>: <span class=\"string\">\"banana\"</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"$all\"></a>$all</h4><p>通过多个元素匹配数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'kumquat'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'cherry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: &#123;<span class=\"string\">\"$all\"</span>: [<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>]&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'cherry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'banana'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"$size\"></a>$size</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$size\"</span>: <span class=\"number\">3</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"$slice\"></a>$slice</h4><p>查询的第二个参数，可以返回指定的键，而使用slice可以返回数组中指定位置的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits的前2条记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: <span class=\"number\">2</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits的后2条记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: <span class=\"number\">-2</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'orange'</span>, <span class=\"string\">'cherry'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits指定位置的记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>mongodb入门之增删改</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">./mongod</div><div class=\"line\"></div><div class=\"line\">use <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h3 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h3><p><code>db.foo.insert({bar: &quot;baz&quot;})</code></p>\n<p>批量插入<br><code>db.foo.batchInsert([{f1: &quot;b1&quot;}, {f2: &quot;b2&quot;}, {f3: &quot;b3&quot;}])</code></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除文档所有数据<br><code>db.foo.remove()</code></p>\n<p>删除文档中指定的数据<br><code>db.foo.remove({bar: &quot;baz&quot;})</code> </p>\n<p>更快的清楚文档的数据<br><code>db.foo.drop()</code></p>\n<h3 id=\"更新文档\"><a href=\"#更新文档\" class=\"headerlink\" title=\"更新文档\"></a>更新文档</h3><p>update(condition, modifier)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"friends\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">  <span class=\"string\">\"enemies\"</span>: <span class=\"number\">2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> joe = db.users.find(&#123;<span class=\"string\">\"name\"</span>, <span class=\"string\">\"joe\"</span>&#125;)</div><div class=\"line\">joe.releationships = &#123;<span class=\"string\">\"friends\"</span>: joe.friends, <span class=\"string\">\"enemies\"</span>: joe.enemies&#125;</div><div class=\"line\"></div><div class=\"line\">joe.username = joe.name</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.name</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.friends</div><div class=\"line\"><span class=\"keyword\">delete</span> joe.enemies</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'joe'</span>&#125;, joe)</div></pre></td></tr></table></figure></p>\n<h4 id=\"mongo内置了一些修改器\"><a href=\"#mongo内置了一些修改器\" class=\"headerlink\" title=\"mongo内置了一些修改器\"></a>mongo内置了一些修改器</h4><p>1.$set<br>用于指定一个字段值，如果不存在则创建它，存在则更新它。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"male\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$set\"</span>: &#123;<span class=\"string\">\"favoriteBook\"</span>: <span class=\"string\">\"war and piece\"</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">db.users.findOne()</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">  <span class=\"string\">\"sex\"</span>: <span class=\"string\">\"male\"</span>,</div><div class=\"line\">  <span class=\"string\">\"favoriteBook\"</span>: <span class=\"string\">\"war and piece\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>unset可以将键删除掉<br>db.users.update({“_id”: ObjectId(“571ae75b7d309173ab2c745c”)}, {<br>  “$unset”: {“favoriteBook”: 1}<br>})</p>\n<p>2.$inc<br>$inc用于增加数值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$inc\"</span>: &#123;<span class=\"string\">\"score\"</span>: <span class=\"number\">50</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"score\"</span>: <span class=\"number\">50</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$inc\"</span>: &#123;<span class=\"string\">\"score\"</span>: <span class=\"number\">100</span>&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"score\"</span>: <span class=\"number\">150</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.$push<br>用于向已有的数组末尾添加一条记录，要是没有则新增一个数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"content\"</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      name: <span class=\"string\">\"tim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"hello\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"world\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>),</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"comments\"</span>: [&#123;</div><div class=\"line\">    name: <span class=\"string\">\"tim\"</span>,</div><div class=\"line\">    content: <span class=\"string\">\"hello\"</span> </div><div class=\"line\">  &#125;, &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">      content: <span class=\"string\">\"world\"</span></div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配合$each一次添加多条记录<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>配合$slice可以控制数组的长度，只保留最后加入的n条记录。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      <span class=\"comment\">// $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录</span></div><div class=\"line\">      <span class=\"string\">\"$slice\"</span>: <span class=\"number\">-10</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>使用$order还可以将数组排序后再添加到库中，但是它必须和$each一同使用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"comments\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [&#123;</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"tom\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"hello world\"</span>,</div><div class=\"line\">          rate: <span class=\"number\">6.1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          name: <span class=\"string\">\"marry\"</span>,</div><div class=\"line\">          content: <span class=\"string\">\"sound's good\"</span></div><div class=\"line\">          rate: <span class=\"number\">3.2</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;],</div><div class=\"line\">      <span class=\"comment\">// $slice的值只能是负数，这里代表了数组只会保留最后加入的10条记录</span></div><div class=\"line\">      <span class=\"string\">\"$slice\"</span>: <span class=\"number\">-10</span>,</div><div class=\"line\">      <span class=\"string\">\"$order\"</span>: &#123;<span class=\"attr\">rate</span>: <span class=\"number\">-1</span>&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>4.添加不重复元素<br>有时为了保证数组内的元素不重复，可以在添加的时候再做一个判断，而$ne可以做到。而使用$addToSet会更加直观好用一点。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"favoriteSports\"</span>: &#123;<span class=\"string\">\"$ne\"</span>: <span class=\"string\">\"backetball\"</span>&#125;&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$push\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: <span class=\"string\">\"backetball\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>)&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$addToSet\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: <span class=\"string\">\"backetball\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// $addToSet还可以和$each联合使用，为数组添加多个值，并且数组中不会有重复值。</span></div><div class=\"line\"><span class=\"comment\">// 而ne不能这么做</span></div><div class=\"line\">db.user.update(&#123;<span class=\"string\">\"_id\"</span>: ObjectId(<span class=\"string\">\"571ae75b7d309173ab2c745c\"</span>&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$addToSet\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"favoriteSports\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"$each\"</span>: [<span class=\"string\">\"backetball\"</span>, <span class=\"string\">\"football\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>5.删除元素<br>第一种方式是使用$pop删除头部或者尾部的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.lists.find(&#123;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_id&quot;: ObjectId(&quot;571ae75b7d309173ab2c745c&quot;),</div><div class=\"line\">  &quot;todo&quot;: [&quot;dishes&quot;, &quot;laundry&quot;, &quot;dry cleaning&quot;, &quot;wash window&quot;]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;todo&quot;: &#123;</div><div class=\"line\">    &quot;$pop&quot;: &#123;&quot;key&quot;: 1&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;todo&quot;: &#123;</div><div class=\"line\">    &quot;$pop&quot;: &#123;&quot;key&quot;: -1&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>删除特定元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.lists.update(&#123;&#125;, &#123;</div><div class=\"line\">  &quot;$pull&quot;: &#123;</div><div class=\"line\">    &quot;todo&quot;: &quot;laundry&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>6.upsert<br>会先查询集合有没符合的文档，没有则会创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"tim\"</span>&#125;, &#123;</div><div class=\"line\">  score: <span class=\"number\">50</span></div><div class=\"line\">&#125;, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>update的第三个参数即为是否为upsert操作，如果集合中没有找到name为tim的记录，则会使用创建一个<code>{name: &quot;tim&quot;, score: 50}</code>的记录。</p>\n<p>另外使用$setOrInsert还可以做到只在第一次时创建值，之后的更新操作该值都不变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;&#125;, &#123;</div><div class=\"line\">  <span class=\"string\">\"$setOrInsert\"</span>: &#123;<span class=\"string\">\"createdAt\"</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()&#125;</div><div class=\"line\">&#125;, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<p>如果再次运行这个脚本，都不会改变createdAt的值</p>\n<h3 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h3><p>如果文档不存在，使用它会自动创建文档。如果文档存在则更新它。<br>它接受一个参数，文档，如果该文档存在”_id”键，则调用upsert，否则调用insert。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = db.users.findOne()</div><div class=\"line\">x.age = <span class=\"number\">22</span></div><div class=\"line\">db.user.save(x)</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新多个文档\"><a href=\"#更新多个文档\" class=\"headerlink\" title=\"更新多个文档\"></a>更新多个文档</h3><p>默认情况下，当有多个文档匹配时，update时只会更新第一个匹配的文档，若要更新多个，则需要将第四个参数置为true<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.update(&#123;<span class=\"attr\">birthday</span>: <span class=\"string\">\"07/31/2016\"</span>&#125;, &#123;<span class=\"string\">\"$set\"</span>: &#123;<span class=\"attr\">age</span>: <span class=\"number\">22</span>&#125;&#125;, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"find基本用法\"><a href=\"#find基本用法\" class=\"headerlink\" title=\"find基本用法\"></a>find基本用法</h3><p>find(condi)根据特定条件查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(<span class=\"string\">\"...\"</span>),</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span>,</div><div class=\"line\">  sex: male</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以只返回指定的键<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"number\">1</span>, <span class=\"attr\">age</span>: <span class=\"number\">1</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(<span class=\"string\">\"...\"</span>),</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认情况下，_id一定会被返回。我们可以指定某个键不被返回，利用这个特性可以不返回_id<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'jim'</span>&#125;, &#123;<span class=\"attr\">sex</span>: <span class=\"number\">0</span>, <span class=\"attr\">_id</span>: <span class=\"number\">0</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  name: <span class=\"string\">\"jim\"</span>,</div><div class=\"line\">  age: <span class=\"number\">22</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"查询条件\"><a href=\"#查询条件\" class=\"headerlink\" title=\"查询条件\"></a>查询条件</h3><p>$lt、$lte、$gt、$gte分别代表了&lt;、&lt;=、&gt;、&gt;=。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">age</span>: &#123;<span class=\"string\">\"$gt\"</span>: <span class=\"number\">20</span>, <span class=\"string\">\"$lt\"</span>: <span class=\"number\">30</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>还有一个$ne，代表不等于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$ne\"</span>: <span class=\"string\">\"tim\"</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"or查询\"><a href=\"#or查询\" class=\"headerlink\" title=\"or查询\"></a>or查询</h4><p>$in用于查询单个键的多个值，与之相反的是$nin<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"string\">\"tim\"</span>, <span class=\"string\">\"tom\"</span>]&#125;&#125;)</div><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: &#123;<span class=\"string\">\"$nin\"</span>: [<span class=\"string\">\"tim\"</span>, <span class=\"string\">\"tom\"</span>]&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>$or用于查询多个键<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"$or\"</span>: [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"tim\"</span>&#125;, &#123;<span class=\"attr\">age</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"number\">20</span>, <span class=\"number\">22</span>]&#125;&#125;]&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"not语句\"><a href=\"#not语句\" class=\"headerlink\" title=\"not语句\"></a>not语句</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// $mod取模，第一个参数是除以给定值，第二个参数是余数</span></div><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"id_num\"</span>: &#123;<span class=\"string\">\"$mod\"</span>: [<span class=\"number\">5</span>, <span class=\"number\">1</span>]&#125;&#125;)</div><div class=\"line\">db.users.find(&#123;<span class=\"string\">\"id_num\"</span>: &#123;<span class=\"string\">\"$not\"</span>: &#123;<span class=\"string\">\"$mod\"</span>: [<span class=\"number\">5</span>, <span class=\"number\">1</span>]&#125;&#125;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"特定类型的查询\"><a href=\"#特定类型的查询\" class=\"headerlink\" title=\"特定类型的查询\"></a>特定类型的查询</h3><h4 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h4><p>查询为null的记录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">male</span>: <span class=\"literal\">null</span>&#125;)</div></pre></td></tr></table></figure>\n<p>但是如果该指定的键在文档中不存在，文档会被查询出来。因此需要指定exists字段<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">male</span>: &#123;<span class=\"string\">\"$in\"</span>: [<span class=\"literal\">null</span>], <span class=\"string\">\"$exists\"</span>: <span class=\"literal\">true</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"支持正则表达式\"><a href=\"#支持正则表达式\" class=\"headerlink\" title=\"支持正则表达式\"></a>支持正则表达式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.find(&#123;<span class=\"attr\">name</span>: <span class=\"regexp\">/joe/i</span>&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"数组查询\"><a href=\"#数组查询\" class=\"headerlink\" title=\"数组查询\"></a>数组查询</h3><p>当有这样一个文档<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: <span class=\"string\">'banana'</span>&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这会查询到拥有banana的记录，想要绝对匹配，则需要指定为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以指定从数组的某个下标开始查询<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"string\">\"fruits.2\"</span>: <span class=\"string\">\"banana\"</span>&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"all\"><a href=\"#all\" class=\"headerlink\" title=\"$all\"></a>$all</h4><p>通过多个元素匹配数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'kumquat'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'cherry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"attr\">fruits</span>: &#123;<span class=\"string\">\"$all\"</span>: [<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"banana\"</span>]&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'cherry'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'banana'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"$size\"></a>$size</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]&#125;)</div><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\">db.food.find(&#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$size\"</span>: <span class=\"number\">3</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"$slice\"></a>$slice</h4><p>查询的第二个参数，可以返回指定的键，而使用slice可以返回数组中指定位置的值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.food.insert(&#123;<span class=\"attr\">fruits</span>: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'cherry'</span>]&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits的前2条记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: <span class=\"number\">2</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits的后2条记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: <span class=\"number\">-2</span>&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'orange'</span>, <span class=\"string\">'cherry'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 返回fruits指定位置的记录</span></div><div class=\"line\">db.food.find(&#123;&#125;, &#123;<span class=\"string\">\"fruits\"</span>: &#123;<span class=\"string\">\"$slice\"</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]&#125;&#125;)</div><div class=\"line\">&#123;</div><div class=\"line\">  _id: ObjectId(xxxx)</div><div class=\"line\">  fruits: [<span class=\"string\">'banana'</span>, <span class=\"string\">'orange'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"_content":"# 安装入门\n## virtualbox\n需要先安装[virtualbox](https://www.virtualbox.org/)\n\n安装完后，可以选择性的安装它的扩展，因为在后续步骤中，你安装的box可能是需要virtualbox装有该插件\n\n[插件下载页](https://www.virtualbox.org/wiki/Downloads)  \n安装  \nVirtualBox 5.1.6 Oracle VM VirtualBox Extension Pack\n\n下载后将其添加到virtualbox即可\n\nMac的话，在`偏好设置/扩展`这里添加\n\n## 安装vagrant\n[vagrant](https://www.vagrantup.com/downloads.html)\n\n如果已经安装过需要升级的，也是直接下载安装，安装时会直接覆盖旧的文件\n\n## 生成Vagrantfile\n选择一个目录，作为工程的根目录，在该目录生成Vagrantfile\n\n```bash\nvagrant init\n```\n\n## 安装Box\n### 方法1\nBox可以认为就是一个环境镜像，这个环境可以是ubuntu，可以是centos等等。\n\n因此根据自己的需求，安装不同的Box。\n\n可以到 [HashiCorp's Atlas box catalog](https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&sort=&provider=&q=)这里查找需要的Box\n\n```\nvagrant box add ubuntu/trusty64\n```\n\n### 方法2\n方法1在国内的话，在终端下载镜像会非常慢\n\n所以我们一般不会采取这种方式安装。\n\n而是直接去网上搜索镜像，利用迅雷将box下载下来，再进行安装。\n\n可以到这里搜索box  \n[vagrantbox.es](http://www.vagrantbox.es/)\n\n这里我们下载了debian-8.1-lxc-puppet.box，接下来往vagrant添加box\n\n```\n# 查看box add的帮助文档\nvagrant box add --help\n\n# 文档提示：\n# vagrant box add [options] <name, url, or path>\n# 即可以接具体的文件路径，name是添加到vagrant后的命名，便于管理\n\nvagrant box add debian /Users/seed/Public/box/debian-8.1-lxc-puppet.box\n\nvagrant box list\n# 显示，说明已经添加进来\ndebian      (virtualbox, 0)\n```\n\n做完上述操作后，需要修改Vagrantfile。在该文件中找到下面的文字\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"base\"\nend\n```\n将`config.vm.box = \"base\"`  \n修改为  \n`config.vm.box = \"debian\"`\n\n## 启动和进入\n\n```\nvagrant up\n# 一切正常后\nvagrant ssh\n\ncd /vagrant\nls\n```\n\n在/vagrant目录下可以看到，我们的Vagrantfile所在目录的所有文件，即它被共享到/vagrant这个目录了\n\n`CTRL+D`可以退出回到宿主机器\n\n# 其他配置\n## 修改同步目录\n默认情况下，vagrant会将Vagrantfile所在目录的文件同步到/vagrant目录下，我们可以修改这个目录\n\n修改Vagrantfile文件中的`config.vm.synced_folder`\n\n```vagrantfile\nconfig.vm.synced_folder \".\" \"/seed\"\n```\n之后\n\n```\nvagrant reload\nvagrant ssh\ncd /seed\nls\n```\n便可以看到同步的目录了\n\n更多关于同步的，参考官网[文档](https://www.vagrantup.com/docs/synced-folders/)\n\n## PROVISIONING\n有时我们会在多台机器使用vagrant安装一些linux环境，同时安装一些工具，如apache\n\n如果每台机器安装完环境后，都需要逐个去安装工具的话就太费事了\n\nvagrant提供了PROVISIONING机制，在vagrant安装完环境后自动安装其他的工具\n\n首先编写一个安装脚本bootstrap.sh\n\n```shell\n#!/usr/bin/env bash\n\napt-get update\napt-get install -y apache2\nif ! [ -L /var/www ]; then\n  rm -rf /var/www\n  ln -fs /vagrant /var/www\nfi\n\n```\n\n修改Vagrantfile文件\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"debian\"\n  config.vm.provision :shell, path: \"bootstrap.sh\"\nend\n```\n\n这次在vagrant启动的时候，我们指定了脚本bootstrap.sh\n\n```\nvagrant up\n```\n\n这时在启动完后便会去执行脚本\n\n如果已经执行过`vagrant up`操作启动了虚拟机，可以使用reload命令来再次执行脚本\n\n```vagrantfile\nvagrant reload --provision\n```\n\n更多关于PROVISIONING的，参考官网[文档](https://www.vagrantup.com/docs/provisioning/)\n\n## 网络\n有时我们经常需要使用网络的方式访问我们的虚拟机\n\n如我们在虚拟机中测试部署了一个网站，监听80端口，我们想在宿主机器中访问它。\n\n修改Vagrantfile\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n  # config.vm.network \"public_network\"\nend\n```\n\n我们可以通过如下两种方式访问到\n\nhttp://localhost:8080  \nhttp://192.168.33.10\n\n基本上配置这两个已经足够满足开发人员的需求了。\n\n如果需要让其他机器也能访问，则需要将网络设置为public_network\n\n详情可参考[文档](https://www.vagrantup.com/docs/networking/)\n\n## 关闭虚拟机\nvagrant可以让我们根据不同的情况关闭虚拟机\n\n### vagrant suspend\n执行后将会保存当前虚拟机的状态，简单点理解就是将系统睡眠。\n\n启动时依旧执行`vagrant up`\n\n这种情况下的启动会很快，并且会恢复到suspend之前的系统状态。\n\n这种方式的缺点就是，suspend之后虚拟机依旧会占有宿主机器的内存和硬盘空间。\n\n### vagrant halt\n执行后会完全关闭虚拟机\n\n启动时依旧执行`vagrant up`\n\n这种方式的好处就是关闭后不占据宿主机器的内存和硬盘空间。\n\n缺点就是启动的需要会花费一些时间\n\n### vagrant destroy\n这种方式和vagrant halt很像，但是区别就是它还会释放所有资源，宿主机器恢复到一个干净没有任何虚拟机资源的环境下。\n\n缺点之一是在启动的时候也需要花费一些时间。  \n缺点之二就是需要重新re-provision一遍，就是重新运行之前我们说的脚本。  \n因为destroy后的状态已经是运行脚本前的状态了","source":"_drafts/vagrant配置指南#linux#$2016-09-29$.md","raw":"# 安装入门\n## virtualbox\n需要先安装[virtualbox](https://www.virtualbox.org/)\n\n安装完后，可以选择性的安装它的扩展，因为在后续步骤中，你安装的box可能是需要virtualbox装有该插件\n\n[插件下载页](https://www.virtualbox.org/wiki/Downloads)  \n安装  \nVirtualBox 5.1.6 Oracle VM VirtualBox Extension Pack\n\n下载后将其添加到virtualbox即可\n\nMac的话，在`偏好设置/扩展`这里添加\n\n## 安装vagrant\n[vagrant](https://www.vagrantup.com/downloads.html)\n\n如果已经安装过需要升级的，也是直接下载安装，安装时会直接覆盖旧的文件\n\n## 生成Vagrantfile\n选择一个目录，作为工程的根目录，在该目录生成Vagrantfile\n\n```bash\nvagrant init\n```\n\n## 安装Box\n### 方法1\nBox可以认为就是一个环境镜像，这个环境可以是ubuntu，可以是centos等等。\n\n因此根据自己的需求，安装不同的Box。\n\n可以到 [HashiCorp's Atlas box catalog](https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&sort=&provider=&q=)这里查找需要的Box\n\n```\nvagrant box add ubuntu/trusty64\n```\n\n### 方法2\n方法1在国内的话，在终端下载镜像会非常慢\n\n所以我们一般不会采取这种方式安装。\n\n而是直接去网上搜索镜像，利用迅雷将box下载下来，再进行安装。\n\n可以到这里搜索box  \n[vagrantbox.es](http://www.vagrantbox.es/)\n\n这里我们下载了debian-8.1-lxc-puppet.box，接下来往vagrant添加box\n\n```\n# 查看box add的帮助文档\nvagrant box add --help\n\n# 文档提示：\n# vagrant box add [options] <name, url, or path>\n# 即可以接具体的文件路径，name是添加到vagrant后的命名，便于管理\n\nvagrant box add debian /Users/seed/Public/box/debian-8.1-lxc-puppet.box\n\nvagrant box list\n# 显示，说明已经添加进来\ndebian      (virtualbox, 0)\n```\n\n做完上述操作后，需要修改Vagrantfile。在该文件中找到下面的文字\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"base\"\nend\n```\n将`config.vm.box = \"base\"`  \n修改为  \n`config.vm.box = \"debian\"`\n\n## 启动和进入\n\n```\nvagrant up\n# 一切正常后\nvagrant ssh\n\ncd /vagrant\nls\n```\n\n在/vagrant目录下可以看到，我们的Vagrantfile所在目录的所有文件，即它被共享到/vagrant这个目录了\n\n`CTRL+D`可以退出回到宿主机器\n\n# 其他配置\n## 修改同步目录\n默认情况下，vagrant会将Vagrantfile所在目录的文件同步到/vagrant目录下，我们可以修改这个目录\n\n修改Vagrantfile文件中的`config.vm.synced_folder`\n\n```vagrantfile\nconfig.vm.synced_folder \".\" \"/seed\"\n```\n之后\n\n```\nvagrant reload\nvagrant ssh\ncd /seed\nls\n```\n便可以看到同步的目录了\n\n更多关于同步的，参考官网[文档](https://www.vagrantup.com/docs/synced-folders/)\n\n## PROVISIONING\n有时我们会在多台机器使用vagrant安装一些linux环境，同时安装一些工具，如apache\n\n如果每台机器安装完环境后，都需要逐个去安装工具的话就太费事了\n\nvagrant提供了PROVISIONING机制，在vagrant安装完环境后自动安装其他的工具\n\n首先编写一个安装脚本bootstrap.sh\n\n```shell\n#!/usr/bin/env bash\n\napt-get update\napt-get install -y apache2\nif ! [ -L /var/www ]; then\n  rm -rf /var/www\n  ln -fs /vagrant /var/www\nfi\n\n```\n\n修改Vagrantfile文件\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"debian\"\n  config.vm.provision :shell, path: \"bootstrap.sh\"\nend\n```\n\n这次在vagrant启动的时候，我们指定了脚本bootstrap.sh\n\n```\nvagrant up\n```\n\n这时在启动完后便会去执行脚本\n\n如果已经执行过`vagrant up`操作启动了虚拟机，可以使用reload命令来再次执行脚本\n\n```vagrantfile\nvagrant reload --provision\n```\n\n更多关于PROVISIONING的，参考官网[文档](https://www.vagrantup.com/docs/provisioning/)\n\n## 网络\n有时我们经常需要使用网络的方式访问我们的虚拟机\n\n如我们在虚拟机中测试部署了一个网站，监听80端口，我们想在宿主机器中访问它。\n\n修改Vagrantfile\n\n```vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n  config.vm.network \"private_network\", ip: \"192.168.33.10\"\n  # config.vm.network \"public_network\"\nend\n```\n\n我们可以通过如下两种方式访问到\n\nhttp://localhost:8080  \nhttp://192.168.33.10\n\n基本上配置这两个已经足够满足开发人员的需求了。\n\n如果需要让其他机器也能访问，则需要将网络设置为public_network\n\n详情可参考[文档](https://www.vagrantup.com/docs/networking/)\n\n## 关闭虚拟机\nvagrant可以让我们根据不同的情况关闭虚拟机\n\n### vagrant suspend\n执行后将会保存当前虚拟机的状态，简单点理解就是将系统睡眠。\n\n启动时依旧执行`vagrant up`\n\n这种情况下的启动会很快，并且会恢复到suspend之前的系统状态。\n\n这种方式的缺点就是，suspend之后虚拟机依旧会占有宿主机器的内存和硬盘空间。\n\n### vagrant halt\n执行后会完全关闭虚拟机\n\n启动时依旧执行`vagrant up`\n\n这种方式的好处就是关闭后不占据宿主机器的内存和硬盘空间。\n\n缺点就是启动的需要会花费一些时间\n\n### vagrant destroy\n这种方式和vagrant halt很像，但是区别就是它还会释放所有资源，宿主机器恢复到一个干净没有任何虚拟机资源的环境下。\n\n缺点之一是在启动的时候也需要花费一些时间。  \n缺点之二就是需要重新re-provision一遍，就是重新运行之前我们说的脚本。  \n因为destroy后的状态已经是运行脚本前的状态了","slug":"vagrant配置指南#linux#$2016-09-29$","published":0,"date":"2017-08-03T10:21:24.108Z","updated":"2017-08-03T10:21:24.108Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96ct0004nou9le1b8uko","content":"<h1 id=\"安装入门\"><a href=\"#安装入门\" class=\"headerlink\" title=\"安装入门\"></a>安装入门</h1><h2 id=\"virtualbox\"><a href=\"#virtualbox\" class=\"headerlink\" title=\"virtualbox\"></a>virtualbox</h2><p>需要先安装<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">virtualbox</a></p>\n<p>安装完后，可以选择性的安装它的扩展，因为在后续步骤中，你安装的box可能是需要virtualbox装有该插件</p>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">插件下载页</a><br>安装<br>VirtualBox 5.1.6 Oracle VM VirtualBox Extension Pack</p>\n<p>下载后将其添加到virtualbox即可</p>\n<p>Mac的话，在<code>偏好设置/扩展</code>这里添加</p>\n<h2 id=\"安装vagrant\"><a href=\"#安装vagrant\" class=\"headerlink\" title=\"安装vagrant\"></a>安装vagrant</h2><p><a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"external\">vagrant</a></p>\n<p>如果已经安装过需要升级的，也是直接下载安装，安装时会直接覆盖旧的文件</p>\n<h2 id=\"生成Vagrantfile\"><a href=\"#生成Vagrantfile\" class=\"headerlink\" title=\"生成Vagrantfile\"></a>生成Vagrantfile</h2><p>选择一个目录，作为工程的根目录，在该目录生成Vagrantfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant init</div></pre></td></tr></table></figure>\n<h2 id=\"安装Box\"><a href=\"#安装Box\" class=\"headerlink\" title=\"安装Box\"></a>安装Box</h2><h3 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p>Box可以认为就是一个环境镜像，这个环境可以是ubuntu，可以是centos等等。</p>\n<p>因此根据自己的需求，安装不同的Box。</p>\n<p>可以到 <a href=\"https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&amp;sort=&amp;provider=&amp;q=\" target=\"_blank\" rel=\"external\">HashiCorp’s Atlas box catalog</a>这里查找需要的Box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant box add ubuntu/trusty64</div></pre></td></tr></table></figure>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>方法1在国内的话，在终端下载镜像会非常慢</p>\n<p>所以我们一般不会采取这种方式安装。</p>\n<p>而是直接去网上搜索镜像，利用迅雷将box下载下来，再进行安装。</p>\n<p>可以到这里搜索box<br><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">vagrantbox.es</a></p>\n<p>这里我们下载了debian-8.1-lxc-puppet.box，接下来往vagrant添加box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看box add的帮助文档</div><div class=\"line\">vagrant box add --help</div><div class=\"line\"></div><div class=\"line\"># 文档提示：</div><div class=\"line\"># vagrant box add [options] &lt;name, url, or path&gt;</div><div class=\"line\"># 即可以接具体的文件路径，name是添加到vagrant后的命名，便于管理</div><div class=\"line\"></div><div class=\"line\">vagrant box add debian /Users/seed/Public/box/debian-8.1-lxc-puppet.box</div><div class=\"line\"></div><div class=\"line\">vagrant box list</div><div class=\"line\"># 显示，说明已经添加进来</div><div class=\"line\">debian      (virtualbox, 0)</div></pre></td></tr></table></figure>\n<p>做完上述操作后，需要修改Vagrantfile。在该文件中找到下面的文字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.box = &quot;base&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>将<code>config.vm.box = &quot;base&quot;</code><br>修改为<br><code>config.vm.box = &quot;debian&quot;</code></p>\n<h2 id=\"启动和进入\"><a href=\"#启动和进入\" class=\"headerlink\" title=\"启动和进入\"></a>启动和进入</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up</div><div class=\"line\"># 一切正常后</div><div class=\"line\">vagrant ssh</div><div class=\"line\"></div><div class=\"line\">cd /vagrant</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>在/vagrant目录下可以看到，我们的Vagrantfile所在目录的所有文件，即它被共享到/vagrant这个目录了</p>\n<p><code>CTRL+D</code>可以退出回到宿主机器</p>\n<h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><h2 id=\"修改同步目录\"><a href=\"#修改同步目录\" class=\"headerlink\" title=\"修改同步目录\"></a>修改同步目录</h2><p>默认情况下，vagrant会将Vagrantfile所在目录的文件同步到/vagrant目录下，我们可以修改这个目录</p>\n<p>修改Vagrantfile文件中的<code>config.vm.synced_folder</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config.vm.synced_folder &quot;.&quot; &quot;/seed&quot;</div></pre></td></tr></table></figure>\n<p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant reload</div><div class=\"line\">vagrant ssh</div><div class=\"line\">cd /seed</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>便可以看到同步的目录了</p>\n<p>更多关于同步的，参考官网<a href=\"https://www.vagrantup.com/docs/synced-folders/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"PROVISIONING\"><a href=\"#PROVISIONING\" class=\"headerlink\" title=\"PROVISIONING\"></a>PROVISIONING</h2><p>有时我们会在多台机器使用vagrant安装一些linux环境，同时安装一些工具，如apache</p>\n<p>如果每台机器安装完环境后，都需要逐个去安装工具的话就太费事了</p>\n<p>vagrant提供了PROVISIONING机制，在vagrant安装完环境后自动安装其他的工具</p>\n<p>首先编写一个安装脚本bootstrap.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">apt-get update</div><div class=\"line\">apt-get install -y apache2</div><div class=\"line\">if ! [ -L /var/www ]; then</div><div class=\"line\">  rm -rf /var/www</div><div class=\"line\">  ln -fs /vagrant /var/www</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>修改Vagrantfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.box = &quot;debian&quot;</div><div class=\"line\">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这次在vagrant启动的时候，我们指定了脚本bootstrap.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up</div></pre></td></tr></table></figure>\n<p>这时在启动完后便会去执行脚本</p>\n<p>如果已经执行过<code>vagrant up</code>操作启动了虚拟机，可以使用reload命令来再次执行脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant reload --provision</div></pre></td></tr></table></figure>\n<p>更多关于PROVISIONING的，参考官网<a href=\"https://www.vagrantup.com/docs/provisioning/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>有时我们经常需要使用网络的方式访问我们的虚拟机</p>\n<p>如我们在虚拟机中测试部署了一个网站，监听80端口，我们想在宿主机器中访问它。</p>\n<p>修改Vagrantfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</div><div class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</div><div class=\"line\">  # config.vm.network &quot;public_network&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>我们可以通过如下两种方式访问到</p>\n<p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a><br><a href=\"http://192.168.33.10\" target=\"_blank\" rel=\"external\">http://192.168.33.10</a></p>\n<p>基本上配置这两个已经足够满足开发人员的需求了。</p>\n<p>如果需要让其他机器也能访问，则需要将网络设置为public_network</p>\n<p>详情可参考<a href=\"https://www.vagrantup.com/docs/networking/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"关闭虚拟机\"><a href=\"#关闭虚拟机\" class=\"headerlink\" title=\"关闭虚拟机\"></a>关闭虚拟机</h2><p>vagrant可以让我们根据不同的情况关闭虚拟机</p>\n<h3 id=\"vagrant-suspend\"><a href=\"#vagrant-suspend\" class=\"headerlink\" title=\"vagrant suspend\"></a>vagrant suspend</h3><p>执行后将会保存当前虚拟机的状态，简单点理解就是将系统睡眠。</p>\n<p>启动时依旧执行<code>vagrant up</code></p>\n<p>这种情况下的启动会很快，并且会恢复到suspend之前的系统状态。</p>\n<p>这种方式的缺点就是，suspend之后虚拟机依旧会占有宿主机器的内存和硬盘空间。</p>\n<h3 id=\"vagrant-halt\"><a href=\"#vagrant-halt\" class=\"headerlink\" title=\"vagrant halt\"></a>vagrant halt</h3><p>执行后会完全关闭虚拟机</p>\n<p>启动时依旧执行<code>vagrant up</code></p>\n<p>这种方式的好处就是关闭后不占据宿主机器的内存和硬盘空间。</p>\n<p>缺点就是启动的需要会花费一些时间</p>\n<h3 id=\"vagrant-destroy\"><a href=\"#vagrant-destroy\" class=\"headerlink\" title=\"vagrant destroy\"></a>vagrant destroy</h3><p>这种方式和vagrant halt很像，但是区别就是它还会释放所有资源，宿主机器恢复到一个干净没有任何虚拟机资源的环境下。</p>\n<p>缺点之一是在启动的时候也需要花费一些时间。<br>缺点之二就是需要重新re-provision一遍，就是重新运行之前我们说的脚本。<br>因为destroy后的状态已经是运行脚本前的状态了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装入门\"><a href=\"#安装入门\" class=\"headerlink\" title=\"安装入门\"></a>安装入门</h1><h2 id=\"virtualbox\"><a href=\"#virtualbox\" class=\"headerlink\" title=\"virtualbox\"></a>virtualbox</h2><p>需要先安装<a href=\"https://www.virtualbox.org/\" target=\"_blank\" rel=\"external\">virtualbox</a></p>\n<p>安装完后，可以选择性的安装它的扩展，因为在后续步骤中，你安装的box可能是需要virtualbox装有该插件</p>\n<p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"external\">插件下载页</a><br>安装<br>VirtualBox 5.1.6 Oracle VM VirtualBox Extension Pack</p>\n<p>下载后将其添加到virtualbox即可</p>\n<p>Mac的话，在<code>偏好设置/扩展</code>这里添加</p>\n<h2 id=\"安装vagrant\"><a href=\"#安装vagrant\" class=\"headerlink\" title=\"安装vagrant\"></a>安装vagrant</h2><p><a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"external\">vagrant</a></p>\n<p>如果已经安装过需要升级的，也是直接下载安装，安装时会直接覆盖旧的文件</p>\n<h2 id=\"生成Vagrantfile\"><a href=\"#生成Vagrantfile\" class=\"headerlink\" title=\"生成Vagrantfile\"></a>生成Vagrantfile</h2><p>选择一个目录，作为工程的根目录，在该目录生成Vagrantfile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant init</div></pre></td></tr></table></figure>\n<h2 id=\"安装Box\"><a href=\"#安装Box\" class=\"headerlink\" title=\"安装Box\"></a>安装Box</h2><h3 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3><p>Box可以认为就是一个环境镜像，这个环境可以是ubuntu，可以是centos等等。</p>\n<p>因此根据自己的需求，安装不同的Box。</p>\n<p>可以到 <a href=\"https://atlas.hashicorp.com/boxes/search?utf8=%E2%9C%93&amp;sort=&amp;provider=&amp;q=\" target=\"_blank\" rel=\"external\">HashiCorp’s Atlas box catalog</a>这里查找需要的Box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant box add ubuntu/trusty64</div></pre></td></tr></table></figure>\n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3><p>方法1在国内的话，在终端下载镜像会非常慢</p>\n<p>所以我们一般不会采取这种方式安装。</p>\n<p>而是直接去网上搜索镜像，利用迅雷将box下载下来，再进行安装。</p>\n<p>可以到这里搜索box<br><a href=\"http://www.vagrantbox.es/\" target=\"_blank\" rel=\"external\">vagrantbox.es</a></p>\n<p>这里我们下载了debian-8.1-lxc-puppet.box，接下来往vagrant添加box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看box add的帮助文档</div><div class=\"line\">vagrant box add --help</div><div class=\"line\"></div><div class=\"line\"># 文档提示：</div><div class=\"line\"># vagrant box add [options] &lt;name, url, or path&gt;</div><div class=\"line\"># 即可以接具体的文件路径，name是添加到vagrant后的命名，便于管理</div><div class=\"line\"></div><div class=\"line\">vagrant box add debian /Users/seed/Public/box/debian-8.1-lxc-puppet.box</div><div class=\"line\"></div><div class=\"line\">vagrant box list</div><div class=\"line\"># 显示，说明已经添加进来</div><div class=\"line\">debian      (virtualbox, 0)</div></pre></td></tr></table></figure>\n<p>做完上述操作后，需要修改Vagrantfile。在该文件中找到下面的文字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.box = &quot;base&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>将<code>config.vm.box = &quot;base&quot;</code><br>修改为<br><code>config.vm.box = &quot;debian&quot;</code></p>\n<h2 id=\"启动和进入\"><a href=\"#启动和进入\" class=\"headerlink\" title=\"启动和进入\"></a>启动和进入</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up</div><div class=\"line\"># 一切正常后</div><div class=\"line\">vagrant ssh</div><div class=\"line\"></div><div class=\"line\">cd /vagrant</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>在/vagrant目录下可以看到，我们的Vagrantfile所在目录的所有文件，即它被共享到/vagrant这个目录了</p>\n<p><code>CTRL+D</code>可以退出回到宿主机器</p>\n<h1 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h1><h2 id=\"修改同步目录\"><a href=\"#修改同步目录\" class=\"headerlink\" title=\"修改同步目录\"></a>修改同步目录</h2><p>默认情况下，vagrant会将Vagrantfile所在目录的文件同步到/vagrant目录下，我们可以修改这个目录</p>\n<p>修改Vagrantfile文件中的<code>config.vm.synced_folder</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">config.vm.synced_folder &quot;.&quot; &quot;/seed&quot;</div></pre></td></tr></table></figure>\n<p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant reload</div><div class=\"line\">vagrant ssh</div><div class=\"line\">cd /seed</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>便可以看到同步的目录了</p>\n<p>更多关于同步的，参考官网<a href=\"https://www.vagrantup.com/docs/synced-folders/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"PROVISIONING\"><a href=\"#PROVISIONING\" class=\"headerlink\" title=\"PROVISIONING\"></a>PROVISIONING</h2><p>有时我们会在多台机器使用vagrant安装一些linux环境，同时安装一些工具，如apache</p>\n<p>如果每台机器安装完环境后，都需要逐个去安装工具的话就太费事了</p>\n<p>vagrant提供了PROVISIONING机制，在vagrant安装完环境后自动安装其他的工具</p>\n<p>首先编写一个安装脚本bootstrap.sh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">apt-get update</div><div class=\"line\">apt-get install -y apache2</div><div class=\"line\">if ! [ -L /var/www ]; then</div><div class=\"line\">  rm -rf /var/www</div><div class=\"line\">  ln -fs /vagrant /var/www</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<p>修改Vagrantfile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.box = &quot;debian&quot;</div><div class=\"line\">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这次在vagrant启动的时候，我们指定了脚本bootstrap.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant up</div></pre></td></tr></table></figure>\n<p>这时在启动完后便会去执行脚本</p>\n<p>如果已经执行过<code>vagrant up</code>操作启动了虚拟机，可以使用reload命令来再次执行脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vagrant reload --provision</div></pre></td></tr></table></figure>\n<p>更多关于PROVISIONING的，参考官网<a href=\"https://www.vagrantup.com/docs/provisioning/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><p>有时我们经常需要使用网络的方式访问我们的虚拟机</p>\n<p>如我们在虚拟机中测试部署了一个网站，监听80端口，我们想在宿主机器中访问它。</p>\n<p>修改Vagrantfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</div><div class=\"line\">  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</div><div class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</div><div class=\"line\">  # config.vm.network &quot;public_network&quot;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>我们可以通过如下两种方式访问到</p>\n<p><a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a><br><a href=\"http://192.168.33.10\" target=\"_blank\" rel=\"external\">http://192.168.33.10</a></p>\n<p>基本上配置这两个已经足够满足开发人员的需求了。</p>\n<p>如果需要让其他机器也能访问，则需要将网络设置为public_network</p>\n<p>详情可参考<a href=\"https://www.vagrantup.com/docs/networking/\" target=\"_blank\" rel=\"external\">文档</a></p>\n<h2 id=\"关闭虚拟机\"><a href=\"#关闭虚拟机\" class=\"headerlink\" title=\"关闭虚拟机\"></a>关闭虚拟机</h2><p>vagrant可以让我们根据不同的情况关闭虚拟机</p>\n<h3 id=\"vagrant-suspend\"><a href=\"#vagrant-suspend\" class=\"headerlink\" title=\"vagrant suspend\"></a>vagrant suspend</h3><p>执行后将会保存当前虚拟机的状态，简单点理解就是将系统睡眠。</p>\n<p>启动时依旧执行<code>vagrant up</code></p>\n<p>这种情况下的启动会很快，并且会恢复到suspend之前的系统状态。</p>\n<p>这种方式的缺点就是，suspend之后虚拟机依旧会占有宿主机器的内存和硬盘空间。</p>\n<h3 id=\"vagrant-halt\"><a href=\"#vagrant-halt\" class=\"headerlink\" title=\"vagrant halt\"></a>vagrant halt</h3><p>执行后会完全关闭虚拟机</p>\n<p>启动时依旧执行<code>vagrant up</code></p>\n<p>这种方式的好处就是关闭后不占据宿主机器的内存和硬盘空间。</p>\n<p>缺点就是启动的需要会花费一些时间</p>\n<h3 id=\"vagrant-destroy\"><a href=\"#vagrant-destroy\" class=\"headerlink\" title=\"vagrant destroy\"></a>vagrant destroy</h3><p>这种方式和vagrant halt很像，但是区别就是它还会释放所有资源，宿主机器恢复到一个干净没有任何虚拟机资源的环境下。</p>\n<p>缺点之一是在启动的时候也需要花费一些时间。<br>缺点之二就是需要重新re-provision一遍，就是重新运行之前我们说的脚本。<br>因为destroy后的状态已经是运行脚本前的状态了</p>\n"},{"title":"vue","date":"2017-01-09T01:24:59.000Z","_content":"\nhttps://molunerfinn.com/Vue+Koa/\n\nhttp://www.cnblogs.com/keepfool/p/5690366.html\n\n\n\n缓存手段\n\nhttps://github.com/mtjs/mt/blob/master/readme.md\n\nhttps://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B\n\n\n\n\n\nhttp://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\n","source":"_drafts/vue.md","raw":"\ntitle: vue\ndate: 2017-01-09 09:24:59\n---\n\nhttps://molunerfinn.com/Vue+Koa/\n\nhttp://www.cnblogs.com/keepfool/p/5690366.html\n\n\n\n缓存手段\n\nhttps://github.com/mtjs/mt/blob/master/readme.md\n\nhttps://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B\n\n\n\n\n\nhttp://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\n","slug":"vue","published":0,"updated":"2017-08-03T10:21:24.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96cv0005nou9oq237cj1","content":"<p><a href=\"https://molunerfinn.com/Vue+Koa/\" target=\"_blank\" rel=\"external\">https://molunerfinn.com/Vue+Koa/</a></p>\n<p><a href=\"http://www.cnblogs.com/keepfool/p/5690366.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/keepfool/p/5690366.html</a></p>\n<p>缓存手段</p>\n<p><a href=\"https://github.com/mtjs/mt/blob/master/readme.md\" target=\"_blank\" rel=\"external\">https://github.com/mtjs/mt/blob/master/readme.md</a></p>\n<p><a href=\"https://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"external\">https://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B</a></p>\n<p><a href=\"http://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"external\">http://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://molunerfinn.com/Vue+Koa/\" target=\"_blank\" rel=\"external\">https://molunerfinn.com/Vue+Koa/</a></p>\n<p><a href=\"http://www.cnblogs.com/keepfool/p/5690366.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/keepfool/p/5690366.html</a></p>\n<p>缓存手段</p>\n<p><a href=\"https://github.com/mtjs/mt/blob/master/readme.md\" target=\"_blank\" rel=\"external\">https://github.com/mtjs/mt/blob/master/readme.md</a></p>\n<p><a href=\"https://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B\" target=\"_blank\" rel=\"external\">https://elemefe.github.io/bowl/#/zh-cn#%E7%A4%BA%E4%BE%8B</a></p>\n<p><a href=\"http://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/\" target=\"_blank\" rel=\"external\">http://garychang.cn/2017/01/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</a></p>\n"},{"_content":"## nginx中http模块相关属性的配置\n\n```nginx\nhttp {\n  # 引用其他配置文件 \n  include conf/*.conf;\n  # 默认的文件类型。当文件类型为定义时使用这种方式\n  # 例如如果没有配置php环境，nginx不会去解析它，此时访问php文件会出现下载窗口 \n  default_type application/octet-stream;\n  # 指定日志的输出格式。 main为日志输出格式名称，可在access_log中引用\n  log_format main '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '\"$gzip_ratio\"';\n  log_format download '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\"'\n    '\"$http_range\" \"$sent_http_content_range\"';\n  # 访问日志 存储的位置和所使用的日志格式\n  access_log logs/www.test_nginx.access.log main;\n\n  # 允许客户端请求的最大单个文件字节数\n  client_max_body_size 20m;\n  # 指定客户端请求头的headerbuffer大小\n  client_header_buffer_size 32k;\n  # 指定客户端请求中较大的消息头的缓存最大数量和大小。 4个128k\n  large_client_header_buffers 4 128k;\n  # 开启高效文件传输模式\n  sendfile on;\n  # 防止网络阻塞\n  tcp_nopush on;\n  tcp_nodelay on;\n  # 设置客户端连接保持活动的超时时间\n  keeplive_timeout 60;\n  # 设置客户端请求头的超时时间。超时将返回Request time out(408)\n  client_header_timeout 10;\n  # 设置客户端请求主体超时时间。超时将返回Request time out(408)\n  client_body_timeout 10;\n  # 指定响应客户端的超时时间。\n  send_timeout 10;\n\n  # 开启gzip模块\n  gzip on;\n  # 允许压缩的页面最小字节数，该数从header头的Content_Length中获取。\n  # 默认值是0。建议设置大于1KB，小于1KB可能会越压缩越大。\n  gzip_min_length 1k;\n  # 申请4个单位为16KB的内存作为压缩结果流缓存。\n  gzip_buffers 4 16k;\n  # 设置识别http协议版本\n  gzip_http_version 1.1;\n  # 指定压缩比。 \n  # 1表示压缩比最小，处理速度最快；\n  # 9表示压缩比最大，传输速度最快，但处理速度最慢，也比较消耗CPU资源\n  gzip_comp_level 2;\n  # 指定压缩类型。无论是否指定，text/html都会被压缩\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  # 让前端的缓存服务器缓存经过gzip压缩的页面\n  gzip_vary on;\n\n  # 虚拟主机配置。后面会详细解释\n  server {\n    ...\n  }\n}\n```\n\n## 关于日志配置\n### log_format 配置日志格式\n语法： log_format name string ...  \n配置段：http\n\nnginx有个默认的日志格式，名称为combined，格式如下：\n\n```nginx\nlog_format combined '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" ';\n```\n\n如果nginx作为反向代理，此时web服务器无法获得客户端真实的ip地址。$remote_addr获取反向代理的ip地址。\n\n反向代理的服务器在转发请求的Http头信息中，可以增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址。\n\n关于X-Forwarded-For可以参考这篇[文章](https://imququ.com/post/x-forwarded-for-header-in-http.html)\n\n此时我们可以定义如下日志格式：\n\n```nginx\nlog_format proxy '$http_x_forward_for - $remote_user [$time_local] '\n    '\"$request\" $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" ';\n```\n\n日志格式可使用的变量如下：\n```  \n$remote_addr，$http_x_forward_for用于记录用户的ip地址\n$remote_user 客户端用户名称\n$request 请求的URL和HTTP协议名称\n$status 请求状态\n$body_bytes_sent 发送给客户端的字节数,不包括响应头的大小\n$bytes_sent 发送给客户端的总字节数。\n$connection 连接的序列号。\n$connection_requests 当前通过一个连接获得的请求数量。\n$msec 日志写入时间。单位为秒,精度是毫秒\n$pipe 如果请求是通过 HTTP 流水线(pipelined)发送,pipe 值为“p”,否则为“.”\n$http_referer 记录从哪个页面链接访问过来的\n$http_user_agent 记录客户端浏览器相关信息\n$request_length 请求的长度(包括请求行,请求头和请求正文)。\n$request_time 请求处理时间,单位为秒,精度毫秒; 从读入客户端的第一个字节开始,直到把最后一个字符发送 给客户端后进行日志写入为止。\n$time_iso8601 ISO8601 标准格式下的本地时间。\n$time_local 通用日志格式下的本地时间\n```\n\n### access_log 访问日志\n语法: access_log path [format [buffer=size [flush=time]]]  \n默认值: access_log logs/access.log combined;  \n配置段: http, server, location, if in location, limit_except\n\ngzip 压缩等级。  \nbuffer 设置内存缓存区大小。  \nflush 保存在缓存区中的最长时间。  \n不记录日志:access_log off\n\n### error_log 配置错误日志\n语法: error_log file | stderr | syslog:server=address[,parameter=value] [debug | info | notice | warn | error | crit | alert | emerg];  \n默认值: error_log logs/error.log error;  \n配置段: main, http, server, location\n\n### rewrite_log 记录重写日志\n\n语法: rewrite_log on | off;  \n默认值: rewrite_log off;  \n配置段: http, server, location, if  \n启用时将在 error log 中记录 notice 级别的重写日志\n\n## 虚拟主机配置\n一般来说，我们会将虚拟主机的配置写在另外一个独立的配置文件中，并在nginx.conf中使用include引用\n\n```nginx\n# 定义虚拟主机开始的关键字\nserver {\n  # 虚拟主机端口\n  listen 80;\n  # 指定ip或者域名，多个域名用空格隔开\n  server_name 192.168.12.188 www.test.net;\n  # 设定访问的默认首页\n  index index.html index.htm;\n  # 指定虚拟主机的网页根目录\n  root /www/wwwroot/wwww.test.net;\n  # 网页默认的编码格式\n  charset utf8;\n  # 此虚拟主机的访问日志的存放路径\n  access_log logs/www.test.net.access.log main\n\n  # url匹配设置，后续会讲\n  location\n}\n```\n\n## location配置\n语法规则：location [= | ~ | ~* | ^~] /uri/ {...}\n\n1. =为精确匹配，优先级最高的匹配\n2. ~区分大小写的正则匹配\n3. ~*不区分大小写的正则匹配\n4. ^~普通字符匹配，如果此选项匹配成功，忽略其他匹配选项，一般用来匹配目录 \n5. /通用匹配，匹配任何请求，因为所有请求都是以\"/\"开始\n\n匹配顺序\n1. 首先进行精确匹配，匹配成功则停止其他匹配\n2. ^~匹配\n3. 最后是通用匹配/\n\n例子A\n\n```nginx\n# A\nlocation = / {...}\n\n# B\nlocation / {...}\n\n# C\nlocation ^~ /image/ {...}\n\n# D\nlocation ~* \\.(gif|jpg|jpeg)$ {...}\n```\n\n请求url\n```\n# 匹配A\n/\n\n# 匹配B\n/hello/world\n\n# 匹配C\n/image/hello.gif\n\n# 匹配D\n/hello/world.jpg\n```\n\n例子B\n\n```nginx\n# A\nlocation / {\n  echo \"/\"; //需要安装 echo 模块才行,这边大家可以改成各自的规则\n}\n\n#B\nlocation = / {...}\n\n# C\nlocation = /hello {...}\n\n# D\nlocation ~ \\.(gif|jpg|png|js|css)$ {...}\n\n# E\nlocation ~* \\.png$ {...}\n\n# F\nlocation ^~ /static/ {...}\n```\n\n请求url\n```\n# 完全匹配 B\ncurl http://www.test.com/\n\n# 完全匹配C\ncurl http://www.test.com/hello\n\n# 匹配E\ncurl http://www.test.com/world/test.PNG\n\n# 匹配F\ncurl http://www.test.com/static/test.jpg\n```\n\n### location中root和alias的差异\n\n```nginx\nlocation ~ ^/weblogs/ {\n  root /data/weblogs/www.ttlsa.com; \n}\n```\n此时若请求为：  \n/weblogs/httplogs/www.ttlsa.com-access.log  \nweb服务器将会返回服务器上的/data/weblogs/www.ttlsa.com//weblogs/httplogs/www.ttlsa.com-access.log文件\n\n```nginx\nlocation ^~ /binapp/ {\n  alias /data/statics/bin/apps/ \n}\n```\n此时若请求为：  \n/binapp/a.ttlsa.com/favicon  \nweb服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon文件  \n即会舍弃location后的路径\n\n### 利用location也可以实现访问控制\n使用ngx_http_access_module可以实现访问控制\n\n限制某些ip的访问\n\n```nginx\nlocation / {\n  deny 192.168.66.90;\n  allow 192.168.66.91;\n  deny all;\n}\n```\n\n限制访问某个目录\n\n```nginx\nlocation ~ ^/WEB-INF/ {\n  deny all;\n}\n```\n\n禁止访问doc和txt文件\n\n```nginx\nlocation ~* \\.(txt|doc)$ {\n  root /data/www/wwwroot;\n  deny all;\n}\n```\n\n### 请求代理\n经常会有访问不同域名的将请求代理到不同服务器上\n\n例如\n\n一个网站有两个域名，分别是www.hello.com和w.hello.com。  \n要实现当访问www.hello.com是通过nginx代理到192.168.66.90的8080端口的web上。  \n当访问www.hello.com/admin是通过nginx代理到192.168.66.90的8080端口的admin上。  \n当访问w.hello.com是通过nginx代理到192.168.66.90的8080端口的wap上。\n\n```nginx\nserver {\n  listen 80;\n  server_name www.hello.com;\n  location / {\n    proxy_pass 192.168.66.90:8080/web/;\n  }\n  location /admin {\n    proxy_pass 192.168.66.90:8080/admin;\n  }\n}\n\nserver {\n  listen 80;\n  server_name w.hello.com;\n  location / {\n    proxy_pass 192.168.66.90:8080/wap/;\n  }\n}\n\n```\n\n## 重写规则rewrite\n可根据一定的规则，由一个location跳转到另外一个location\n\n例如当访问www.helloworld.com时，自动转向www.hw.com\n\n```nginx\nserver {\n  server_name www.helloworld.com;\n  rewrite ^/(.*)$ http://www.hw.com/$1 permanent;\n}\n\n# or\nserver {\n  server_name www.hw.com www.helloworld.com;\n  if($host != 'www.hw.com') {\n    rewrite ^/(.*)$ http://www.hw.com/$1 permanent;\n  }\n}\n```\n\n### if命令\n判断指令，可以使用如下判断\n\n1. 一个变量的名称:空字符传”“或者一些“0”开始的字符串为 false。\n2. 字符串比较:使用=或!=运算符\n3. 正则表达式匹配:使用~(区分大小写)和~*(不区分大小写),取反运算!~和!~*。 4. 文件是否存在:使用-f 和!-f 操作符\n5. 目录是否存在:使用-d 和!-d 操作符\n7. 文件、目录、符号链接是否存在:使用-e 和!-e 操作符\n8. 文件是否可执行:使用-x 和!-x 操作符\n\n### rewrite\n语法:rewrite regex replacement flag  \n默认值:none  \n使用字段:server, location, if  \nlast – 停止处理重写模块指令,之后搜索 location 与更改后的 URI 匹配。  \nbreak – 完成重写指令。  \nredirect – 返回 302 临时重定向,如果替换字段用 http://开头则被使用。  \npermanent – 返回 301 永久重定向。\n\n### set\n可用于设置一些变量\n\n```nginx\nserver {\n  server_name www.hw.com www.helloworld.com;\n  set $query $query_string;\n  rewrite /dede /wordpress?$query\n}\n```\n\n### break\n完成当前设置的规则后，不在匹配后面的重写规则\n\n```nginx\n# or\nserver {\n  server_name www.hw.com www.helloworld.com;\n  if($host != 'www.hw.com') {\n    rewrite ^/(.*)$ http://www.hw.com/error.txt break;\n  }\n\n  rewrite ^/(.*) http://www.hw.cn/$1 permanent\n}\n\n```\n\n## 负载均衡\n通过upstream命令可以实现负载均衡\n\n```nginx\nupstream myserver {\n  server 192.168.12.181:80 weight=3 max_fails=3 fail_timeout=20s;\n  server 192.168.12.182:80 weight=1 max_fails=3 fail_timeout=20s;\n  server 192.168.12.183:80 weight=4 max_fails=3 fail_timeout=20s;\n}\n\nserver {\n  listen 80;\n  server_name www.hello.com;\n  index index.html;\n  root /hello/wwwroot/;\n\n  location / {\n    proxy_passs http://myserver;\n    proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;\n    include /opt/nginx/conf/proxy.conf;\n  }\n}\n```\n\n其中weight为负载均衡的调度算法，还有如下几种算法\n\n轮询（默认算法）  \nweight，权值，值越大分配到的概率越大  \nip_hash，按ip的哈希结果分配，来自同一台ip的客户端可以固定访问一台机器  \nfair，根据页面和加载的时间长短智能的进行负载均衡。需要下载upstream_fair模块  \nurl_hash，按访问url的哈希结果来分配请求。需要安装hash软件包。\n\nmax_fails和fail_timeout为服务器在负载均衡调度中的状态，还有如下集中状态\n\ndown，当前server暂时不参与负载均衡  \nbackup，备份机器。当非backup机器出现故障或者忙的时候，才会请求backup机器  \nmax_fails，允许请求失败的次数，默认为1。当超过最大次数，返回proxu_next_upstream模块定义的错误  \nfail_timeoout 在经历了max_fails失败后，暂停服务的时间。\n\n这里配置了proxy_next_upstream会将500、502、503等错误发生时会自动将请求转移到负载均衡中的另外一台机器。","source":"_drafts/nginx中关于http模块的配置#nginx#$2016-09-15$.md","raw":"## nginx中http模块相关属性的配置\n\n```nginx\nhttp {\n  # 引用其他配置文件 \n  include conf/*.conf;\n  # 默认的文件类型。当文件类型为定义时使用这种方式\n  # 例如如果没有配置php环境，nginx不会去解析它，此时访问php文件会出现下载窗口 \n  default_type application/octet-stream;\n  # 指定日志的输出格式。 main为日志输出格式名称，可在access_log中引用\n  log_format main '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '\"$gzip_ratio\"';\n  log_format download '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\"'\n    '\"$http_range\" \"$sent_http_content_range\"';\n  # 访问日志 存储的位置和所使用的日志格式\n  access_log logs/www.test_nginx.access.log main;\n\n  # 允许客户端请求的最大单个文件字节数\n  client_max_body_size 20m;\n  # 指定客户端请求头的headerbuffer大小\n  client_header_buffer_size 32k;\n  # 指定客户端请求中较大的消息头的缓存最大数量和大小。 4个128k\n  large_client_header_buffers 4 128k;\n  # 开启高效文件传输模式\n  sendfile on;\n  # 防止网络阻塞\n  tcp_nopush on;\n  tcp_nodelay on;\n  # 设置客户端连接保持活动的超时时间\n  keeplive_timeout 60;\n  # 设置客户端请求头的超时时间。超时将返回Request time out(408)\n  client_header_timeout 10;\n  # 设置客户端请求主体超时时间。超时将返回Request time out(408)\n  client_body_timeout 10;\n  # 指定响应客户端的超时时间。\n  send_timeout 10;\n\n  # 开启gzip模块\n  gzip on;\n  # 允许压缩的页面最小字节数，该数从header头的Content_Length中获取。\n  # 默认值是0。建议设置大于1KB，小于1KB可能会越压缩越大。\n  gzip_min_length 1k;\n  # 申请4个单位为16KB的内存作为压缩结果流缓存。\n  gzip_buffers 4 16k;\n  # 设置识别http协议版本\n  gzip_http_version 1.1;\n  # 指定压缩比。 \n  # 1表示压缩比最小，处理速度最快；\n  # 9表示压缩比最大，传输速度最快，但处理速度最慢，也比较消耗CPU资源\n  gzip_comp_level 2;\n  # 指定压缩类型。无论是否指定，text/html都会被压缩\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  # 让前端的缓存服务器缓存经过gzip压缩的页面\n  gzip_vary on;\n\n  # 虚拟主机配置。后面会详细解释\n  server {\n    ...\n  }\n}\n```\n\n## 关于日志配置\n### log_format 配置日志格式\n语法： log_format name string ...  \n配置段：http\n\nnginx有个默认的日志格式，名称为combined，格式如下：\n\n```nginx\nlog_format combined '$remote_addr - $remote_user [$time_local] '\n    '\"$request\" $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" ';\n```\n\n如果nginx作为反向代理，此时web服务器无法获得客户端真实的ip地址。$remote_addr获取反向代理的ip地址。\n\n反向代理的服务器在转发请求的Http头信息中，可以增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址。\n\n关于X-Forwarded-For可以参考这篇[文章](https://imququ.com/post/x-forwarded-for-header-in-http.html)\n\n此时我们可以定义如下日志格式：\n\n```nginx\nlog_format proxy '$http_x_forward_for - $remote_user [$time_local] '\n    '\"$request\" $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" ';\n```\n\n日志格式可使用的变量如下：\n```  \n$remote_addr，$http_x_forward_for用于记录用户的ip地址\n$remote_user 客户端用户名称\n$request 请求的URL和HTTP协议名称\n$status 请求状态\n$body_bytes_sent 发送给客户端的字节数,不包括响应头的大小\n$bytes_sent 发送给客户端的总字节数。\n$connection 连接的序列号。\n$connection_requests 当前通过一个连接获得的请求数量。\n$msec 日志写入时间。单位为秒,精度是毫秒\n$pipe 如果请求是通过 HTTP 流水线(pipelined)发送,pipe 值为“p”,否则为“.”\n$http_referer 记录从哪个页面链接访问过来的\n$http_user_agent 记录客户端浏览器相关信息\n$request_length 请求的长度(包括请求行,请求头和请求正文)。\n$request_time 请求处理时间,单位为秒,精度毫秒; 从读入客户端的第一个字节开始,直到把最后一个字符发送 给客户端后进行日志写入为止。\n$time_iso8601 ISO8601 标准格式下的本地时间。\n$time_local 通用日志格式下的本地时间\n```\n\n### access_log 访问日志\n语法: access_log path [format [buffer=size [flush=time]]]  \n默认值: access_log logs/access.log combined;  \n配置段: http, server, location, if in location, limit_except\n\ngzip 压缩等级。  \nbuffer 设置内存缓存区大小。  \nflush 保存在缓存区中的最长时间。  \n不记录日志:access_log off\n\n### error_log 配置错误日志\n语法: error_log file | stderr | syslog:server=address[,parameter=value] [debug | info | notice | warn | error | crit | alert | emerg];  \n默认值: error_log logs/error.log error;  \n配置段: main, http, server, location\n\n### rewrite_log 记录重写日志\n\n语法: rewrite_log on | off;  \n默认值: rewrite_log off;  \n配置段: http, server, location, if  \n启用时将在 error log 中记录 notice 级别的重写日志\n\n## 虚拟主机配置\n一般来说，我们会将虚拟主机的配置写在另外一个独立的配置文件中，并在nginx.conf中使用include引用\n\n```nginx\n# 定义虚拟主机开始的关键字\nserver {\n  # 虚拟主机端口\n  listen 80;\n  # 指定ip或者域名，多个域名用空格隔开\n  server_name 192.168.12.188 www.test.net;\n  # 设定访问的默认首页\n  index index.html index.htm;\n  # 指定虚拟主机的网页根目录\n  root /www/wwwroot/wwww.test.net;\n  # 网页默认的编码格式\n  charset utf8;\n  # 此虚拟主机的访问日志的存放路径\n  access_log logs/www.test.net.access.log main\n\n  # url匹配设置，后续会讲\n  location\n}\n```\n\n## location配置\n语法规则：location [= | ~ | ~* | ^~] /uri/ {...}\n\n1. =为精确匹配，优先级最高的匹配\n2. ~区分大小写的正则匹配\n3. ~*不区分大小写的正则匹配\n4. ^~普通字符匹配，如果此选项匹配成功，忽略其他匹配选项，一般用来匹配目录 \n5. /通用匹配，匹配任何请求，因为所有请求都是以\"/\"开始\n\n匹配顺序\n1. 首先进行精确匹配，匹配成功则停止其他匹配\n2. ^~匹配\n3. 最后是通用匹配/\n\n例子A\n\n```nginx\n# A\nlocation = / {...}\n\n# B\nlocation / {...}\n\n# C\nlocation ^~ /image/ {...}\n\n# D\nlocation ~* \\.(gif|jpg|jpeg)$ {...}\n```\n\n请求url\n```\n# 匹配A\n/\n\n# 匹配B\n/hello/world\n\n# 匹配C\n/image/hello.gif\n\n# 匹配D\n/hello/world.jpg\n```\n\n例子B\n\n```nginx\n# A\nlocation / {\n  echo \"/\"; //需要安装 echo 模块才行,这边大家可以改成各自的规则\n}\n\n#B\nlocation = / {...}\n\n# C\nlocation = /hello {...}\n\n# D\nlocation ~ \\.(gif|jpg|png|js|css)$ {...}\n\n# E\nlocation ~* \\.png$ {...}\n\n# F\nlocation ^~ /static/ {...}\n```\n\n请求url\n```\n# 完全匹配 B\ncurl http://www.test.com/\n\n# 完全匹配C\ncurl http://www.test.com/hello\n\n# 匹配E\ncurl http://www.test.com/world/test.PNG\n\n# 匹配F\ncurl http://www.test.com/static/test.jpg\n```\n\n### location中root和alias的差异\n\n```nginx\nlocation ~ ^/weblogs/ {\n  root /data/weblogs/www.ttlsa.com; \n}\n```\n此时若请求为：  \n/weblogs/httplogs/www.ttlsa.com-access.log  \nweb服务器将会返回服务器上的/data/weblogs/www.ttlsa.com//weblogs/httplogs/www.ttlsa.com-access.log文件\n\n```nginx\nlocation ^~ /binapp/ {\n  alias /data/statics/bin/apps/ \n}\n```\n此时若请求为：  \n/binapp/a.ttlsa.com/favicon  \nweb服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon文件  \n即会舍弃location后的路径\n\n### 利用location也可以实现访问控制\n使用ngx_http_access_module可以实现访问控制\n\n限制某些ip的访问\n\n```nginx\nlocation / {\n  deny 192.168.66.90;\n  allow 192.168.66.91;\n  deny all;\n}\n```\n\n限制访问某个目录\n\n```nginx\nlocation ~ ^/WEB-INF/ {\n  deny all;\n}\n```\n\n禁止访问doc和txt文件\n\n```nginx\nlocation ~* \\.(txt|doc)$ {\n  root /data/www/wwwroot;\n  deny all;\n}\n```\n\n### 请求代理\n经常会有访问不同域名的将请求代理到不同服务器上\n\n例如\n\n一个网站有两个域名，分别是www.hello.com和w.hello.com。  \n要实现当访问www.hello.com是通过nginx代理到192.168.66.90的8080端口的web上。  \n当访问www.hello.com/admin是通过nginx代理到192.168.66.90的8080端口的admin上。  \n当访问w.hello.com是通过nginx代理到192.168.66.90的8080端口的wap上。\n\n```nginx\nserver {\n  listen 80;\n  server_name www.hello.com;\n  location / {\n    proxy_pass 192.168.66.90:8080/web/;\n  }\n  location /admin {\n    proxy_pass 192.168.66.90:8080/admin;\n  }\n}\n\nserver {\n  listen 80;\n  server_name w.hello.com;\n  location / {\n    proxy_pass 192.168.66.90:8080/wap/;\n  }\n}\n\n```\n\n## 重写规则rewrite\n可根据一定的规则，由一个location跳转到另外一个location\n\n例如当访问www.helloworld.com时，自动转向www.hw.com\n\n```nginx\nserver {\n  server_name www.helloworld.com;\n  rewrite ^/(.*)$ http://www.hw.com/$1 permanent;\n}\n\n# or\nserver {\n  server_name www.hw.com www.helloworld.com;\n  if($host != 'www.hw.com') {\n    rewrite ^/(.*)$ http://www.hw.com/$1 permanent;\n  }\n}\n```\n\n### if命令\n判断指令，可以使用如下判断\n\n1. 一个变量的名称:空字符传”“或者一些“0”开始的字符串为 false。\n2. 字符串比较:使用=或!=运算符\n3. 正则表达式匹配:使用~(区分大小写)和~*(不区分大小写),取反运算!~和!~*。 4. 文件是否存在:使用-f 和!-f 操作符\n5. 目录是否存在:使用-d 和!-d 操作符\n7. 文件、目录、符号链接是否存在:使用-e 和!-e 操作符\n8. 文件是否可执行:使用-x 和!-x 操作符\n\n### rewrite\n语法:rewrite regex replacement flag  \n默认值:none  \n使用字段:server, location, if  \nlast – 停止处理重写模块指令,之后搜索 location 与更改后的 URI 匹配。  \nbreak – 完成重写指令。  \nredirect – 返回 302 临时重定向,如果替换字段用 http://开头则被使用。  \npermanent – 返回 301 永久重定向。\n\n### set\n可用于设置一些变量\n\n```nginx\nserver {\n  server_name www.hw.com www.helloworld.com;\n  set $query $query_string;\n  rewrite /dede /wordpress?$query\n}\n```\n\n### break\n完成当前设置的规则后，不在匹配后面的重写规则\n\n```nginx\n# or\nserver {\n  server_name www.hw.com www.helloworld.com;\n  if($host != 'www.hw.com') {\n    rewrite ^/(.*)$ http://www.hw.com/error.txt break;\n  }\n\n  rewrite ^/(.*) http://www.hw.cn/$1 permanent\n}\n\n```\n\n## 负载均衡\n通过upstream命令可以实现负载均衡\n\n```nginx\nupstream myserver {\n  server 192.168.12.181:80 weight=3 max_fails=3 fail_timeout=20s;\n  server 192.168.12.182:80 weight=1 max_fails=3 fail_timeout=20s;\n  server 192.168.12.183:80 weight=4 max_fails=3 fail_timeout=20s;\n}\n\nserver {\n  listen 80;\n  server_name www.hello.com;\n  index index.html;\n  root /hello/wwwroot/;\n\n  location / {\n    proxy_passs http://myserver;\n    proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;\n    include /opt/nginx/conf/proxy.conf;\n  }\n}\n```\n\n其中weight为负载均衡的调度算法，还有如下几种算法\n\n轮询（默认算法）  \nweight，权值，值越大分配到的概率越大  \nip_hash，按ip的哈希结果分配，来自同一台ip的客户端可以固定访问一台机器  \nfair，根据页面和加载的时间长短智能的进行负载均衡。需要下载upstream_fair模块  \nurl_hash，按访问url的哈希结果来分配请求。需要安装hash软件包。\n\nmax_fails和fail_timeout为服务器在负载均衡调度中的状态，还有如下集中状态\n\ndown，当前server暂时不参与负载均衡  \nbackup，备份机器。当非backup机器出现故障或者忙的时候，才会请求backup机器  \nmax_fails，允许请求失败的次数，默认为1。当超过最大次数，返回proxu_next_upstream模块定义的错误  \nfail_timeoout 在经历了max_fails失败后，暂停服务的时间。\n\n这里配置了proxy_next_upstream会将500、502、503等错误发生时会自动将请求转移到负载均衡中的另外一台机器。","slug":"nginx中关于http模块的配置#nginx#$2016-09-15$","published":0,"date":"2017-08-03T10:21:24.108Z","updated":"2017-08-03T10:21:24.108Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96cx0006nou9t4d3aw74","content":"<h2 id=\"nginx中http模块相关属性的配置\"><a href=\"#nginx中http模块相关属性的配置\" class=\"headerlink\" title=\"nginx中http模块相关属性的配置\"></a>nginx中http模块相关属性的配置</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">http</span> &#123;</div><div class=\"line\">  <span class=\"comment\"># 引用其他配置文件 </span></div><div class=\"line\">  <span class=\"attribute\">include</span> conf/<span class=\"regexp\">*.conf</span>;</div><div class=\"line\">  <span class=\"comment\"># 默认的文件类型。当文件类型为定义时使用这种方式</span></div><div class=\"line\">  <span class=\"comment\"># 例如如果没有配置php环境，nginx不会去解析它，此时访问php文件会出现下载窗口 </span></div><div class=\"line\">  <span class=\"attribute\">default_type</span> application/octet-stream;</div><div class=\"line\">  <span class=\"comment\"># 指定日志的输出格式。 main为日志输出格式名称，可在access_log中引用</span></div><div class=\"line\">  <span class=\"attribute\">log_format</span> main <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$gzip_ratio</span>\"'</span>;</div><div class=\"line\">  <span class=\"attribute\">log_format</span> download <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\"'</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_range</span>\" \"<span class=\"variable\">$sent_http_content_range</span>\"'</span>;</div><div class=\"line\">  <span class=\"comment\"># 访问日志 存储的位置和所使用的日志格式</span></div><div class=\"line\">  <span class=\"attribute\">access_log</span> logs/www.test_nginx.access.log main;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 允许客户端请求的最大单个文件字节数</span></div><div class=\"line\">  <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">20m</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定客户端请求头的headerbuffer大小</span></div><div class=\"line\">  <span class=\"attribute\">client_header_buffer_size</span> <span class=\"number\">32k</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定客户端请求中较大的消息头的缓存最大数量和大小。 4个128k</span></div><div class=\"line\">  <span class=\"attribute\">large_client_header_buffers</span> <span class=\"number\">4</span> <span class=\"number\">128k</span>;</div><div class=\"line\">  <span class=\"comment\"># 开启高效文件传输模式</span></div><div class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 防止网络阻塞</span></div><div class=\"line\">  <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端连接保持活动的超时时间</span></div><div class=\"line\">  <span class=\"attribute\">keeplive_timeout</span> <span class=\"number\">60</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端请求头的超时时间。超时将返回Request time out(408)</span></div><div class=\"line\">  <span class=\"attribute\">client_header_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端请求主体超时时间。超时将返回Request time out(408)</span></div><div class=\"line\">  <span class=\"attribute\">client_body_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定响应客户端的超时时间。</span></div><div class=\"line\">  <span class=\"attribute\">send_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 开启gzip模块</span></div><div class=\"line\">  <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 允许压缩的页面最小字节数，该数从header头的Content_Length中获取。</span></div><div class=\"line\">  <span class=\"comment\"># 默认值是0。建议设置大于1KB，小于1KB可能会越压缩越大。</span></div><div class=\"line\">  <span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;</div><div class=\"line\">  <span class=\"comment\"># 申请4个单位为16KB的内存作为压缩结果流缓存。</span></div><div class=\"line\">  <span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16k</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置识别http协议版本</span></div><div class=\"line\">  <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定压缩比。 </span></div><div class=\"line\">  <span class=\"comment\"># 1表示压缩比最小，处理速度最快；</span></div><div class=\"line\">  <span class=\"comment\"># 9表示压缩比最大，传输速度最快，但处理速度最慢，也比较消耗CPU资源</span></div><div class=\"line\">  <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定压缩类型。无论是否指定，text/html都会被压缩</span></div><div class=\"line\">  <span class=\"attribute\">gzip_types</span> text/plain application/x-javascript text/css application/xml;</div><div class=\"line\">  <span class=\"comment\"># 让前端的缓存服务器缓存经过gzip压缩的页面</span></div><div class=\"line\">  <span class=\"attribute\">gzip_vary</span> <span class=\"literal\">on</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 虚拟主机配置。后面会详细解释</span></div><div class=\"line\">  <span class=\"section\">server</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关于日志配置\"><a href=\"#关于日志配置\" class=\"headerlink\" title=\"关于日志配置\"></a>关于日志配置</h2><h3 id=\"log-format-配置日志格式\"><a href=\"#log-format-配置日志格式\" class=\"headerlink\" title=\"log_format 配置日志格式\"></a>log_format 配置日志格式</h3><p>语法： log_format name string …<br>配置段：http</p>\n<p>nginx有个默认的日志格式，名称为combined，格式如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">log_format</span> combined <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span>;</div></pre></td></tr></table></figure>\n<p>如果nginx作为反向代理，此时web服务器无法获得客户端真实的ip地址。$remote_addr获取反向代理的ip地址。</p>\n<p>反向代理的服务器在转发请求的Http头信息中，可以增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址。</p>\n<p>关于X-Forwarded-For可以参考这篇<a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"external\">文章</a></p>\n<p>此时我们可以定义如下日志格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">log_format</span> proxy <span class=\"string\">'<span class=\"variable\">$http_x_forward_for</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span>;</div></pre></td></tr></table></figure>\n<p>日志格式可使用的变量如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$remote_addr，$http_x_forward_for用于记录用户的ip地址</div><div class=\"line\">$remote_user 客户端用户名称</div><div class=\"line\">$request 请求的URL和HTTP协议名称</div><div class=\"line\">$status 请求状态</div><div class=\"line\">$body_bytes_sent 发送给客户端的字节数,不包括响应头的大小</div><div class=\"line\">$bytes_sent 发送给客户端的总字节数。</div><div class=\"line\">$connection 连接的序列号。</div><div class=\"line\">$connection_requests 当前通过一个连接获得的请求数量。</div><div class=\"line\">$msec 日志写入时间。单位为秒,精度是毫秒</div><div class=\"line\">$pipe 如果请求是通过 HTTP 流水线(pipelined)发送,pipe 值为“p”,否则为“.”</div><div class=\"line\">$http_referer 记录从哪个页面链接访问过来的</div><div class=\"line\">$http_user_agent 记录客户端浏览器相关信息</div><div class=\"line\">$request_length 请求的长度(包括请求行,请求头和请求正文)。</div><div class=\"line\">$request_time 请求处理时间,单位为秒,精度毫秒; 从读入客户端的第一个字节开始,直到把最后一个字符发送 给客户端后进行日志写入为止。</div><div class=\"line\">$time_iso8601 ISO8601 标准格式下的本地时间。</div><div class=\"line\">$time_local 通用日志格式下的本地时间</div></pre></td></tr></table></figure></p>\n<h3 id=\"access-log-访问日志\"><a href=\"#access-log-访问日志\" class=\"headerlink\" title=\"access_log 访问日志\"></a>access_log 访问日志</h3><p>语法: access_log path [format [buffer=size [flush=time]]]<br>默认值: access_log logs/access.log combined;<br>配置段: http, server, location, if in location, limit_except</p>\n<p>gzip 压缩等级。<br>buffer 设置内存缓存区大小。<br>flush 保存在缓存区中的最长时间。<br>不记录日志:access_log off</p>\n<h3 id=\"error-log-配置错误日志\"><a href=\"#error-log-配置错误日志\" class=\"headerlink\" title=\"error_log 配置错误日志\"></a>error_log 配置错误日志</h3><p>语法: error_log file | stderr | syslog:server=address[,parameter=value] [debug | info | notice | warn | error | crit | alert | emerg];<br>默认值: error_log logs/error.log error;<br>配置段: main, http, server, location</p>\n<h3 id=\"rewrite-log-记录重写日志\"><a href=\"#rewrite-log-记录重写日志\" class=\"headerlink\" title=\"rewrite_log 记录重写日志\"></a>rewrite_log 记录重写日志</h3><p>语法: rewrite_log on | off;<br>默认值: rewrite_log off;<br>配置段: http, server, location, if<br>启用时将在 error log 中记录 notice 级别的重写日志</p>\n<h2 id=\"虚拟主机配置\"><a href=\"#虚拟主机配置\" class=\"headerlink\" title=\"虚拟主机配置\"></a>虚拟主机配置</h2><p>一般来说，我们会将虚拟主机的配置写在另外一个独立的配置文件中，并在nginx.conf中使用include引用</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义虚拟主机开始的关键字</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"comment\"># 虚拟主机端口</span></div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定ip或者域名，多个域名用空格隔开</span></div><div class=\"line\">  <span class=\"attribute\">server_name</span> <span class=\"number\">192.168.12.188</span> www.test.net;</div><div class=\"line\">  <span class=\"comment\"># 设定访问的默认首页</span></div><div class=\"line\">  <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  <span class=\"comment\"># 指定虚拟主机的网页根目录</span></div><div class=\"line\">  <span class=\"attribute\">root</span> /www/wwwroot/wwww.test.net;</div><div class=\"line\">  <span class=\"comment\"># 网页默认的编码格式</span></div><div class=\"line\">  <span class=\"attribute\">charset</span> utf8;</div><div class=\"line\">  <span class=\"comment\"># 此虚拟主机的访问日志的存放路径</span></div><div class=\"line\">  <span class=\"attribute\">access_log</span> logs/www.test.net.access.log main</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># url匹配设置，后续会讲</span></div><div class=\"line\">  location</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"location配置\"><a href=\"#location配置\" class=\"headerlink\" title=\"location配置\"></a>location配置</h2><p>语法规则：location [= | ~ | ~* | ^~] /uri/ {…}</p>\n<ol>\n<li>=为精确匹配，优先级最高的匹配</li>\n<li>~区分大小写的正则匹配</li>\n<li>~*不区分大小写的正则匹配</li>\n<li>^~普通字符匹配，如果此选项匹配成功，忽略其他匹配选项，一般用来匹配目录 </li>\n<li>/通用匹配，匹配任何请求，因为所有请求都是以”/“开始</li>\n</ol>\n<p>匹配顺序</p>\n<ol>\n<li>首先进行精确匹配，匹配成功则停止其他匹配</li>\n<li>^~匹配</li>\n<li>最后是通用匹配/</li>\n</ol>\n<p>例子A</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># A</span></div><div class=\"line\">location = / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># B</span></div><div class=\"line\">location / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># C</span></div><div class=\"line\">location ^~ /image/ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># D</span></div><div class=\"line\">location ~* \\.(gif|jpg|jpeg)$ &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>请求url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 匹配A</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\"># 匹配B</div><div class=\"line\">/hello/world</div><div class=\"line\"></div><div class=\"line\"># 匹配C</div><div class=\"line\">/image/hello.gif</div><div class=\"line\"></div><div class=\"line\"># 匹配D</div><div class=\"line\">/hello/world.jpg</div></pre></td></tr></table></figure></p>\n<p>例子B</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># A</span></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">  echo \"/\"; //需要安装 echo 模块才行,这边大家可以改成各自的规则</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#B</span></div><div class=\"line\">location = / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># C</span></div><div class=\"line\">location = /hello &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># D</span></div><div class=\"line\">location ~ \\.(gif|jpg|png|js|css)$ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># E</span></div><div class=\"line\">location ~* \\.png$ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># F</span></div><div class=\"line\">location ^~ /static/ &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>请求url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 完全匹配 B</div><div class=\"line\">curl http://www.test.com/</div><div class=\"line\"></div><div class=\"line\"># 完全匹配C</div><div class=\"line\">curl http://www.test.com/hello</div><div class=\"line\"></div><div class=\"line\"># 匹配E</div><div class=\"line\">curl http://www.test.com/world/test.PNG</div><div class=\"line\"></div><div class=\"line\"># 匹配F</div><div class=\"line\">curl http://www.test.com/static/test.jpg</div></pre></td></tr></table></figure></p>\n<h3 id=\"location中root和alias的差异\"><a href=\"#location中root和alias的差异\" class=\"headerlink\" title=\"location中root和alias的差异\"></a>location中root和alias的差异</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/weblogs/</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">root</span> /data/weblogs/www.ttlsa.com; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时若请求为：<br>/weblogs/httplogs/www.ttlsa.com-access.log<br>web服务器将会返回服务器上的/data/weblogs/www.ttlsa.com//weblogs/httplogs/www.ttlsa.com-access.log文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /binapp/ &#123;</div><div class=\"line\">  <span class=\"attribute\">alias</span> /data/statics/bin/apps/ </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时若请求为：<br>/binapp/a.ttlsa.com/favicon<br>web服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon文件<br>即会舍弃location后的路径</p>\n<h3 id=\"利用location也可以实现访问控制\"><a href=\"#利用location也可以实现访问控制\" class=\"headerlink\" title=\"利用location也可以实现访问控制\"></a>利用location也可以实现访问控制</h3><p>使用ngx_http_access_module可以实现访问控制</p>\n<p>限制某些ip的访问</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">  <span class=\"attribute\">deny</span> <span class=\"number\">192.168.66.90</span>;</div><div class=\"line\">  <span class=\"attribute\">allow</span> <span class=\"number\">192.168.66.91</span>;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>限制访问某个目录</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/WEB-INF/</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>禁止访问doc和txt文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* \\.(txt|doc)$</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">root</span> /data/www/wwwroot;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请求代理\"><a href=\"#请求代理\" class=\"headerlink\" title=\"请求代理\"></a>请求代理</h3><p>经常会有访问不同域名的将请求代理到不同服务器上</p>\n<p>例如</p>\n<p>一个网站有两个域名，分别是www.hello.com和w.hello.com。<br>要实现当访问www.hello.com是通过nginx代理到192.168.66.90的8080端口的web上。<br>当访问www.hello.com/admin是通过nginx代理到192.168.66.90的8080端口的admin上。<br>当访问w.hello.com是通过nginx代理到192.168.66.90的8080端口的wap上。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hello.com;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/web/;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"attribute\">location</span> /admin &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/admin;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> w.hello.com;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/wap/;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"重写规则rewrite\"><a href=\"#重写规则rewrite\" class=\"headerlink\" title=\"重写规则rewrite\"></a>重写规则rewrite</h2><p>可根据一定的规则，由一个location跳转到另外一个location</p>\n<p>例如当访问www.helloworld.com时，自动转向www.hw.com</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.helloworld.com;</div><div class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  if($host != 'www.hw.com') &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"if命令\"><a href=\"#if命令\" class=\"headerlink\" title=\"if命令\"></a>if命令</h3><p>判断指令，可以使用如下判断</p>\n<ol>\n<li>一个变量的名称:空字符传”“或者一些“0”开始的字符串为 false。</li>\n<li>字符串比较:使用=或!=运算符</li>\n<li>正则表达式匹配:使用~(区分大小写)和~<em>(不区分大小写),取反运算!~和!~</em>。 4. 文件是否存在:使用-f 和!-f 操作符</li>\n<li>目录是否存在:使用-d 和!-d 操作符</li>\n<li>文件、目录、符号链接是否存在:使用-e 和!-e 操作符</li>\n<li>文件是否可执行:使用-x 和!-x 操作符</li>\n</ol>\n<h3 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h3><p>语法:rewrite regex replacement flag<br>默认值:none<br>使用字段:server, location, if<br>last – 停止处理重写模块指令,之后搜索 location 与更改后的 URI 匹配。<br>break – 完成重写指令。<br>redirect – 返回 302 临时重定向,如果替换字段用 <a href=\"http://开头则被使用。\" target=\"_blank\" rel=\"external\">http://开头则被使用。</a><br>permanent – 返回 301 永久重定向。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>可用于设置一些变量</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$query</span> <span class=\"variable\">$query_string</span>;</div><div class=\"line\">  <span class=\"attribute\">rewrite</span> /dede /wordpress?<span class=\"variable\">$query</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>完成当前设置的规则后，不在匹配后面的重写规则</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  if($host != 'www.hw.com') &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/error.txt <span class=\"literal\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)</span> http://www.hw.cn/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>通过upstream命令可以实现负载均衡</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">upstream</span> myserver &#123;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.181:80</span> weight=<span class=\"number\">3</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.182:80</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.183:80</span> weight=<span class=\"number\">4</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hello.com;</div><div class=\"line\">  <span class=\"attribute\">index</span> index.html;</div><div class=\"line\">  <span class=\"attribute\">root</span> /hello/wwwroot/;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_passs</span> http://myserver;</div><div class=\"line\">    <span class=\"attribute\">proxy_next_upstream</span> http_500 http_502 http_503 <span class=\"literal\">error</span> timeout invalid_header;</div><div class=\"line\">    <span class=\"attribute\">include</span> /opt/nginx/conf/proxy.conf;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中weight为负载均衡的调度算法，还有如下几种算法</p>\n<p>轮询（默认算法）<br>weight，权值，值越大分配到的概率越大<br>ip_hash，按ip的哈希结果分配，来自同一台ip的客户端可以固定访问一台机器<br>fair，根据页面和加载的时间长短智能的进行负载均衡。需要下载upstream_fair模块<br>url_hash，按访问url的哈希结果来分配请求。需要安装hash软件包。</p>\n<p>max_fails和fail_timeout为服务器在负载均衡调度中的状态，还有如下集中状态</p>\n<p>down，当前server暂时不参与负载均衡<br>backup，备份机器。当非backup机器出现故障或者忙的时候，才会请求backup机器<br>max_fails，允许请求失败的次数，默认为1。当超过最大次数，返回proxu_next_upstream模块定义的错误<br>fail_timeoout 在经历了max_fails失败后，暂停服务的时间。</p>\n<p>这里配置了proxy_next_upstream会将500、502、503等错误发生时会自动将请求转移到负载均衡中的另外一台机器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"nginx中http模块相关属性的配置\"><a href=\"#nginx中http模块相关属性的配置\" class=\"headerlink\" title=\"nginx中http模块相关属性的配置\"></a>nginx中http模块相关属性的配置</h2><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">http</span> &#123;</div><div class=\"line\">  <span class=\"comment\"># 引用其他配置文件 </span></div><div class=\"line\">  <span class=\"attribute\">include</span> conf/<span class=\"regexp\">*.conf</span>;</div><div class=\"line\">  <span class=\"comment\"># 默认的文件类型。当文件类型为定义时使用这种方式</span></div><div class=\"line\">  <span class=\"comment\"># 例如如果没有配置php环境，nginx不会去解析它，此时访问php文件会出现下载窗口 </span></div><div class=\"line\">  <span class=\"attribute\">default_type</span> application/octet-stream;</div><div class=\"line\">  <span class=\"comment\"># 指定日志的输出格式。 main为日志输出格式名称，可在access_log中引用</span></div><div class=\"line\">  <span class=\"attribute\">log_format</span> main <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$gzip_ratio</span>\"'</span>;</div><div class=\"line\">  <span class=\"attribute\">log_format</span> download <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\"'</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_range</span>\" \"<span class=\"variable\">$sent_http_content_range</span>\"'</span>;</div><div class=\"line\">  <span class=\"comment\"># 访问日志 存储的位置和所使用的日志格式</span></div><div class=\"line\">  <span class=\"attribute\">access_log</span> logs/www.test_nginx.access.log main;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 允许客户端请求的最大单个文件字节数</span></div><div class=\"line\">  <span class=\"attribute\">client_max_body_size</span> <span class=\"number\">20m</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定客户端请求头的headerbuffer大小</span></div><div class=\"line\">  <span class=\"attribute\">client_header_buffer_size</span> <span class=\"number\">32k</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定客户端请求中较大的消息头的缓存最大数量和大小。 4个128k</span></div><div class=\"line\">  <span class=\"attribute\">large_client_header_buffers</span> <span class=\"number\">4</span> <span class=\"number\">128k</span>;</div><div class=\"line\">  <span class=\"comment\"># 开启高效文件传输模式</span></div><div class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 防止网络阻塞</span></div><div class=\"line\">  <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端连接保持活动的超时时间</span></div><div class=\"line\">  <span class=\"attribute\">keeplive_timeout</span> <span class=\"number\">60</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端请求头的超时时间。超时将返回Request time out(408)</span></div><div class=\"line\">  <span class=\"attribute\">client_header_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置客户端请求主体超时时间。超时将返回Request time out(408)</span></div><div class=\"line\">  <span class=\"attribute\">client_body_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定响应客户端的超时时间。</span></div><div class=\"line\">  <span class=\"attribute\">send_timeout</span> <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 开启gzip模块</span></div><div class=\"line\">  <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</div><div class=\"line\">  <span class=\"comment\"># 允许压缩的页面最小字节数，该数从header头的Content_Length中获取。</span></div><div class=\"line\">  <span class=\"comment\"># 默认值是0。建议设置大于1KB，小于1KB可能会越压缩越大。</span></div><div class=\"line\">  <span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;</div><div class=\"line\">  <span class=\"comment\"># 申请4个单位为16KB的内存作为压缩结果流缓存。</span></div><div class=\"line\">  <span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16k</span>;</div><div class=\"line\">  <span class=\"comment\"># 设置识别http协议版本</span></div><div class=\"line\">  <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定压缩比。 </span></div><div class=\"line\">  <span class=\"comment\"># 1表示压缩比最小，处理速度最快；</span></div><div class=\"line\">  <span class=\"comment\"># 9表示压缩比最大，传输速度最快，但处理速度最慢，也比较消耗CPU资源</span></div><div class=\"line\">  <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定压缩类型。无论是否指定，text/html都会被压缩</span></div><div class=\"line\">  <span class=\"attribute\">gzip_types</span> text/plain application/x-javascript text/css application/xml;</div><div class=\"line\">  <span class=\"comment\"># 让前端的缓存服务器缓存经过gzip压缩的页面</span></div><div class=\"line\">  <span class=\"attribute\">gzip_vary</span> <span class=\"literal\">on</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># 虚拟主机配置。后面会详细解释</span></div><div class=\"line\">  <span class=\"section\">server</span> &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"关于日志配置\"><a href=\"#关于日志配置\" class=\"headerlink\" title=\"关于日志配置\"></a>关于日志配置</h2><h3 id=\"log-format-配置日志格式\"><a href=\"#log-format-配置日志格式\" class=\"headerlink\" title=\"log_format 配置日志格式\"></a>log_format 配置日志格式</h3><p>语法： log_format name string …<br>配置段：http</p>\n<p>nginx有个默认的日志格式，名称为combined，格式如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">log_format</span> combined <span class=\"string\">'<span class=\"variable\">$remote_addr</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span>;</div></pre></td></tr></table></figure>\n<p>如果nginx作为反向代理，此时web服务器无法获得客户端真实的ip地址。$remote_addr获取反向代理的ip地址。</p>\n<p>反向代理的服务器在转发请求的Http头信息中，可以增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址。</p>\n<p>关于X-Forwarded-For可以参考这篇<a href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" target=\"_blank\" rel=\"external\">文章</a></p>\n<p>此时我们可以定义如下日志格式：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">log_format</span> proxy <span class=\"string\">'<span class=\"variable\">$http_x_forward_for</span> - <span class=\"variable\">$remote_user</span> [<span class=\"variable\">$time_local</span>] '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$request</span>\" <span class=\"variable\">$status</span> <span class=\"variable\">$body_bytes_sent</span> '</span></div><div class=\"line\">    <span class=\"string\">'\"<span class=\"variable\">$http_referer</span>\" \"<span class=\"variable\">$http_user_agent</span>\" '</span>;</div></pre></td></tr></table></figure>\n<p>日志格式可使用的变量如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">$remote_addr，$http_x_forward_for用于记录用户的ip地址</div><div class=\"line\">$remote_user 客户端用户名称</div><div class=\"line\">$request 请求的URL和HTTP协议名称</div><div class=\"line\">$status 请求状态</div><div class=\"line\">$body_bytes_sent 发送给客户端的字节数,不包括响应头的大小</div><div class=\"line\">$bytes_sent 发送给客户端的总字节数。</div><div class=\"line\">$connection 连接的序列号。</div><div class=\"line\">$connection_requests 当前通过一个连接获得的请求数量。</div><div class=\"line\">$msec 日志写入时间。单位为秒,精度是毫秒</div><div class=\"line\">$pipe 如果请求是通过 HTTP 流水线(pipelined)发送,pipe 值为“p”,否则为“.”</div><div class=\"line\">$http_referer 记录从哪个页面链接访问过来的</div><div class=\"line\">$http_user_agent 记录客户端浏览器相关信息</div><div class=\"line\">$request_length 请求的长度(包括请求行,请求头和请求正文)。</div><div class=\"line\">$request_time 请求处理时间,单位为秒,精度毫秒; 从读入客户端的第一个字节开始,直到把最后一个字符发送 给客户端后进行日志写入为止。</div><div class=\"line\">$time_iso8601 ISO8601 标准格式下的本地时间。</div><div class=\"line\">$time_local 通用日志格式下的本地时间</div></pre></td></tr></table></figure></p>\n<h3 id=\"access-log-访问日志\"><a href=\"#access-log-访问日志\" class=\"headerlink\" title=\"access_log 访问日志\"></a>access_log 访问日志</h3><p>语法: access_log path [format [buffer=size [flush=time]]]<br>默认值: access_log logs/access.log combined;<br>配置段: http, server, location, if in location, limit_except</p>\n<p>gzip 压缩等级。<br>buffer 设置内存缓存区大小。<br>flush 保存在缓存区中的最长时间。<br>不记录日志:access_log off</p>\n<h3 id=\"error-log-配置错误日志\"><a href=\"#error-log-配置错误日志\" class=\"headerlink\" title=\"error_log 配置错误日志\"></a>error_log 配置错误日志</h3><p>语法: error_log file | stderr | syslog:server=address[,parameter=value] [debug | info | notice | warn | error | crit | alert | emerg];<br>默认值: error_log logs/error.log error;<br>配置段: main, http, server, location</p>\n<h3 id=\"rewrite-log-记录重写日志\"><a href=\"#rewrite-log-记录重写日志\" class=\"headerlink\" title=\"rewrite_log 记录重写日志\"></a>rewrite_log 记录重写日志</h3><p>语法: rewrite_log on | off;<br>默认值: rewrite_log off;<br>配置段: http, server, location, if<br>启用时将在 error log 中记录 notice 级别的重写日志</p>\n<h2 id=\"虚拟主机配置\"><a href=\"#虚拟主机配置\" class=\"headerlink\" title=\"虚拟主机配置\"></a>虚拟主机配置</h2><p>一般来说，我们会将虚拟主机的配置写在另外一个独立的配置文件中，并在nginx.conf中使用include引用</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义虚拟主机开始的关键字</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"comment\"># 虚拟主机端口</span></div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"comment\"># 指定ip或者域名，多个域名用空格隔开</span></div><div class=\"line\">  <span class=\"attribute\">server_name</span> <span class=\"number\">192.168.12.188</span> www.test.net;</div><div class=\"line\">  <span class=\"comment\"># 设定访问的默认首页</span></div><div class=\"line\">  <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  <span class=\"comment\"># 指定虚拟主机的网页根目录</span></div><div class=\"line\">  <span class=\"attribute\">root</span> /www/wwwroot/wwww.test.net;</div><div class=\"line\">  <span class=\"comment\"># 网页默认的编码格式</span></div><div class=\"line\">  <span class=\"attribute\">charset</span> utf8;</div><div class=\"line\">  <span class=\"comment\"># 此虚拟主机的访问日志的存放路径</span></div><div class=\"line\">  <span class=\"attribute\">access_log</span> logs/www.test.net.access.log main</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\"># url匹配设置，后续会讲</span></div><div class=\"line\">  location</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"location配置\"><a href=\"#location配置\" class=\"headerlink\" title=\"location配置\"></a>location配置</h2><p>语法规则：location [= | ~ | ~* | ^~] /uri/ {…}</p>\n<ol>\n<li>=为精确匹配，优先级最高的匹配</li>\n<li>~区分大小写的正则匹配</li>\n<li>~*不区分大小写的正则匹配</li>\n<li>^~普通字符匹配，如果此选项匹配成功，忽略其他匹配选项，一般用来匹配目录 </li>\n<li>/通用匹配，匹配任何请求，因为所有请求都是以”/“开始</li>\n</ol>\n<p>匹配顺序</p>\n<ol>\n<li>首先进行精确匹配，匹配成功则停止其他匹配</li>\n<li>^~匹配</li>\n<li>最后是通用匹配/</li>\n</ol>\n<p>例子A</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># A</span></div><div class=\"line\">location = / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># B</span></div><div class=\"line\">location / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># C</span></div><div class=\"line\">location ^~ /image/ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># D</span></div><div class=\"line\">location ~* \\.(gif|jpg|jpeg)$ &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>请求url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 匹配A</div><div class=\"line\">/</div><div class=\"line\"></div><div class=\"line\"># 匹配B</div><div class=\"line\">/hello/world</div><div class=\"line\"></div><div class=\"line\"># 匹配C</div><div class=\"line\">/image/hello.gif</div><div class=\"line\"></div><div class=\"line\"># 匹配D</div><div class=\"line\">/hello/world.jpg</div></pre></td></tr></table></figure></p>\n<p>例子B</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># A</span></div><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">  echo \"/\"; //需要安装 echo 模块才行,这边大家可以改成各自的规则</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#B</span></div><div class=\"line\">location = / &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># C</span></div><div class=\"line\">location = /hello &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># D</span></div><div class=\"line\">location ~ \\.(gif|jpg|png|js|css)$ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># E</span></div><div class=\"line\">location ~* \\.png$ &#123;...&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># F</span></div><div class=\"line\">location ^~ /static/ &#123;...&#125;</div></pre></td></tr></table></figure>\n<p>请求url<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 完全匹配 B</div><div class=\"line\">curl http://www.test.com/</div><div class=\"line\"></div><div class=\"line\"># 完全匹配C</div><div class=\"line\">curl http://www.test.com/hello</div><div class=\"line\"></div><div class=\"line\"># 匹配E</div><div class=\"line\">curl http://www.test.com/world/test.PNG</div><div class=\"line\"></div><div class=\"line\"># 匹配F</div><div class=\"line\">curl http://www.test.com/static/test.jpg</div></pre></td></tr></table></figure></p>\n<h3 id=\"location中root和alias的差异\"><a href=\"#location中root和alias的差异\" class=\"headerlink\" title=\"location中root和alias的差异\"></a>location中root和alias的差异</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/weblogs/</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">root</span> /data/weblogs/www.ttlsa.com; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时若请求为：<br>/weblogs/httplogs/www.ttlsa.com-access.log<br>web服务器将会返回服务器上的/data/weblogs/www.ttlsa.com//weblogs/httplogs/www.ttlsa.com-access.log文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span><span class=\"regexp\"> ^~</span> /binapp/ &#123;</div><div class=\"line\">  <span class=\"attribute\">alias</span> /data/statics/bin/apps/ </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时若请求为：<br>/binapp/a.ttlsa.com/favicon<br>web服务器将会返回服务器上的/data/statics/bin/apps/a.ttlsa.com/favicon文件<br>即会舍弃location后的路径</p>\n<h3 id=\"利用location也可以实现访问控制\"><a href=\"#利用location也可以实现访问控制\" class=\"headerlink\" title=\"利用location也可以实现访问控制\"></a>利用location也可以实现访问控制</h3><p>使用ngx_http_access_module可以实现访问控制</p>\n<p>限制某些ip的访问</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">  <span class=\"attribute\">deny</span> <span class=\"number\">192.168.66.90</span>;</div><div class=\"line\">  <span class=\"attribute\">allow</span> <span class=\"number\">192.168.66.91</span>;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>限制访问某个目录</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/WEB-INF/</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>禁止访问doc和txt文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~* \\.(txt|doc)$</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">root</span> /data/www/wwwroot;</div><div class=\"line\">  <span class=\"attribute\">deny</span> all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"请求代理\"><a href=\"#请求代理\" class=\"headerlink\" title=\"请求代理\"></a>请求代理</h3><p>经常会有访问不同域名的将请求代理到不同服务器上</p>\n<p>例如</p>\n<p>一个网站有两个域名，分别是www.hello.com和w.hello.com。<br>要实现当访问www.hello.com是通过nginx代理到192.168.66.90的8080端口的web上。<br>当访问www.hello.com/admin是通过nginx代理到192.168.66.90的8080端口的admin上。<br>当访问w.hello.com是通过nginx代理到192.168.66.90的8080端口的wap上。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hello.com;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/web/;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"attribute\">location</span> /admin &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/admin;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> w.hello.com;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_pass</span> <span class=\"number\">192.168.66.90:8080</span>/wap/;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"重写规则rewrite\"><a href=\"#重写规则rewrite\" class=\"headerlink\" title=\"重写规则rewrite\"></a>重写规则rewrite</h2><p>可根据一定的规则，由一个location跳转到另外一个location</p>\n<p>例如当访问www.helloworld.com时，自动转向www.hw.com</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.helloworld.com;</div><div class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  if($host != 'www.hw.com') &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"if命令\"><a href=\"#if命令\" class=\"headerlink\" title=\"if命令\"></a>if命令</h3><p>判断指令，可以使用如下判断</p>\n<ol>\n<li>一个变量的名称:空字符传”“或者一些“0”开始的字符串为 false。</li>\n<li>字符串比较:使用=或!=运算符</li>\n<li>正则表达式匹配:使用~(区分大小写)和~<em>(不区分大小写),取反运算!~和!~</em>。 4. 文件是否存在:使用-f 和!-f 操作符</li>\n<li>目录是否存在:使用-d 和!-d 操作符</li>\n<li>文件、目录、符号链接是否存在:使用-e 和!-e 操作符</li>\n<li>文件是否可执行:使用-x 和!-x 操作符</li>\n</ol>\n<h3 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h3><p>语法:rewrite regex replacement flag<br>默认值:none<br>使用字段:server, location, if<br>last – 停止处理重写模块指令,之后搜索 location 与更改后的 URI 匹配。<br>break – 完成重写指令。<br>redirect – 返回 302 临时重定向,如果替换字段用 <a href=\"http://开头则被使用。\" target=\"_blank\" rel=\"external\">http://开头则被使用。</a><br>permanent – 返回 301 永久重定向。</p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>可用于设置一些变量</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  <span class=\"attribute\">set</span> <span class=\"variable\">$query</span> <span class=\"variable\">$query_string</span>;</div><div class=\"line\">  <span class=\"attribute\">rewrite</span> /dede /wordpress?<span class=\"variable\">$query</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>完成当前设置的规则后，不在匹配后面的重写规则</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># or</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hw.com www.helloworld.com;</div><div class=\"line\">  if($host != 'www.hw.com') &#123;</div><div class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> http://www.hw.com/error.txt <span class=\"literal\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)</span> http://www.hw.cn/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>通过upstream命令可以实现负载均衡</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">upstream</span> myserver &#123;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.181:80</span> weight=<span class=\"number\">3</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.182:80</span> weight=<span class=\"number\">1</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">192.168.12.183:80</span> weight=<span class=\"number\">4</span> max_fails=<span class=\"number\">3</span> fail_timeout=<span class=\"number\">20s</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> www.hello.com;</div><div class=\"line\">  <span class=\"attribute\">index</span> index.html;</div><div class=\"line\">  <span class=\"attribute\">root</span> /hello/wwwroot/;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">proxy_passs</span> http://myserver;</div><div class=\"line\">    <span class=\"attribute\">proxy_next_upstream</span> http_500 http_502 http_503 <span class=\"literal\">error</span> timeout invalid_header;</div><div class=\"line\">    <span class=\"attribute\">include</span> /opt/nginx/conf/proxy.conf;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中weight为负载均衡的调度算法，还有如下几种算法</p>\n<p>轮询（默认算法）<br>weight，权值，值越大分配到的概率越大<br>ip_hash，按ip的哈希结果分配，来自同一台ip的客户端可以固定访问一台机器<br>fair，根据页面和加载的时间长短智能的进行负载均衡。需要下载upstream_fair模块<br>url_hash，按访问url的哈希结果来分配请求。需要安装hash软件包。</p>\n<p>max_fails和fail_timeout为服务器在负载均衡调度中的状态，还有如下集中状态</p>\n<p>down，当前server暂时不参与负载均衡<br>backup，备份机器。当非backup机器出现故障或者忙的时候，才会请求backup机器<br>max_fails，允许请求失败的次数，默认为1。当超过最大次数，返回proxu_next_upstream模块定义的错误<br>fail_timeoout 在经历了max_fails失败后，暂停服务的时间。</p>\n<p>这里配置了proxy_next_upstream会将500、502、503等错误发生时会自动将请求转移到负载均衡中的另外一台机器。</p>\n"},{"_content":"> 做web的人，很多时候都会涉及到浏览器缓存，尤其是在网站性能调优的时候。因此自己想梳理一下这方面的知识。\n\n如何定义一个资源是否应该缓存，缓存多久，缓存到期后如何处理，这些都是由HTTP协议定义好的，浏览器则为我们实现了它。\n\n服务器通过在响应中插入指定的头部来告诉浏览器需要做的缓存操作，这些头部包括：Expires，Cache-Control,Last-Modified.If-Modified-Since,Etag。\n\n接下来我们就来看看这些头部的含义。\n\n#### Expires\n这个头部是在HTTP1.0中定义的，它指定了一个绝对的过期日期，如果过期日期已经过了，就说明文档不再新鲜了。如下所示：  \nExpires: Fri,05 Jul 2015, 05:00:00 GMT  \n这里服务器的响应头中定义了缓存的过期时间为2015年7月5日的凌晨5点，在这个时间之前，浏览器都不会去向服务器请求。  \n但是使用Expires存在服务器端时间和浏览器时间不一致的问题，我们基本上是不会使用这个头部，因此它也不是我们介绍的重点，点到即可。\n\n#### Cache-Control\n既然我们说Expires是不推荐的用法，那么肯定要有个替代方案，这个替代者就是Cache-Control。  \n它是在HTTP1.1中定义的，它定义了一个文档从第一次生成开始到不再新鲜、无法使用为止的最长使用期，并且以秒为单位。用法如下所示：  \nCache-Control: max-age=484200  \n这个响应头告诉了浏览器，在第一次响应后的484200秒里，如果再次请求资源时，不需要再次向服务器发起请求，而是直接使用缓存。\n\nCache-Control除了定义最长使用时间外，还有其他定义方式。\n\n1. no-cahe：所有内容都不会被缓存，每次都向服务器发起请求。可以具体指定某个字段，如no-cache=set-cookie，它告知浏览器当遇到set-cookie时不要使用缓存内容，而是去向服务器请求。\n2. no-store：让浏览器直接向服务器发起请求。和no-chche的区别就是，前者每次的请求和响应都不会被缓存，都是一次全新的操作。no-cache则还是会缓存，而且请求时还是会先拿到缓存内容，然后不做验证直接去向服务器发起请求。\n3. public：所有内容都将被缓存\n4. private：告知浏览器只缓存单个用户的响应，可以指定具体字段，private=username，此时名为username的标头内容，将不会被共享缓存。\n\n以上这些是常用的Cache-Control的定义，当然还有其他的定义方式，如must-revalidate、proxy-revalidate等这些，但是貌似使用的不是很多，所以也不打算阐述。结尾会给出相应的介绍链接，需要使用的时候可以去参考一下。\n\n上图(图片来自网络)！！\n![cache-control](http://7xjw3r.com1.z0.glb.clouddn.com/image/4/b7/229d85481b56b05c39805dec2a733.png)\n#### Last-Modified\n该头部配合cache-control使用，它标志了资源的最后修改时间，即服务器在响应中回带有一个Last-Modified的头部，告诉浏览器该资源的最后修改时间。\n\n我们知道，在第一次请求页面时，会通过cache-control的指示缓存资源，同时会设置资源的Last-Modified时间。  \n当再一次请求页面的资源时，根据max-age指定的时间，在这个时间期间，每次向服务器获取资源时，会直接获取缓存内容，并且响应码为200 OK(from cache)。\n\n若资源已经过期，则会向服务器发起请求，此时请求中会带上If-Modified-Since请求头，值为Last-Modified的值。\n\n服务器收到If-Modified-Since的请求头，此时服务器将根据该字段的值进行一定的逻辑判断。  \n如果资源没有变更，则返回304告知浏览器直接使用缓存。  \n如果资源已经变更，则返回最新的资源，并且响应码为200，还会发送最新的Last-Modified字段。  \n若响应包中Cache-Control:max-age 或 Expires 字段，则会重新设置缓存的过期时间，于是，浏览器又可以不需要向服务器发起请求了。\n\n#### Etag\n该头部和Last-Modified的作用类似，区别我们待会再说。先来看看它的使用方式。\n\n同样的，在第一次请求页面资源，会缓存页面，设置缓存时间，此时若服务器返回了Etag字段，浏览器则会保存Etag的字段和值。这个值是个特殊串，大概是像这样的值，“x123cef”。  \nApache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当然我们可以更改这种算法，例如使用MD5。\n\n当资源过期时，在对服务器发起的请求头中会带有一个If-None-Match的请求头，值为Etag的值。\n\n服务器收到If-None-Match的值，同样的会将本地资源的校验值和If-None-Match的值进行比对。  \n相同，说明资源没有更改，返回304。\n不同，说明资源已经更改，返回最新资源，响应码为200，并带有最新的Etag值。\n\n若同时使用了Last-Modified和Etag，只要有一方认为资源没有变动，就会进行304响应。\n\n#### Last-Modified和Etag的区别\n1. 首先Last-Modified只能精确到秒，有些时候，文件会在1秒内被更改很多次，使用Last-Modified则无法准确的标志文件的更改时间。\n2. 有时会定时生成一些文件，但是内容是不变的，或者仅仅修改变动的时间，此时我们并希望浏览器还是使用缓存的资源，Last-Modified则无法满足我们了。\n3. Etag又服务器或者开发者生成的一个唯一特殊标志值，可以更加有效的控制缓存。资源变更则更新该值，没有变更则不更新该值，简洁粗暴。\n\n当然两者是可以通用的，此时我们应该让服务器优先验证Etag，再去验证Last-Modified，再决定是否返回304。\n\n#### 不同的页面打开方式产生的请求区别\n主要有以下两点要注意：\n1. 手动刷新页面（F5刷新），浏览器会直接认为缓存已经过期，即使缓存并没有过期，在请求中加上字段：Cache-Control:max-age=0，发包向服务器查询是否有文件是否有更新。\n2. 强制刷新页面（ctrl+F5刷新），浏览器会直接忽略本地缓存内容，即使本地有缓存可用，在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。\n其他的直接上图(图片来自网络)：\n![browser_active](http://7xjw3r.com1.z0.glb.clouddn.com/image/9/41/7e21a51022b2a2a29203e559c3406.jpg)\n\n#### 消灭304\n经过上述，我们知道当缓存过期时，浏览器会想服务器再次发起请求，询问资源是否真正过期，服务器响应304说没有过期还可以继续使用缓存，还可以设置新的过期时间。  \n这时我们发现，询问的过程还是需要发起一起HTTP请求，得到的结果是继续使用缓存。PC端还好，对于移动端，一次请求还是有代价的，因此我们需要有一种方式来消灭这种304。 \n \n此时，在前端我们采取的方式是，对这些静态文件，如js,css的文件名中加入版本名或者MD5值，如bundle.d5d02a02.js，bundle.v1.js，并且设置Cache-Control:max-age=31536000，即1年的使用时间。这样1年内我们都不会发起新的请求。  \n如果资源文件被修改了，则使用新的MD5值或者版本名进行命名，如bundle.d43d12d3.js，bundle.v2.js。\n这样便能有效的避免304了。\n\n#### 总结\n我们通过图片来总的看一下使用了缓存的浏览器和服务器动作。  \n这是第一次请求：\n![no-cache](http://7xjw3r.com1.z0.glb.clouddn.com/image/5/43/7a900df61cf713a595fd1f1a76e6f.jpg)\n再次请求页面：  \n![cache](http://7xjw3r.com1.z0.glb.clouddn.com/image/a/59/5ac29bbec94eac805c58288a944ea.jpg)\n\n我们再通过查看请求头和响应头的内容的方式来看看具体请求和响应的东西。  \n资料来自《H5 缓存机制浅析 移动端 Web 加载性能优化》  \n首次请求：\n![first_access](http://7xjw3r.com1.z0.glb.clouddn.com/image/f/5a/ee7ed7cd4331981a51eb95cf5fcb2.gif)\n缓存有效期内请求：200(from cache)\n![in_cache_time](http://7xjw3r.com1.z0.glb.clouddn.com/image/2/b6/9c5d5b278f3d8649938cb6307b77c.gif)\n缓存过期后请求：304（Not Modified)\n![304](http://7xjw3r.com1.z0.glb.clouddn.com/image/6/5c/82c3dc587d37f65796f1eafc01e38.gif)\n\n#### 参考资料\n[H5 缓存机制浅析 移动端 Web 加载性能优化](http://segmentfault.com/a/1190000004132566)\n\n[再记：浏览器缓存200（from cache）和304小结](http://www.laoono.com/s-db/55.html)\n\n[透过浏览器看HTTP缓存](http://www.admin10000.com/document/6299.html)\n\n[你应该了解的 一些web缓存相关的概念](http://www.cnblogs.com/_franky/archive/2011/11/23/2260109.html)\n","source":"_drafts/浏览器缓存浅析.md","raw":"> 做web的人，很多时候都会涉及到浏览器缓存，尤其是在网站性能调优的时候。因此自己想梳理一下这方面的知识。\n\n如何定义一个资源是否应该缓存，缓存多久，缓存到期后如何处理，这些都是由HTTP协议定义好的，浏览器则为我们实现了它。\n\n服务器通过在响应中插入指定的头部来告诉浏览器需要做的缓存操作，这些头部包括：Expires，Cache-Control,Last-Modified.If-Modified-Since,Etag。\n\n接下来我们就来看看这些头部的含义。\n\n#### Expires\n这个头部是在HTTP1.0中定义的，它指定了一个绝对的过期日期，如果过期日期已经过了，就说明文档不再新鲜了。如下所示：  \nExpires: Fri,05 Jul 2015, 05:00:00 GMT  \n这里服务器的响应头中定义了缓存的过期时间为2015年7月5日的凌晨5点，在这个时间之前，浏览器都不会去向服务器请求。  \n但是使用Expires存在服务器端时间和浏览器时间不一致的问题，我们基本上是不会使用这个头部，因此它也不是我们介绍的重点，点到即可。\n\n#### Cache-Control\n既然我们说Expires是不推荐的用法，那么肯定要有个替代方案，这个替代者就是Cache-Control。  \n它是在HTTP1.1中定义的，它定义了一个文档从第一次生成开始到不再新鲜、无法使用为止的最长使用期，并且以秒为单位。用法如下所示：  \nCache-Control: max-age=484200  \n这个响应头告诉了浏览器，在第一次响应后的484200秒里，如果再次请求资源时，不需要再次向服务器发起请求，而是直接使用缓存。\n\nCache-Control除了定义最长使用时间外，还有其他定义方式。\n\n1. no-cahe：所有内容都不会被缓存，每次都向服务器发起请求。可以具体指定某个字段，如no-cache=set-cookie，它告知浏览器当遇到set-cookie时不要使用缓存内容，而是去向服务器请求。\n2. no-store：让浏览器直接向服务器发起请求。和no-chche的区别就是，前者每次的请求和响应都不会被缓存，都是一次全新的操作。no-cache则还是会缓存，而且请求时还是会先拿到缓存内容，然后不做验证直接去向服务器发起请求。\n3. public：所有内容都将被缓存\n4. private：告知浏览器只缓存单个用户的响应，可以指定具体字段，private=username，此时名为username的标头内容，将不会被共享缓存。\n\n以上这些是常用的Cache-Control的定义，当然还有其他的定义方式，如must-revalidate、proxy-revalidate等这些，但是貌似使用的不是很多，所以也不打算阐述。结尾会给出相应的介绍链接，需要使用的时候可以去参考一下。\n\n上图(图片来自网络)！！\n![cache-control](http://7xjw3r.com1.z0.glb.clouddn.com/image/4/b7/229d85481b56b05c39805dec2a733.png)\n#### Last-Modified\n该头部配合cache-control使用，它标志了资源的最后修改时间，即服务器在响应中回带有一个Last-Modified的头部，告诉浏览器该资源的最后修改时间。\n\n我们知道，在第一次请求页面时，会通过cache-control的指示缓存资源，同时会设置资源的Last-Modified时间。  \n当再一次请求页面的资源时，根据max-age指定的时间，在这个时间期间，每次向服务器获取资源时，会直接获取缓存内容，并且响应码为200 OK(from cache)。\n\n若资源已经过期，则会向服务器发起请求，此时请求中会带上If-Modified-Since请求头，值为Last-Modified的值。\n\n服务器收到If-Modified-Since的请求头，此时服务器将根据该字段的值进行一定的逻辑判断。  \n如果资源没有变更，则返回304告知浏览器直接使用缓存。  \n如果资源已经变更，则返回最新的资源，并且响应码为200，还会发送最新的Last-Modified字段。  \n若响应包中Cache-Control:max-age 或 Expires 字段，则会重新设置缓存的过期时间，于是，浏览器又可以不需要向服务器发起请求了。\n\n#### Etag\n该头部和Last-Modified的作用类似，区别我们待会再说。先来看看它的使用方式。\n\n同样的，在第一次请求页面资源，会缓存页面，设置缓存时间，此时若服务器返回了Etag字段，浏览器则会保存Etag的字段和值。这个值是个特殊串，大概是像这样的值，“x123cef”。  \nApache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当然我们可以更改这种算法，例如使用MD5。\n\n当资源过期时，在对服务器发起的请求头中会带有一个If-None-Match的请求头，值为Etag的值。\n\n服务器收到If-None-Match的值，同样的会将本地资源的校验值和If-None-Match的值进行比对。  \n相同，说明资源没有更改，返回304。\n不同，说明资源已经更改，返回最新资源，响应码为200，并带有最新的Etag值。\n\n若同时使用了Last-Modified和Etag，只要有一方认为资源没有变动，就会进行304响应。\n\n#### Last-Modified和Etag的区别\n1. 首先Last-Modified只能精确到秒，有些时候，文件会在1秒内被更改很多次，使用Last-Modified则无法准确的标志文件的更改时间。\n2. 有时会定时生成一些文件，但是内容是不变的，或者仅仅修改变动的时间，此时我们并希望浏览器还是使用缓存的资源，Last-Modified则无法满足我们了。\n3. Etag又服务器或者开发者生成的一个唯一特殊标志值，可以更加有效的控制缓存。资源变更则更新该值，没有变更则不更新该值，简洁粗暴。\n\n当然两者是可以通用的，此时我们应该让服务器优先验证Etag，再去验证Last-Modified，再决定是否返回304。\n\n#### 不同的页面打开方式产生的请求区别\n主要有以下两点要注意：\n1. 手动刷新页面（F5刷新），浏览器会直接认为缓存已经过期，即使缓存并没有过期，在请求中加上字段：Cache-Control:max-age=0，发包向服务器查询是否有文件是否有更新。\n2. 强制刷新页面（ctrl+F5刷新），浏览器会直接忽略本地缓存内容，即使本地有缓存可用，在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。\n其他的直接上图(图片来自网络)：\n![browser_active](http://7xjw3r.com1.z0.glb.clouddn.com/image/9/41/7e21a51022b2a2a29203e559c3406.jpg)\n\n#### 消灭304\n经过上述，我们知道当缓存过期时，浏览器会想服务器再次发起请求，询问资源是否真正过期，服务器响应304说没有过期还可以继续使用缓存，还可以设置新的过期时间。  \n这时我们发现，询问的过程还是需要发起一起HTTP请求，得到的结果是继续使用缓存。PC端还好，对于移动端，一次请求还是有代价的，因此我们需要有一种方式来消灭这种304。 \n \n此时，在前端我们采取的方式是，对这些静态文件，如js,css的文件名中加入版本名或者MD5值，如bundle.d5d02a02.js，bundle.v1.js，并且设置Cache-Control:max-age=31536000，即1年的使用时间。这样1年内我们都不会发起新的请求。  \n如果资源文件被修改了，则使用新的MD5值或者版本名进行命名，如bundle.d43d12d3.js，bundle.v2.js。\n这样便能有效的避免304了。\n\n#### 总结\n我们通过图片来总的看一下使用了缓存的浏览器和服务器动作。  \n这是第一次请求：\n![no-cache](http://7xjw3r.com1.z0.glb.clouddn.com/image/5/43/7a900df61cf713a595fd1f1a76e6f.jpg)\n再次请求页面：  \n![cache](http://7xjw3r.com1.z0.glb.clouddn.com/image/a/59/5ac29bbec94eac805c58288a944ea.jpg)\n\n我们再通过查看请求头和响应头的内容的方式来看看具体请求和响应的东西。  \n资料来自《H5 缓存机制浅析 移动端 Web 加载性能优化》  \n首次请求：\n![first_access](http://7xjw3r.com1.z0.glb.clouddn.com/image/f/5a/ee7ed7cd4331981a51eb95cf5fcb2.gif)\n缓存有效期内请求：200(from cache)\n![in_cache_time](http://7xjw3r.com1.z0.glb.clouddn.com/image/2/b6/9c5d5b278f3d8649938cb6307b77c.gif)\n缓存过期后请求：304（Not Modified)\n![304](http://7xjw3r.com1.z0.glb.clouddn.com/image/6/5c/82c3dc587d37f65796f1eafc01e38.gif)\n\n#### 参考资料\n[H5 缓存机制浅析 移动端 Web 加载性能优化](http://segmentfault.com/a/1190000004132566)\n\n[再记：浏览器缓存200（from cache）和304小结](http://www.laoono.com/s-db/55.html)\n\n[透过浏览器看HTTP缓存](http://www.admin10000.com/document/6299.html)\n\n[你应该了解的 一些web缓存相关的概念](http://www.cnblogs.com/_franky/archive/2011/11/23/2260109.html)\n","slug":"浏览器缓存浅析","published":0,"date":"2017-08-03T10:21:24.111Z","updated":"2017-08-03T10:21:24.111Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96d00007nou9dgrcnkd9","content":"<blockquote>\n<p>做web的人，很多时候都会涉及到浏览器缓存，尤其是在网站性能调优的时候。因此自己想梳理一下这方面的知识。</p>\n</blockquote>\n<p>如何定义一个资源是否应该缓存，缓存多久，缓存到期后如何处理，这些都是由HTTP协议定义好的，浏览器则为我们实现了它。</p>\n<p>服务器通过在响应中插入指定的头部来告诉浏览器需要做的缓存操作，这些头部包括：Expires，Cache-Control,Last-Modified.If-Modified-Since,Etag。</p>\n<p>接下来我们就来看看这些头部的含义。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>这个头部是在HTTP1.0中定义的，它指定了一个绝对的过期日期，如果过期日期已经过了，就说明文档不再新鲜了。如下所示：<br>Expires: Fri,05 Jul 2015, 05:00:00 GMT<br>这里服务器的响应头中定义了缓存的过期时间为2015年7月5日的凌晨5点，在这个时间之前，浏览器都不会去向服务器请求。<br>但是使用Expires存在服务器端时间和浏览器时间不一致的问题，我们基本上是不会使用这个头部，因此它也不是我们介绍的重点，点到即可。</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>既然我们说Expires是不推荐的用法，那么肯定要有个替代方案，这个替代者就是Cache-Control。<br>它是在HTTP1.1中定义的，它定义了一个文档从第一次生成开始到不再新鲜、无法使用为止的最长使用期，并且以秒为单位。用法如下所示：<br>Cache-Control: max-age=484200<br>这个响应头告诉了浏览器，在第一次响应后的484200秒里，如果再次请求资源时，不需要再次向服务器发起请求，而是直接使用缓存。</p>\n<p>Cache-Control除了定义最长使用时间外，还有其他定义方式。</p>\n<ol>\n<li>no-cahe：所有内容都不会被缓存，每次都向服务器发起请求。可以具体指定某个字段，如no-cache=set-cookie，它告知浏览器当遇到set-cookie时不要使用缓存内容，而是去向服务器请求。</li>\n<li>no-store：让浏览器直接向服务器发起请求。和no-chche的区别就是，前者每次的请求和响应都不会被缓存，都是一次全新的操作。no-cache则还是会缓存，而且请求时还是会先拿到缓存内容，然后不做验证直接去向服务器发起请求。</li>\n<li>public：所有内容都将被缓存</li>\n<li>private：告知浏览器只缓存单个用户的响应，可以指定具体字段，private=username，此时名为username的标头内容，将不会被共享缓存。</li>\n</ol>\n<p>以上这些是常用的Cache-Control的定义，当然还有其他的定义方式，如must-revalidate、proxy-revalidate等这些，但是貌似使用的不是很多，所以也不打算阐述。结尾会给出相应的介绍链接，需要使用的时候可以去参考一下。</p>\n<p>上图(图片来自网络)！！<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/4/b7/229d85481b56b05c39805dec2a733.png\" alt=\"cache-control\"></p>\n<h4 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h4><p>该头部配合cache-control使用，它标志了资源的最后修改时间，即服务器在响应中回带有一个Last-Modified的头部，告诉浏览器该资源的最后修改时间。</p>\n<p>我们知道，在第一次请求页面时，会通过cache-control的指示缓存资源，同时会设置资源的Last-Modified时间。<br>当再一次请求页面的资源时，根据max-age指定的时间，在这个时间期间，每次向服务器获取资源时，会直接获取缓存内容，并且响应码为200 OK(from cache)。</p>\n<p>若资源已经过期，则会向服务器发起请求，此时请求中会带上If-Modified-Since请求头，值为Last-Modified的值。</p>\n<p>服务器收到If-Modified-Since的请求头，此时服务器将根据该字段的值进行一定的逻辑判断。<br>如果资源没有变更，则返回304告知浏览器直接使用缓存。<br>如果资源已经变更，则返回最新的资源，并且响应码为200，还会发送最新的Last-Modified字段。<br>若响应包中Cache-Control:max-age 或 Expires 字段，则会重新设置缓存的过期时间，于是，浏览器又可以不需要向服务器发起请求了。</p>\n<h4 id=\"Etag\"><a href=\"#Etag\" class=\"headerlink\" title=\"Etag\"></a>Etag</h4><p>该头部和Last-Modified的作用类似，区别我们待会再说。先来看看它的使用方式。</p>\n<p>同样的，在第一次请求页面资源，会缓存页面，设置缓存时间，此时若服务器返回了Etag字段，浏览器则会保存Etag的字段和值。这个值是个特殊串，大概是像这样的值，“x123cef”。<br>Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当然我们可以更改这种算法，例如使用MD5。</p>\n<p>当资源过期时，在对服务器发起的请求头中会带有一个If-None-Match的请求头，值为Etag的值。</p>\n<p>服务器收到If-None-Match的值，同样的会将本地资源的校验值和If-None-Match的值进行比对。<br>相同，说明资源没有更改，返回304。<br>不同，说明资源已经更改，返回最新资源，响应码为200，并带有最新的Etag值。</p>\n<p>若同时使用了Last-Modified和Etag，只要有一方认为资源没有变动，就会进行304响应。</p>\n<h4 id=\"Last-Modified和Etag的区别\"><a href=\"#Last-Modified和Etag的区别\" class=\"headerlink\" title=\"Last-Modified和Etag的区别\"></a>Last-Modified和Etag的区别</h4><ol>\n<li>首先Last-Modified只能精确到秒，有些时候，文件会在1秒内被更改很多次，使用Last-Modified则无法准确的标志文件的更改时间。</li>\n<li>有时会定时生成一些文件，但是内容是不变的，或者仅仅修改变动的时间，此时我们并希望浏览器还是使用缓存的资源，Last-Modified则无法满足我们了。</li>\n<li>Etag又服务器或者开发者生成的一个唯一特殊标志值，可以更加有效的控制缓存。资源变更则更新该值，没有变更则不更新该值，简洁粗暴。</li>\n</ol>\n<p>当然两者是可以通用的，此时我们应该让服务器优先验证Etag，再去验证Last-Modified，再决定是否返回304。</p>\n<h4 id=\"不同的页面打开方式产生的请求区别\"><a href=\"#不同的页面打开方式产生的请求区别\" class=\"headerlink\" title=\"不同的页面打开方式产生的请求区别\"></a>不同的页面打开方式产生的请求区别</h4><p>主要有以下两点要注意：</p>\n<ol>\n<li>手动刷新页面（F5刷新），浏览器会直接认为缓存已经过期，即使缓存并没有过期，在请求中加上字段：Cache-Control:max-age=0，发包向服务器查询是否有文件是否有更新。</li>\n<li>强制刷新页面（ctrl+F5刷新），浏览器会直接忽略本地缓存内容，即使本地有缓存可用，在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。<br>其他的直接上图(图片来自网络)：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/9/41/7e21a51022b2a2a29203e559c3406.jpg\" alt=\"browser_active\"></li>\n</ol>\n<h4 id=\"消灭304\"><a href=\"#消灭304\" class=\"headerlink\" title=\"消灭304\"></a>消灭304</h4><p>经过上述，我们知道当缓存过期时，浏览器会想服务器再次发起请求，询问资源是否真正过期，服务器响应304说没有过期还可以继续使用缓存，还可以设置新的过期时间。<br>这时我们发现，询问的过程还是需要发起一起HTTP请求，得到的结果是继续使用缓存。PC端还好，对于移动端，一次请求还是有代价的，因此我们需要有一种方式来消灭这种304。 </p>\n<p>此时，在前端我们采取的方式是，对这些静态文件，如js,css的文件名中加入版本名或者MD5值，如bundle.d5d02a02.js，bundle.v1.js，并且设置Cache-Control:max-age=31536000，即1年的使用时间。这样1年内我们都不会发起新的请求。<br>如果资源文件被修改了，则使用新的MD5值或者版本名进行命名，如bundle.d43d12d3.js，bundle.v2.js。<br>这样便能有效的避免304了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>我们通过图片来总的看一下使用了缓存的浏览器和服务器动作。<br>这是第一次请求：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/5/43/7a900df61cf713a595fd1f1a76e6f.jpg\" alt=\"no-cache\"><br>再次请求页面：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/a/59/5ac29bbec94eac805c58288a944ea.jpg\" alt=\"cache\"></p>\n<p>我们再通过查看请求头和响应头的内容的方式来看看具体请求和响应的东西。<br>资料来自《H5 缓存机制浅析 移动端 Web 加载性能优化》<br>首次请求：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/f/5a/ee7ed7cd4331981a51eb95cf5fcb2.gif\" alt=\"first_access\"><br>缓存有效期内请求：200(from cache)<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/2/b6/9c5d5b278f3d8649938cb6307b77c.gif\" alt=\"in_cache_time\"><br>缓存过期后请求：304（Not Modified)<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/6/5c/82c3dc587d37f65796f1eafc01e38.gif\" alt=\"304\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://segmentfault.com/a/1190000004132566\" target=\"_blank\" rel=\"external\">H5 缓存机制浅析 移动端 Web 加载性能优化</a></p>\n<p><a href=\"http://www.laoono.com/s-db/55.html\" target=\"_blank\" rel=\"external\">再记：浏览器缓存200（from cache）和304小结</a></p>\n<p><a href=\"http://www.admin10000.com/document/6299.html\" target=\"_blank\" rel=\"external\">透过浏览器看HTTP缓存</a></p>\n<p><a href=\"http://www.cnblogs.com/_franky/archive/2011/11/23/2260109.html\" target=\"_blank\" rel=\"external\">你应该了解的 一些web缓存相关的概念</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>做web的人，很多时候都会涉及到浏览器缓存，尤其是在网站性能调优的时候。因此自己想梳理一下这方面的知识。</p>\n</blockquote>\n<p>如何定义一个资源是否应该缓存，缓存多久，缓存到期后如何处理，这些都是由HTTP协议定义好的，浏览器则为我们实现了它。</p>\n<p>服务器通过在响应中插入指定的头部来告诉浏览器需要做的缓存操作，这些头部包括：Expires，Cache-Control,Last-Modified.If-Modified-Since,Etag。</p>\n<p>接下来我们就来看看这些头部的含义。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><p>这个头部是在HTTP1.0中定义的，它指定了一个绝对的过期日期，如果过期日期已经过了，就说明文档不再新鲜了。如下所示：<br>Expires: Fri,05 Jul 2015, 05:00:00 GMT<br>这里服务器的响应头中定义了缓存的过期时间为2015年7月5日的凌晨5点，在这个时间之前，浏览器都不会去向服务器请求。<br>但是使用Expires存在服务器端时间和浏览器时间不一致的问题，我们基本上是不会使用这个头部，因此它也不是我们介绍的重点，点到即可。</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>既然我们说Expires是不推荐的用法，那么肯定要有个替代方案，这个替代者就是Cache-Control。<br>它是在HTTP1.1中定义的，它定义了一个文档从第一次生成开始到不再新鲜、无法使用为止的最长使用期，并且以秒为单位。用法如下所示：<br>Cache-Control: max-age=484200<br>这个响应头告诉了浏览器，在第一次响应后的484200秒里，如果再次请求资源时，不需要再次向服务器发起请求，而是直接使用缓存。</p>\n<p>Cache-Control除了定义最长使用时间外，还有其他定义方式。</p>\n<ol>\n<li>no-cahe：所有内容都不会被缓存，每次都向服务器发起请求。可以具体指定某个字段，如no-cache=set-cookie，它告知浏览器当遇到set-cookie时不要使用缓存内容，而是去向服务器请求。</li>\n<li>no-store：让浏览器直接向服务器发起请求。和no-chche的区别就是，前者每次的请求和响应都不会被缓存，都是一次全新的操作。no-cache则还是会缓存，而且请求时还是会先拿到缓存内容，然后不做验证直接去向服务器发起请求。</li>\n<li>public：所有内容都将被缓存</li>\n<li>private：告知浏览器只缓存单个用户的响应，可以指定具体字段，private=username，此时名为username的标头内容，将不会被共享缓存。</li>\n</ol>\n<p>以上这些是常用的Cache-Control的定义，当然还有其他的定义方式，如must-revalidate、proxy-revalidate等这些，但是貌似使用的不是很多，所以也不打算阐述。结尾会给出相应的介绍链接，需要使用的时候可以去参考一下。</p>\n<p>上图(图片来自网络)！！<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/4/b7/229d85481b56b05c39805dec2a733.png\" alt=\"cache-control\"></p>\n<h4 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h4><p>该头部配合cache-control使用，它标志了资源的最后修改时间，即服务器在响应中回带有一个Last-Modified的头部，告诉浏览器该资源的最后修改时间。</p>\n<p>我们知道，在第一次请求页面时，会通过cache-control的指示缓存资源，同时会设置资源的Last-Modified时间。<br>当再一次请求页面的资源时，根据max-age指定的时间，在这个时间期间，每次向服务器获取资源时，会直接获取缓存内容，并且响应码为200 OK(from cache)。</p>\n<p>若资源已经过期，则会向服务器发起请求，此时请求中会带上If-Modified-Since请求头，值为Last-Modified的值。</p>\n<p>服务器收到If-Modified-Since的请求头，此时服务器将根据该字段的值进行一定的逻辑判断。<br>如果资源没有变更，则返回304告知浏览器直接使用缓存。<br>如果资源已经变更，则返回最新的资源，并且响应码为200，还会发送最新的Last-Modified字段。<br>若响应包中Cache-Control:max-age 或 Expires 字段，则会重新设置缓存的过期时间，于是，浏览器又可以不需要向服务器发起请求了。</p>\n<h4 id=\"Etag\"><a href=\"#Etag\" class=\"headerlink\" title=\"Etag\"></a>Etag</h4><p>该头部和Last-Modified的作用类似，区别我们待会再说。先来看看它的使用方式。</p>\n<p>同样的，在第一次请求页面资源，会缓存页面，设置缓存时间，此时若服务器返回了Etag字段，浏览器则会保存Etag的字段和值。这个值是个特殊串，大概是像这样的值，“x123cef”。<br>Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。当然我们可以更改这种算法，例如使用MD5。</p>\n<p>当资源过期时，在对服务器发起的请求头中会带有一个If-None-Match的请求头，值为Etag的值。</p>\n<p>服务器收到If-None-Match的值，同样的会将本地资源的校验值和If-None-Match的值进行比对。<br>相同，说明资源没有更改，返回304。<br>不同，说明资源已经更改，返回最新资源，响应码为200，并带有最新的Etag值。</p>\n<p>若同时使用了Last-Modified和Etag，只要有一方认为资源没有变动，就会进行304响应。</p>\n<h4 id=\"Last-Modified和Etag的区别\"><a href=\"#Last-Modified和Etag的区别\" class=\"headerlink\" title=\"Last-Modified和Etag的区别\"></a>Last-Modified和Etag的区别</h4><ol>\n<li>首先Last-Modified只能精确到秒，有些时候，文件会在1秒内被更改很多次，使用Last-Modified则无法准确的标志文件的更改时间。</li>\n<li>有时会定时生成一些文件，但是内容是不变的，或者仅仅修改变动的时间，此时我们并希望浏览器还是使用缓存的资源，Last-Modified则无法满足我们了。</li>\n<li>Etag又服务器或者开发者生成的一个唯一特殊标志值，可以更加有效的控制缓存。资源变更则更新该值，没有变更则不更新该值，简洁粗暴。</li>\n</ol>\n<p>当然两者是可以通用的，此时我们应该让服务器优先验证Etag，再去验证Last-Modified，再决定是否返回304。</p>\n<h4 id=\"不同的页面打开方式产生的请求区别\"><a href=\"#不同的页面打开方式产生的请求区别\" class=\"headerlink\" title=\"不同的页面打开方式产生的请求区别\"></a>不同的页面打开方式产生的请求区别</h4><p>主要有以下两点要注意：</p>\n<ol>\n<li>手动刷新页面（F5刷新），浏览器会直接认为缓存已经过期，即使缓存并没有过期，在请求中加上字段：Cache-Control:max-age=0，发包向服务器查询是否有文件是否有更新。</li>\n<li>强制刷新页面（ctrl+F5刷新），浏览器会直接忽略本地缓存内容，即使本地有缓存可用，在请求中加上字段：Cache-Control:no-cache（或 Pragma:no-cache），发包向服务重新拉取文件。<br>其他的直接上图(图片来自网络)：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/9/41/7e21a51022b2a2a29203e559c3406.jpg\" alt=\"browser_active\"></li>\n</ol>\n<h4 id=\"消灭304\"><a href=\"#消灭304\" class=\"headerlink\" title=\"消灭304\"></a>消灭304</h4><p>经过上述，我们知道当缓存过期时，浏览器会想服务器再次发起请求，询问资源是否真正过期，服务器响应304说没有过期还可以继续使用缓存，还可以设置新的过期时间。<br>这时我们发现，询问的过程还是需要发起一起HTTP请求，得到的结果是继续使用缓存。PC端还好，对于移动端，一次请求还是有代价的，因此我们需要有一种方式来消灭这种304。 </p>\n<p>此时，在前端我们采取的方式是，对这些静态文件，如js,css的文件名中加入版本名或者MD5值，如bundle.d5d02a02.js，bundle.v1.js，并且设置Cache-Control:max-age=31536000，即1年的使用时间。这样1年内我们都不会发起新的请求。<br>如果资源文件被修改了，则使用新的MD5值或者版本名进行命名，如bundle.d43d12d3.js，bundle.v2.js。<br>这样便能有效的避免304了。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>我们通过图片来总的看一下使用了缓存的浏览器和服务器动作。<br>这是第一次请求：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/5/43/7a900df61cf713a595fd1f1a76e6f.jpg\" alt=\"no-cache\"><br>再次请求页面：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/a/59/5ac29bbec94eac805c58288a944ea.jpg\" alt=\"cache\"></p>\n<p>我们再通过查看请求头和响应头的内容的方式来看看具体请求和响应的东西。<br>资料来自《H5 缓存机制浅析 移动端 Web 加载性能优化》<br>首次请求：<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/f/5a/ee7ed7cd4331981a51eb95cf5fcb2.gif\" alt=\"first_access\"><br>缓存有效期内请求：200(from cache)<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/2/b6/9c5d5b278f3d8649938cb6307b77c.gif\" alt=\"in_cache_time\"><br>缓存过期后请求：304（Not Modified)<br><img src=\"http://7xjw3r.com1.z0.glb.clouddn.com/image/6/5c/82c3dc587d37f65796f1eafc01e38.gif\" alt=\"304\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://segmentfault.com/a/1190000004132566\" target=\"_blank\" rel=\"external\">H5 缓存机制浅析 移动端 Web 加载性能优化</a></p>\n<p><a href=\"http://www.laoono.com/s-db/55.html\" target=\"_blank\" rel=\"external\">再记：浏览器缓存200（from cache）和304小结</a></p>\n<p><a href=\"http://www.admin10000.com/document/6299.html\" target=\"_blank\" rel=\"external\">透过浏览器看HTTP缓存</a></p>\n<p><a href=\"http://www.cnblogs.com/_franky/archive/2011/11/23/2260109.html\" target=\"_blank\" rel=\"external\">你应该了解的 一些web缓存相关的概念</a></p>\n"},{"_content":"> 之前梳理了一次关于node.js中关于流的用法的知识点，感觉还是少了些东西。所以就这阵子再梳理一些东西，帮助自己多点理解stream。\n\n##### readable\n我们知道，可读流可以读取数据到缓存中，当缓存中的数据可用时，便会触发`readable`事件。在该事件中我们便可以去使用read方法去读取缓存中的数据。\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"./test.md\")\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  console.log(rs.read())\n})\n```\nreadable事件被触发，则表明了出现如下情况之一：\n1. 缓存中有新的数据可以被读取，此时调用read读取数据的话则会返回数据\n2. 已经到了流的结尾，此时调用read读取数据的话会返回null\n\n当所有数据都已经读取结束，则会触发end事件\n```javascript\nrs.on(\"end\", () => {\n  console.log(\"there will no more data.\")\n})\n```\n\n这里我们有必要说一下read这个方法。  \nread([size]) size参数是可选的，表示每次从缓存中读取多少字节的数据。  \n如不加上这个参数，则读取的是缓存中的所有数据。若指定了每次读取的字节数，则有一点要注意一下。\n```javascript\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  console.log(rs.read(3))\n})\n```\n上面的例子中每次读取3个字节，会发现我们的读取的文件中的数据并没有读完，而且end事件也没有触发。  \n原因就是readable事件并没有一直被触发。根据上面所述我们知道readable的触发机制必须为缓存中有新数据或者已经没有数据了。  \n现在的情况是我们每次只读取3个字节，而缓存中还存有剩余的数据，因此readable便不会被触发了。  \n\n要解决这种情况，我们需要在readable事件中不断去读取数据，直到把缓存的数据读完为止。\n```javascript\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  while(null !== (chunk = rs.read(3))) {\n    console.log(chunk.toString())\n  }\n})\n```  \n当缓存中的数据已经被读完时，再调用read方法则会返回null，此时执行完readable事件的回调后便会去文件中读取新的数据到缓存中，于是readable便源源不断的被触发了。\n","source":"_drafts/关于node.js中stream的再一次梳理.md","raw":"> 之前梳理了一次关于node.js中关于流的用法的知识点，感觉还是少了些东西。所以就这阵子再梳理一些东西，帮助自己多点理解stream。\n\n##### readable\n我们知道，可读流可以读取数据到缓存中，当缓存中的数据可用时，便会触发`readable`事件。在该事件中我们便可以去使用read方法去读取缓存中的数据。\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"./test.md\")\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  console.log(rs.read())\n})\n```\nreadable事件被触发，则表明了出现如下情况之一：\n1. 缓存中有新的数据可以被读取，此时调用read读取数据的话则会返回数据\n2. 已经到了流的结尾，此时调用read读取数据的话会返回null\n\n当所有数据都已经读取结束，则会触发end事件\n```javascript\nrs.on(\"end\", () => {\n  console.log(\"there will no more data.\")\n})\n```\n\n这里我们有必要说一下read这个方法。  \nread([size]) size参数是可选的，表示每次从缓存中读取多少字节的数据。  \n如不加上这个参数，则读取的是缓存中的所有数据。若指定了每次读取的字节数，则有一点要注意一下。\n```javascript\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  console.log(rs.read(3))\n})\n```\n上面的例子中每次读取3个字节，会发现我们的读取的文件中的数据并没有读完，而且end事件也没有触发。  \n原因就是readable事件并没有一直被触发。根据上面所述我们知道readable的触发机制必须为缓存中有新数据或者已经没有数据了。  \n现在的情况是我们每次只读取3个字节，而缓存中还存有剩余的数据，因此readable便不会被触发了。  \n\n要解决这种情况，我们需要在readable事件中不断去读取数据，直到把缓存的数据读完为止。\n```javascript\nrs.on(\"readable\", function log() {\n  console.log(\"in readable\")\n  while(null !== (chunk = rs.read(3))) {\n    console.log(chunk.toString())\n  }\n})\n```  \n当缓存中的数据已经被读完时，再调用read方法则会返回null，此时执行完readable事件的回调后便会去文件中读取新的数据到缓存中，于是readable便源源不断的被触发了。\n","slug":"关于node.js中stream的再一次梳理","published":0,"date":"2017-08-03T10:21:24.110Z","updated":"2017-08-03T10:21:24.110Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96d40008nou9y0cukw1j","content":"<blockquote>\n<p>之前梳理了一次关于node.js中关于流的用法的知识点，感觉还是少了些东西。所以就这阵子再梳理一些东西，帮助自己多点理解stream。</p>\n</blockquote>\n<h5 id=\"readable\"><a href=\"#readable\" class=\"headerlink\" title=\"readable\"></a>readable</h5><p>我们知道，可读流可以读取数据到缓存中，当缓存中的数据可用时，便会触发<code>readable</code>事件。在该事件中我们便可以去使用read方法去读取缓存中的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"./test.md\"</span>)</div><div class=\"line\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(rs.read())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>readable事件被触发，则表明了出现如下情况之一：</p>\n<ol>\n<li>缓存中有新的数据可以被读取，此时调用read读取数据的话则会返回数据</li>\n<li>已经到了流的结尾，此时调用read读取数据的话会返回null</li>\n</ol>\n<p>当所有数据都已经读取结束，则会触发end事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"there will no more data.\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这里我们有必要说一下read这个方法。<br>read([size]) size参数是可选的，表示每次从缓存中读取多少字节的数据。<br>如不加上这个参数，则读取的是缓存中的所有数据。若指定了每次读取的字节数，则有一点要注意一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(rs.read(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>上面的例子中每次读取3个字节，会发现我们的读取的文件中的数据并没有读完，而且end事件也没有触发。<br>原因就是readable事件并没有一直被触发。根据上面所述我们知道readable的触发机制必须为缓存中有新数据或者已经没有数据了。<br>现在的情况是我们每次只读取3个字节，而缓存中还存有剩余的数据，因此readable便不会被触发了。  </p>\n<p>要解决这种情况，我们需要在readable事件中不断去读取数据，直到把缓存的数据读完为止。</p>\n<pre><code class=\"javascript\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)\n  <span class=\"keyword\">while</span>(<span class=\"literal\">null</span> !== (chunk = rs.read(<span class=\"number\">3</span>))) {\n    <span class=\"built_in\">console</span>.log(chunk.toString())\n  }\n})\n</code></pre>\n<p>当缓存中的数据已经被读完时，再调用read方法则会返回null，此时执行完readable事件的回调后便会去文件中读取新的数据到缓存中，于是readable便源源不断的被触发了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>之前梳理了一次关于node.js中关于流的用法的知识点，感觉还是少了些东西。所以就这阵子再梳理一些东西，帮助自己多点理解stream。</p>\n</blockquote>\n<h5 id=\"readable\"><a href=\"#readable\" class=\"headerlink\" title=\"readable\"></a>readable</h5><p>我们知道，可读流可以读取数据到缓存中，当缓存中的数据可用时，便会触发<code>readable</code>事件。在该事件中我们便可以去使用read方法去读取缓存中的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"./test.md\"</span>)</div><div class=\"line\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(rs.read())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>readable事件被触发，则表明了出现如下情况之一：</p>\n<ol>\n<li>缓存中有新的数据可以被读取，此时调用read读取数据的话则会返回数据</li>\n<li>已经到了流的结尾，此时调用read读取数据的话会返回null</li>\n</ol>\n<p>当所有数据都已经读取结束，则会触发end事件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"there will no more data.\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这里我们有必要说一下read这个方法。<br>read([size]) size参数是可选的，表示每次从缓存中读取多少字节的数据。<br>如不加上这个参数，则读取的是缓存中的所有数据。若指定了每次读取的字节数，则有一点要注意一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(rs.read(<span class=\"number\">3</span>))</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>上面的例子中每次读取3个字节，会发现我们的读取的文件中的数据并没有读完，而且end事件也没有触发。<br>原因就是readable事件并没有一直被触发。根据上面所述我们知道readable的触发机制必须为缓存中有新数据或者已经没有数据了。<br>现在的情况是我们每次只读取3个字节，而缓存中还存有剩余的数据，因此readable便不会被触发了。  </p>\n<p>要解决这种情况，我们需要在readable事件中不断去读取数据，直到把缓存的数据读完为止。</p>\n<pre><code class=\"javascript\">rs.on(<span class=\"string\">\"readable\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"in readable\"</span>)\n  <span class=\"keyword\">while</span>(<span class=\"literal\">null</span> !== (chunk = rs.read(<span class=\"number\">3</span>))) {\n    <span class=\"built_in\">console</span>.log(chunk.toString())\n  }\n})\n</code></pre>\n<p>当缓存中的数据已经被读完时，再调用read方法则会返回null，此时执行完readable事件的回调后便会去文件中读取新的数据到缓存中，于是readable便源源不断的被触发了。</p>\n"},{"_content":"### 何为code splitting\ncode splitting是webpack里一个非常重要的功能，利用它可以实现按需加载，减少首次加载的时间。\n\n我们知道，如果将所有代码全部都放在一个文件中会很不恰当，尤其是打开页面的时候不需要使用到的代码块。\n\n而很多人进行前端打包时都会把所有代码都打成一个bundle包，这样虽然开发人员是省事了，但是用户使用时很可能会因为js文件过大而造成页面卡顿的现象，尤其是大型网站。\n\nwebpack的code splitting则可以让我们做到按需加载。它的做法就是做出一个分离点，将本次加载不会用到的代码快放到分离点，一个分离点就是一个文件。需要分离点的时候再异步加载进来。\n```javascript\n// 第一个参数是依赖列表，webpack会加载模块，但不会执行\n// 第二个参数是一个回调，在其中可以使用require载入模块\n// 下面的代码会把module-a，module-b，module-c打包一个文件中，虽然module-c没有在依赖列表里，但是在回调里调用了，一样会被打包进来\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n  var a = require(\"module-a\");\n  var b = require(\"module-b\");\n  var c = require('module-c');\n});\n```\n\n### 使用范例\n我们通过一个简单的例子来了解如何使用code splitting。\n\n假设有如下的页面（index.html）\n```html\n<h1>code splitting</h1>\n<div id=\"content\"></div>\n<button id=\"hello\">hello</button>\n<button id=\"world\">world</button>\n```\n\nwebpack入口文件代码如下（entry.js）\n```javascript\n$(\"#hello\").click(() => {\n  $(\"#content\").html(\"<h1>hello</h1>\")\n})\n\n$(\"#world\").click(() => {\n  $(\"#content\").html(\"<h1>world</h1>\")\n})\n```\n\n这里为两个按钮注册了两个点击事件，点击后分别在页面显示hello和world。虽然很简单，但是足够拿来说明问题了。\n\n#### 第一次优化\n当应用变大庞大复杂的时候，事件处理函数会很复杂，所以正常来说，我们会把它独立成单独的文件。\n```javascirpt\n// hello.js\nexport default () => {\n  $(\"#content\").html(\"<h1>hello</h1>\")\n}\n\n// world.js\nexport default () => {\n  $(\"#content\").html(\"<h1>world</h1>\")\n}\n```\n这时候entry.js则为如下\n```javascript\nimport hello from './hello'\nimport world from './world'\n\n$(\"#hello\").click(() => {\n  hello()\n})\n\n$(\"#world\").click(() => {\n  world()\n})\n```\n\n页面在加载的时候会去加载js文件，但是我们发现，这两个事件的处理函数，在页面加载的时候压根不会被调用。  \n\n但是webpack默认会将所有js文件打包成一个文件，这样页面就得去加载这个大而冗余的文件。\n\n这里代码简单，所以没问题。但是当应用复杂的时候，就会带来很多性能上的问题。\n\n我们接下来使用webpack的code splitting来优化这段代码。\n\n#### 第二次优化\n修改entry.js如下\n```javascript\nlet hello = null\nlet world = null\nrequire.ensure([], function(require) {\n  hello = require('./hello').default\n})\nrequire.ensure([], function(require) {\n  world = require('./world').default\n})\n\n$(\"#hello\").click(() => {\n  hello()\n})\n\n$(\"#world\").click(() => {\n  world()\n})\n```\n我们使用require.ensure来进行代码分离，一次分离会产生一个文件，因此这里会产生两个文件，再加上webpack打包后的文件（bundle.js），总共会有3个文件。\n\n很明显，这样之后我们页面加载的时候会加载3个文件，虽然http的请求次数多了，但是会首先加载bundle.js，再加载另外两个分离文件。\n\n当然从这段代码看，是没法看出是否变快的。但是应用变大了，这个性能还是有得考量的。\n\n#### 第三次优化\n我们发现，其实并没有做到按需加载，毕竟还是产生了另外两次http请求去加载文件。那能不能连这两次请求都省去呢。当然是可以的。\n\n继续来看entry.js的修改\n```javascript\nconst clickHandler = (id) => {\n  require.ensure([], function(require) {\n    const src = `./${id}`\n    const handler = require(src).default\n    handler()\n  })\n}\n\n$(\"#hello\").click(() => {\n  clickHandler(\"hello\")\n})\n\n$(\"#world\").click(() => {\n  clickHandler(\"world\")\n})\n```\n再次运行webpack打包命令后，我们会发现除了bundle文件外，只会产生一个分离文件，即总共只有2个文件，不再是3个文件。\n\n我们会发现分离文件已经有hello.js和world.js的全部代码了。\n\n再打开页面看会发现只加载了一个bundle.js文件，另外一个js文件的http请求并没有发起。当有对按钮进行点击后才会去发起请求加载另外一个文件。\n\n这样我们便做到了，打开页面，对于页面不需要使用的代码不再加载，并且在需要时（即点击的时候）才进行加载，即按需加载。\n","source":"_drafts/关于webpack中code splitting的使用.md","raw":"### 何为code splitting\ncode splitting是webpack里一个非常重要的功能，利用它可以实现按需加载，减少首次加载的时间。\n\n我们知道，如果将所有代码全部都放在一个文件中会很不恰当，尤其是打开页面的时候不需要使用到的代码块。\n\n而很多人进行前端打包时都会把所有代码都打成一个bundle包，这样虽然开发人员是省事了，但是用户使用时很可能会因为js文件过大而造成页面卡顿的现象，尤其是大型网站。\n\nwebpack的code splitting则可以让我们做到按需加载。它的做法就是做出一个分离点，将本次加载不会用到的代码快放到分离点，一个分离点就是一个文件。需要分离点的时候再异步加载进来。\n```javascript\n// 第一个参数是依赖列表，webpack会加载模块，但不会执行\n// 第二个参数是一个回调，在其中可以使用require载入模块\n// 下面的代码会把module-a，module-b，module-c打包一个文件中，虽然module-c没有在依赖列表里，但是在回调里调用了，一样会被打包进来\nrequire.ensure([\"module-a\", \"module-b\"], function(require) {\n  var a = require(\"module-a\");\n  var b = require(\"module-b\");\n  var c = require('module-c');\n});\n```\n\n### 使用范例\n我们通过一个简单的例子来了解如何使用code splitting。\n\n假设有如下的页面（index.html）\n```html\n<h1>code splitting</h1>\n<div id=\"content\"></div>\n<button id=\"hello\">hello</button>\n<button id=\"world\">world</button>\n```\n\nwebpack入口文件代码如下（entry.js）\n```javascript\n$(\"#hello\").click(() => {\n  $(\"#content\").html(\"<h1>hello</h1>\")\n})\n\n$(\"#world\").click(() => {\n  $(\"#content\").html(\"<h1>world</h1>\")\n})\n```\n\n这里为两个按钮注册了两个点击事件，点击后分别在页面显示hello和world。虽然很简单，但是足够拿来说明问题了。\n\n#### 第一次优化\n当应用变大庞大复杂的时候，事件处理函数会很复杂，所以正常来说，我们会把它独立成单独的文件。\n```javascirpt\n// hello.js\nexport default () => {\n  $(\"#content\").html(\"<h1>hello</h1>\")\n}\n\n// world.js\nexport default () => {\n  $(\"#content\").html(\"<h1>world</h1>\")\n}\n```\n这时候entry.js则为如下\n```javascript\nimport hello from './hello'\nimport world from './world'\n\n$(\"#hello\").click(() => {\n  hello()\n})\n\n$(\"#world\").click(() => {\n  world()\n})\n```\n\n页面在加载的时候会去加载js文件，但是我们发现，这两个事件的处理函数，在页面加载的时候压根不会被调用。  \n\n但是webpack默认会将所有js文件打包成一个文件，这样页面就得去加载这个大而冗余的文件。\n\n这里代码简单，所以没问题。但是当应用复杂的时候，就会带来很多性能上的问题。\n\n我们接下来使用webpack的code splitting来优化这段代码。\n\n#### 第二次优化\n修改entry.js如下\n```javascript\nlet hello = null\nlet world = null\nrequire.ensure([], function(require) {\n  hello = require('./hello').default\n})\nrequire.ensure([], function(require) {\n  world = require('./world').default\n})\n\n$(\"#hello\").click(() => {\n  hello()\n})\n\n$(\"#world\").click(() => {\n  world()\n})\n```\n我们使用require.ensure来进行代码分离，一次分离会产生一个文件，因此这里会产生两个文件，再加上webpack打包后的文件（bundle.js），总共会有3个文件。\n\n很明显，这样之后我们页面加载的时候会加载3个文件，虽然http的请求次数多了，但是会首先加载bundle.js，再加载另外两个分离文件。\n\n当然从这段代码看，是没法看出是否变快的。但是应用变大了，这个性能还是有得考量的。\n\n#### 第三次优化\n我们发现，其实并没有做到按需加载，毕竟还是产生了另外两次http请求去加载文件。那能不能连这两次请求都省去呢。当然是可以的。\n\n继续来看entry.js的修改\n```javascript\nconst clickHandler = (id) => {\n  require.ensure([], function(require) {\n    const src = `./${id}`\n    const handler = require(src).default\n    handler()\n  })\n}\n\n$(\"#hello\").click(() => {\n  clickHandler(\"hello\")\n})\n\n$(\"#world\").click(() => {\n  clickHandler(\"world\")\n})\n```\n再次运行webpack打包命令后，我们会发现除了bundle文件外，只会产生一个分离文件，即总共只有2个文件，不再是3个文件。\n\n我们会发现分离文件已经有hello.js和world.js的全部代码了。\n\n再打开页面看会发现只加载了一个bundle.js文件，另外一个js文件的http请求并没有发起。当有对按钮进行点击后才会去发起请求加载另外一个文件。\n\n这样我们便做到了，打开页面，对于页面不需要使用的代码不再加载，并且在需要时（即点击的时候）才进行加载，即按需加载。\n","slug":"关于webpack中code splitting的使用","published":0,"date":"2017-08-03T10:21:24.110Z","updated":"2017-08-03T10:21:24.110Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96d70009nou91hbaoa41","content":"<h3 id=\"何为code-splitting\"><a href=\"#何为code-splitting\" class=\"headerlink\" title=\"何为code splitting\"></a>何为code splitting</h3><p>code splitting是webpack里一个非常重要的功能，利用它可以实现按需加载，减少首次加载的时间。</p>\n<p>我们知道，如果将所有代码全部都放在一个文件中会很不恰当，尤其是打开页面的时候不需要使用到的代码块。</p>\n<p>而很多人进行前端打包时都会把所有代码都打成一个bundle包，这样虽然开发人员是省事了，但是用户使用时很可能会因为js文件过大而造成页面卡顿的现象，尤其是大型网站。</p>\n<p>webpack的code splitting则可以让我们做到按需加载。它的做法就是做出一个分离点，将本次加载不会用到的代码快放到分离点，一个分离点就是一个文件。需要分离点的时候再异步加载进来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 第一个参数是依赖列表，webpack会加载模块，但不会执行</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数是一个回调，在其中可以使用require载入模块</span></div><div class=\"line\"><span class=\"comment\">// 下面的代码会把module-a，module-b，module-c打包一个文件中，虽然module-c没有在依赖列表里，但是在回调里调用了，一样会被打包进来</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">'module-c'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用范例\"><a href=\"#使用范例\" class=\"headerlink\" title=\"使用范例\"></a>使用范例</h3><p>我们通过一个简单的例子来了解如何使用code splitting。</p>\n<p>假设有如下的页面（index.html）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>code splitting<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"world\"</span>&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webpack入口文件代码如下（entry.js）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).html(<span class=\"string\">\"&lt;h1&gt;hello&lt;/h1&gt;\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).html(<span class=\"string\">\"&lt;h1&gt;world&lt;/h1&gt;\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这里为两个按钮注册了两个点击事件，点击后分别在页面显示hello和world。虽然很简单，但是足够拿来说明问题了。</p>\n<h4 id=\"第一次优化\"><a href=\"#第一次优化\" class=\"headerlink\" title=\"第一次优化\"></a>第一次优化</h4><p>当应用变大庞大复杂的时候，事件处理函数会很复杂，所以正常来说，我们会把它独立成单独的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// hello.js</div><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">  $(&quot;#content&quot;).html(&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// world.js</div><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">  $(&quot;#content&quot;).html(&quot;&lt;h1&gt;world&lt;/h1&gt;&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这时候entry.js则为如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">'./hello'</span></div><div class=\"line\"><span class=\"keyword\">import</span> world <span class=\"keyword\">from</span> <span class=\"string\">'./world'</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  hello()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  world()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>页面在加载的时候会去加载js文件，但是我们发现，这两个事件的处理函数，在页面加载的时候压根不会被调用。  </p>\n<p>但是webpack默认会将所有js文件打包成一个文件，这样页面就得去加载这个大而冗余的文件。</p>\n<p>这里代码简单，所以没问题。但是当应用复杂的时候，就会带来很多性能上的问题。</p>\n<p>我们接下来使用webpack的code splitting来优化这段代码。</p>\n<h4 id=\"第二次优化\"><a href=\"#第二次优化\" class=\"headerlink\" title=\"第二次优化\"></a>第二次优化</h4><p>修改entry.js如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"keyword\">let</span> world = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>).default</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  world = <span class=\"built_in\">require</span>(<span class=\"string\">'./world'</span>).default</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  hello()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  world()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们使用require.ensure来进行代码分离，一次分离会产生一个文件，因此这里会产生两个文件，再加上webpack打包后的文件（bundle.js），总共会有3个文件。</p>\n<p>很明显，这样之后我们页面加载的时候会加载3个文件，虽然http的请求次数多了，但是会首先加载bundle.js，再加载另外两个分离文件。</p>\n<p>当然从这段代码看，是没法看出是否变快的。但是应用变大了，这个性能还是有得考量的。</p>\n<h4 id=\"第三次优化\"><a href=\"#第三次优化\" class=\"headerlink\" title=\"第三次优化\"></a>第三次优化</h4><p>我们发现，其实并没有做到按需加载，毕竟还是产生了另外两次http请求去加载文件。那能不能连这两次请求都省去呢。当然是可以的。</p>\n<p>继续来看entry.js的修改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> clickHandler = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> src = <span class=\"string\">`./<span class=\"subst\">$&#123;id&#125;</span>`</span></div><div class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"built_in\">require</span>(src).default</div><div class=\"line\">    handler()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  clickHandler(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  clickHandler(<span class=\"string\">\"world\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>再次运行webpack打包命令后，我们会发现除了bundle文件外，只会产生一个分离文件，即总共只有2个文件，不再是3个文件。</p>\n<p>我们会发现分离文件已经有hello.js和world.js的全部代码了。</p>\n<p>再打开页面看会发现只加载了一个bundle.js文件，另外一个js文件的http请求并没有发起。当有对按钮进行点击后才会去发起请求加载另外一个文件。</p>\n<p>这样我们便做到了，打开页面，对于页面不需要使用的代码不再加载，并且在需要时（即点击的时候）才进行加载，即按需加载。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"何为code-splitting\"><a href=\"#何为code-splitting\" class=\"headerlink\" title=\"何为code splitting\"></a>何为code splitting</h3><p>code splitting是webpack里一个非常重要的功能，利用它可以实现按需加载，减少首次加载的时间。</p>\n<p>我们知道，如果将所有代码全部都放在一个文件中会很不恰当，尤其是打开页面的时候不需要使用到的代码块。</p>\n<p>而很多人进行前端打包时都会把所有代码都打成一个bundle包，这样虽然开发人员是省事了，但是用户使用时很可能会因为js文件过大而造成页面卡顿的现象，尤其是大型网站。</p>\n<p>webpack的code splitting则可以让我们做到按需加载。它的做法就是做出一个分离点，将本次加载不会用到的代码快放到分离点，一个分离点就是一个文件。需要分离点的时候再异步加载进来。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 第一个参数是依赖列表，webpack会加载模块，但不会执行</span></div><div class=\"line\"><span class=\"comment\">// 第二个参数是一个回调，在其中可以使用require载入模块</span></div><div class=\"line\"><span class=\"comment\">// 下面的代码会把module-a，module-b，module-c打包一个文件中，虽然module-c没有在依赖列表里，但是在回调里调用了，一样会被打包进来</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([<span class=\"string\">\"module-a\"</span>, <span class=\"string\">\"module-b\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-a\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">\"module-b\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">require</span>(<span class=\"string\">'module-c'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用范例\"><a href=\"#使用范例\" class=\"headerlink\" title=\"使用范例\"></a>使用范例</h3><p>我们通过一个简单的例子来了解如何使用code splitting。</p>\n<p>假设有如下的页面（index.html）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>code splitting<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello\"</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"world\"</span>&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webpack入口文件代码如下（entry.js）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).html(<span class=\"string\">\"&lt;h1&gt;hello&lt;/h1&gt;\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).html(<span class=\"string\">\"&lt;h1&gt;world&lt;/h1&gt;\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>这里为两个按钮注册了两个点击事件，点击后分别在页面显示hello和world。虽然很简单，但是足够拿来说明问题了。</p>\n<h4 id=\"第一次优化\"><a href=\"#第一次优化\" class=\"headerlink\" title=\"第一次优化\"></a>第一次优化</h4><p>当应用变大庞大复杂的时候，事件处理函数会很复杂，所以正常来说，我们会把它独立成单独的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// hello.js</div><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">  $(&quot;#content&quot;).html(&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// world.js</div><div class=\"line\">export default () =&gt; &#123;</div><div class=\"line\">  $(&quot;#content&quot;).html(&quot;&lt;h1&gt;world&lt;/h1&gt;&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这时候entry.js则为如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">'./hello'</span></div><div class=\"line\"><span class=\"keyword\">import</span> world <span class=\"keyword\">from</span> <span class=\"string\">'./world'</span></div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  hello()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  world()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>页面在加载的时候会去加载js文件，但是我们发现，这两个事件的处理函数，在页面加载的时候压根不会被调用。  </p>\n<p>但是webpack默认会将所有js文件打包成一个文件，这样页面就得去加载这个大而冗余的文件。</p>\n<p>这里代码简单，所以没问题。但是当应用复杂的时候，就会带来很多性能上的问题。</p>\n<p>我们接下来使用webpack的code splitting来优化这段代码。</p>\n<h4 id=\"第二次优化\"><a href=\"#第二次优化\" class=\"headerlink\" title=\"第二次优化\"></a>第二次优化</h4><p>修改entry.js如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"keyword\">let</span> world = <span class=\"literal\">null</span></div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>).default</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">  world = <span class=\"built_in\">require</span>(<span class=\"string\">'./world'</span>).default</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  hello()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  world()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们使用require.ensure来进行代码分离，一次分离会产生一个文件，因此这里会产生两个文件，再加上webpack打包后的文件（bundle.js），总共会有3个文件。</p>\n<p>很明显，这样之后我们页面加载的时候会加载3个文件，虽然http的请求次数多了，但是会首先加载bundle.js，再加载另外两个分离文件。</p>\n<p>当然从这段代码看，是没法看出是否变快的。但是应用变大了，这个性能还是有得考量的。</p>\n<h4 id=\"第三次优化\"><a href=\"#第三次优化\" class=\"headerlink\" title=\"第三次优化\"></a>第三次优化</h4><p>我们发现，其实并没有做到按需加载，毕竟还是产生了另外两次http请求去加载文件。那能不能连这两次请求都省去呢。当然是可以的。</p>\n<p>继续来看entry.js的修改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> clickHandler = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> src = <span class=\"string\">`./<span class=\"subst\">$&#123;id&#125;</span>`</span></div><div class=\"line\">    <span class=\"keyword\">const</span> handler = <span class=\"built_in\">require</span>(src).default</div><div class=\"line\">    handler()</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#hello\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  clickHandler(<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">\"#world\"</span>).click(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  clickHandler(<span class=\"string\">\"world\"</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>再次运行webpack打包命令后，我们会发现除了bundle文件外，只会产生一个分离文件，即总共只有2个文件，不再是3个文件。</p>\n<p>我们会发现分离文件已经有hello.js和world.js的全部代码了。</p>\n<p>再打开页面看会发现只加载了一个bundle.js文件，另外一个js文件的http请求并没有发起。当有对按钮进行点击后才会去发起请求加载另外一个文件。</p>\n<p>这样我们便做到了，打开页面，对于页面不需要使用的代码不再加载，并且在需要时（即点击的时候）才进行加载，即按需加载。</p>\n"},{"_content":"# 深入了解JavaScript，从作用域链开始（1）\n\n地址：http://blog.xieliqun.com/2016/10/05/scope-chain/\n\n> 作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。\n\n\n----------\n\n### JavaScript的作用域是什么\n\n作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。\n\n#### 全局作用域\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：\n\n##### （1）程序最外层定义的函数或者变量\n```javascript\nvar a = \"tsrot\";\nfunction hello(){\n\talert(a);\n}\n\nfunction sayHello(){\n\thello();\n}\n\nalert(a);     //能访问到tsrot\nhello();      //能访问到tsrot\nsayHello();   //能访问到hello函数，然后也能访问到tsrot\n```\n\n##### （2）所有末定义直接赋值的变量（不推荐）\n```javascript\nfunction hello(){\n\ta = \"tsrot\";\n\tvar b = \"hello tsrot\";\n}\n\nalert(a);  //能访问到tsrot\nalert(b);  //error 不能访问\n```\n\n##### （3）所有window对象的属性和方法\n一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。\n\n\n#### 局部作用域（函数作用域）\n\n局部作用域在函数内创建，在函数内可访问，函数外不可访问。\n```javascript\nfunction hello(){\n\tvar a = \"tsrot\";\n\talert(a);\n}\n\nhello(); //函数内可访问到tsrot\nalert(a); //error not defined\n```\n\n### 作用域链是什么\n\n了解作用域链之前我们要知道一下几个概念：\n- 变量和函数的声明\n- 函数的生命周期\n- Activetion Object（AO）、Variable Object（VO）\n\n\n#### 变量和函数的声明\n\n在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。\n\n变量声明：变量的声明只有一种方式，那就是用`var`关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：\n（1）因为它只是一种赋值，所以不会声明提前\n```javascript\nalert(a); // undefined\nalert(b); // error \"b\" is not defined\nb = 10;\nvar a = 20;\n```\n（2）直接赋值形式是在执行阶段创建\n```javascript\nalert(a); // undefined, 这个大家都知道\nb = 10;\nalert(b); // 10, 代码执行阶段创建\n \nvar a = 20;\nalert(a); // 20, 代码执行阶段修改\n```\n（3）变量不能删除（delete），属性可以删除\n```javascript\na = 10;\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n \nvar b = 20;\nalert(window.b); // 20\n \nalert(delete b); // false\n \nalert(window.b); // 仍然为 20，因为变量是不能够删除的。\n```\n但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：\n```javascript\neval('var a = 10;');\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n```\n有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。\n\n函数声明：函数的声明有三种方式\n（1）function name( ){ }直接创建方式\n```javascript\nfunction add(a,b){\n\treturn a+b;\n}\n\nadd(5,4);\n```\n（2）new Funtion构建函数创建\n```javascript\nvar add=new Function(\"a\", \"b\", \"return a+b;\");\n\nadd(4,5);\n```\n（3）给变量赋值匿名函数方法创建\n```javascript\nvar add = function(a,b){\n\treturn a+b;\n}\n\nadd(4,5);\n```\n后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。\n\n**注意**：如果变量名和函数名声明时相同，函数优先声明。\n```javascript\nalert(x); // function\n\nvar x = 10;\nalert(x); // 10\n \nx = 20;\n\nfunction x() {};\n \nalert(x); // 20\n```\n\n#### 函数的生命周期\n\n函数的的生命周期分为创建和执行两个阶段。\n\n在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。\n\n在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。\n\n#### 什么是AO、VO\n\n英文解释：\nAO：Activetion Object（活动对象）\nVO：Variable Object（变量对象）\n\nVO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：\n- 变量 (var, 变量声明);\n- 函数声明 (FunctionDeclaration, 缩写为FD);\n- 函数的形参\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined\n```\n\n\nAO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：\n- 函数的所有局部变量\n- 函数的所有命名参数\n- 函数的参数集合\n- 函数的this指向\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n\nadd(4,5);\n//  我用JS对象来表示AO\n//  AO = {\n//\t    this : window,\n//\t    arguments : [4,5],\n//\t    a : 4,\n//\t    b : 5,\n//\t    say : <reference to function>,\n//\t    sum : undefined\n//  }\n```\n\n#### JavaScript作用域链\n\n现在我们回到主题，作用域链。\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\treturn sum;\n}\n```\n假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：\n\n```flow\n此时作用域链（Scope Chain）只有一级,就为Global Object\n\n\tscope(add) -> Global Object(VO)\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n\n如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。\n```javascript\nadd(4,5);\n```\n例如，调用add后的作用域链是：\n\n```flow\n此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）\n\n\tscope(add) -> AO -> VO\n\n\tAO = {\n\t\tthis : window,\n\t\targuments : [4,5],\n\t\ta : 4,\n\t\tb : 5,\n\t\tsum : undefined\n\t}\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n\n看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：\n```javascript\nvar x = 10;\n \nfunction foo() {\n    var y = 20;\n \n    function bar() {\n        var z = 30;\n \n        console.log(x + y + z);\n    };\n \n    bar()\n};\n \nfoo();\n```\n上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：\n```flow\n此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）\n\n\tscope -> bar.AO -> foo.AO -> Global Object\n\n\tbar.AO = {\n\t\tz : 30,\n\t\t__parent__ : foo.AO\n\t}\n\n\tfoo.AO = {\n\t\ty : 20,\n\t\tbar : <reference to function>,\n\t\t__parent__ : <Global Object>\n\t}\n\t\n\tGlobal Object = {\n\t\tx : 10,\n\t\tfoo : <reference to function>,\n\t\t__parent__ : null\n\t}\n```\n\n未完待续。。。","source":"_drafts/深入了解JavaScript，从作用域链开始（1）.md","raw":"# 深入了解JavaScript，从作用域链开始（1）\n\n地址：http://blog.xieliqun.com/2016/10/05/scope-chain/\n\n> 作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。\n\n\n----------\n\n### JavaScript的作用域是什么\n\n作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。\n\n#### 全局作用域\n\n在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：\n\n##### （1）程序最外层定义的函数或者变量\n```javascript\nvar a = \"tsrot\";\nfunction hello(){\n\talert(a);\n}\n\nfunction sayHello(){\n\thello();\n}\n\nalert(a);     //能访问到tsrot\nhello();      //能访问到tsrot\nsayHello();   //能访问到hello函数，然后也能访问到tsrot\n```\n\n##### （2）所有末定义直接赋值的变量（不推荐）\n```javascript\nfunction hello(){\n\ta = \"tsrot\";\n\tvar b = \"hello tsrot\";\n}\n\nalert(a);  //能访问到tsrot\nalert(b);  //error 不能访问\n```\n\n##### （3）所有window对象的属性和方法\n一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。\n\n\n#### 局部作用域（函数作用域）\n\n局部作用域在函数内创建，在函数内可访问，函数外不可访问。\n```javascript\nfunction hello(){\n\tvar a = \"tsrot\";\n\talert(a);\n}\n\nhello(); //函数内可访问到tsrot\nalert(a); //error not defined\n```\n\n### 作用域链是什么\n\n了解作用域链之前我们要知道一下几个概念：\n- 变量和函数的声明\n- 函数的生命周期\n- Activetion Object（AO）、Variable Object（VO）\n\n\n#### 变量和函数的声明\n\n在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。\n\n变量声明：变量的声明只有一种方式，那就是用`var`关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：\n（1）因为它只是一种赋值，所以不会声明提前\n```javascript\nalert(a); // undefined\nalert(b); // error \"b\" is not defined\nb = 10;\nvar a = 20;\n```\n（2）直接赋值形式是在执行阶段创建\n```javascript\nalert(a); // undefined, 这个大家都知道\nb = 10;\nalert(b); // 10, 代码执行阶段创建\n \nvar a = 20;\nalert(a); // 20, 代码执行阶段修改\n```\n（3）变量不能删除（delete），属性可以删除\n```javascript\na = 10;\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n \nvar b = 20;\nalert(window.b); // 20\n \nalert(delete b); // false\n \nalert(window.b); // 仍然为 20，因为变量是不能够删除的。\n```\n但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：\n```javascript\neval('var a = 10;');\nalert(window.a); // 10\n \nalert(delete a); // true\n \nalert(window.a); // undefined\n```\n有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。\n\n函数声明：函数的声明有三种方式\n（1）function name( ){ }直接创建方式\n```javascript\nfunction add(a,b){\n\treturn a+b;\n}\n\nadd(5,4);\n```\n（2）new Funtion构建函数创建\n```javascript\nvar add=new Function(\"a\", \"b\", \"return a+b;\");\n\nadd(4,5);\n```\n（3）给变量赋值匿名函数方法创建\n```javascript\nvar add = function(a,b){\n\treturn a+b;\n}\n\nadd(4,5);\n```\n后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。\n\n**注意**：如果变量名和函数名声明时相同，函数优先声明。\n```javascript\nalert(x); // function\n\nvar x = 10;\nalert(x); // 10\n \nx = 20;\n\nfunction x() {};\n \nalert(x); // 20\n```\n\n#### 函数的生命周期\n\n函数的的生命周期分为创建和执行两个阶段。\n\n在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。\n\n在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。\n\n#### 什么是AO、VO\n\n英文解释：\nAO：Activetion Object（活动对象）\nVO：Variable Object（变量对象）\n\nVO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：\n- 变量 (var, 变量声明);\n- 函数声明 (FunctionDeclaration, 缩写为FD);\n- 函数的形参\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined\n```\n\n\nAO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：\n- 函数的所有局部变量\n- 函数的所有命名参数\n- 函数的参数集合\n- 函数的this指向\n\n举个例子：\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\tfunction say(){\n\t\talert(sum);\n\t}\n\treturn sum;\n}\n\nadd(4,5);\n//  我用JS对象来表示AO\n//  AO = {\n//\t    this : window,\n//\t    arguments : [4,5],\n//\t    a : 4,\n//\t    b : 5,\n//\t    say : <reference to function>,\n//\t    sum : undefined\n//  }\n```\n\n#### JavaScript作用域链\n\n现在我们回到主题，作用域链。\n\n当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。\n```javascript\nfunction add(a,b){\n\tvar sum = a + b;\n\treturn sum;\n}\n```\n假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：\n\n```flow\n此时作用域链（Scope Chain）只有一级,就为Global Object\n\n\tscope(add) -> Global Object(VO)\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n\n如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。\n```javascript\nadd(4,5);\n```\n例如，调用add后的作用域链是：\n\n```flow\n此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）\n\n\tscope(add) -> AO -> VO\n\n\tAO = {\n\t\tthis : window,\n\t\targuments : [4,5],\n\t\ta : 4,\n\t\tb : 5,\n\t\tsum : undefined\n\t}\n\t\n\tVO = {\n\t\tthis : window,\n\t\tadd : <reference to function>\n\t}\n```\n在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。\n\n看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：\n```javascript\nvar x = 10;\n \nfunction foo() {\n    var y = 20;\n \n    function bar() {\n        var z = 30;\n \n        console.log(x + y + z);\n    };\n \n    bar()\n};\n \nfoo();\n```\n上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：\n```flow\n此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）\n\n\tscope -> bar.AO -> foo.AO -> Global Object\n\n\tbar.AO = {\n\t\tz : 30,\n\t\t__parent__ : foo.AO\n\t}\n\n\tfoo.AO = {\n\t\ty : 20,\n\t\tbar : <reference to function>,\n\t\t__parent__ : <Global Object>\n\t}\n\t\n\tGlobal Object = {\n\t\tx : 10,\n\t\tfoo : <reference to function>,\n\t\t__parent__ : null\n\t}\n```\n\n未完待续。。。","slug":"深入了解JavaScript，从作用域链开始（1）","published":0,"date":"2017-08-03T10:21:24.111Z","updated":"2017-08-03T10:21:24.111Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96d8000anou9lqpolia0","content":"<h1 id=\"深入了解JavaScript，从作用域链开始（1）\"><a href=\"#深入了解JavaScript，从作用域链开始（1）\" class=\"headerlink\" title=\"深入了解JavaScript，从作用域链开始（1）\"></a>深入了解JavaScript，从作用域链开始（1）</h1><p>地址：<a href=\"http://blog.xieliqun.com/2016/10/05/scope-chain/\" target=\"_blank\" rel=\"external\">http://blog.xieliqun.com/2016/10/05/scope-chain/</a></p>\n<blockquote>\n<p>作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。</p>\n</blockquote>\n<hr>\n<h3 id=\"JavaScript的作用域是什么\"><a href=\"#JavaScript的作用域是什么\" class=\"headerlink\" title=\"JavaScript的作用域是什么\"></a>JavaScript的作用域是什么</h3><p>作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。<br>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。</p>\n<h4 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h4><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</p>\n<h5 id=\"（1）程序最外层定义的函数或者变量\"><a href=\"#（1）程序最外层定义的函数或者变量\" class=\"headerlink\" title=\"（1）程序最外层定义的函数或者变量\"></a>（1）程序最外层定义的函数或者变量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\thello();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(a);     <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">hello();      <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">sayHello();   <span class=\"comment\">//能访问到hello函数，然后也能访问到tsrot</span></div></pre></td></tr></table></figure>\n<h5 id=\"（2）所有末定义直接赋值的变量（不推荐）\"><a href=\"#（2）所有末定义直接赋值的变量（不推荐）\" class=\"headerlink\" title=\"（2）所有末定义直接赋值的变量（不推荐）\"></a>（2）所有末定义直接赋值的变量（不推荐）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\ta = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"string\">\"hello tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(a);  <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">alert(b);  <span class=\"comment\">//error 不能访问</span></div></pre></td></tr></table></figure>\n<h5 id=\"（3）所有window对象的属性和方法\"><a href=\"#（3）所有window对象的属性和方法\" class=\"headerlink\" title=\"（3）所有window对象的属性和方法\"></a>（3）所有window对象的属性和方法</h5><p>一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。</p>\n<h4 id=\"局部作用域（函数作用域）\"><a href=\"#局部作用域（函数作用域）\" class=\"headerlink\" title=\"局部作用域（函数作用域）\"></a>局部作用域（函数作用域）</h4><p>局部作用域在函数内创建，在函数内可访问，函数外不可访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">\talert(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hello(); <span class=\"comment\">//函数内可访问到tsrot</span></div><div class=\"line\">alert(a); <span class=\"comment\">//error not defined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"作用域链是什么\"><a href=\"#作用域链是什么\" class=\"headerlink\" title=\"作用域链是什么\"></a>作用域链是什么</h3><p>了解作用域链之前我们要知道一下几个概念：</p>\n<ul>\n<li>变量和函数的声明</li>\n<li>函数的生命周期</li>\n<li>Activetion Object（AO）、Variable Object（VO）</li>\n</ul>\n<h4 id=\"变量和函数的声明\"><a href=\"#变量和函数的声明\" class=\"headerlink\" title=\"变量和函数的声明\"></a>变量和函数的声明</h4><p>在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。</p>\n<p>变量声明：变量的声明只有一种方式，那就是用<code>var</code>关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：<br>（1）因为它只是一种赋值，所以不会声明提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(a); <span class=\"comment\">// undefined</span></div><div class=\"line\">alert(b); <span class=\"comment\">// error \"b\" is not defined</span></div><div class=\"line\">b = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</div></pre></td></tr></table></figure></p>\n<p>（2）直接赋值形式是在执行阶段创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(a); <span class=\"comment\">// undefined, 这个大家都知道</span></div><div class=\"line\">b = <span class=\"number\">10</span>;</div><div class=\"line\">alert(b); <span class=\"comment\">// 10, 代码执行阶段创建</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</div><div class=\"line\">alert(a); <span class=\"comment\">// 20, 代码执行阶段修改</span></div></pre></td></tr></table></figure></p>\n<p>（3）变量不能删除（delete），属性可以删除<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">10</span>;</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 20</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> b); <span class=\"comment\">// false</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 仍然为 20，因为变量是不能够删除的。</span></div></pre></td></tr></table></figure></p>\n<p>但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = 10;'</span>);</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。</p>\n<p>函数声明：函数的声明有三种方式<br>（1）function name( ){ }直接创建方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure></p>\n<p>（2）new Funtion构建函数创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add=<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a+b;\"</span>);</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>（3）给变量赋值匿名函数方法创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。</p>\n<p><strong>注意</strong>：如果变量名和函数名声明时相同，函数优先声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(x); <span class=\"comment\">// function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\">alert(x); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">x = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">alert(x); <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"函数的生命周期\"><a href=\"#函数的生命周期\" class=\"headerlink\" title=\"函数的生命周期\"></a>函数的生命周期</h4><p>函数的的生命周期分为创建和执行两个阶段。</p>\n<p>在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</p>\n<p>在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</p>\n<h4 id=\"什么是AO、VO\"><a href=\"#什么是AO、VO\" class=\"headerlink\" title=\"什么是AO、VO\"></a>什么是AO、VO</h4><p>英文解释：<br>AO：Activetion Object（活动对象）<br>VO：Variable Object（变量对象）</p>\n<p>VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>\n<ul>\n<li>变量 (var, 变量声明);</li>\n<li>函数声明 (FunctionDeclaration, 缩写为FD);</li>\n<li>函数的形参</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined</span></div></pre></td></tr></table></figure></p>\n<p>AO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：</p>\n<ul>\n<li>函数的所有局部变量</li>\n<li>函数的所有命名参数</li>\n<li>函数的参数集合</li>\n<li>函数的this指向</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">//  我用JS对象来表示AO</span></div><div class=\"line\"><span class=\"comment\">//  AO = &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t    this : window,</span></div><div class=\"line\"><span class=\"comment\">//\t    arguments : [4,5],</span></div><div class=\"line\"><span class=\"comment\">//\t    a : 4,</span></div><div class=\"line\"><span class=\"comment\">//\t    b : 5,</span></div><div class=\"line\"><span class=\"comment\">//\t    say : &lt;reference to function&gt;,</span></div><div class=\"line\"><span class=\"comment\">//\t    sum : undefined</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript作用域链\"><a href=\"#JavaScript作用域链\" class=\"headerlink\" title=\"JavaScript作用域链\"></a>JavaScript作用域链</h4><p>现在我们回到主题，作用域链。</p>\n<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）只有一级,就为Global Object</div><div class=\"line\"></div><div class=\"line\">\tscope(add) -&gt; Global Object(VO)</div><div class=\"line\">\t</div><div class=\"line\">\tVO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\tadd : &lt;reference to function&gt;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>例如，调用add后的作用域链是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）</div><div class=\"line\"></div><div class=\"line\">\tscope(add) -&gt; AO -&gt; VO</div><div class=\"line\"></div><div class=\"line\">\tAO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\targuments : [4,5],</div><div class=\"line\">\t\ta : 4,</div><div class=\"line\">\t\tb : 5,</div><div class=\"line\">\t\tsum : undefined</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tVO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\tadd : &lt;reference to function&gt;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。</p>\n<p>看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(x + y + z);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    bar()</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）</div><div class=\"line\"></div><div class=\"line\">\tscope -&gt; bar.AO -&gt; foo.AO -&gt; Global Object</div><div class=\"line\"></div><div class=\"line\">\tbar.AO = &#123;</div><div class=\"line\">\t\tz : 30,</div><div class=\"line\">\t\t__parent__ : foo.AO</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfoo.AO = &#123;</div><div class=\"line\">\t\ty : 20,</div><div class=\"line\">\t\tbar : &lt;reference to function&gt;,</div><div class=\"line\">\t\t__parent__ : &lt;Global Object&gt;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tGlobal Object = &#123;</div><div class=\"line\">\t\tx : 10,</div><div class=\"line\">\t\tfoo : &lt;reference to function&gt;,</div><div class=\"line\">\t\t__parent__ : null</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入了解JavaScript，从作用域链开始（1）\"><a href=\"#深入了解JavaScript，从作用域链开始（1）\" class=\"headerlink\" title=\"深入了解JavaScript，从作用域链开始（1）\"></a>深入了解JavaScript，从作用域链开始（1）</h1><p>地址：<a href=\"http://blog.xieliqun.com/2016/10/05/scope-chain/\" target=\"_blank\" rel=\"external\">http://blog.xieliqun.com/2016/10/05/scope-chain/</a></p>\n<blockquote>\n<p>作用域是每种计算机语言最重要的基础之一，当然它也是JavaScript最重要的概念之一。要想真正的深入了解JavaScript，了解JavaScript的作用域链非常必要。现在让我们深入了解JavaScript作用域和作用域链的工作原理。</p>\n</blockquote>\n<hr>\n<h3 id=\"JavaScript的作用域是什么\"><a href=\"#JavaScript的作用域是什么\" class=\"headerlink\" title=\"JavaScript的作用域是什么\"></a>JavaScript的作用域是什么</h3><p>作用域，在维基百科上解释是：在电脑程序设计中，作用域（scope，或译作有效范围）是名字（name）与实体（entity）的绑定（binding）保持有效的那部分计算机程序。<br>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种，局部作用域又称为函数作用域。</p>\n<h4 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h4><p>在代码中任何地方都能访问到的对象拥有全局作用域，一般来说以下几种情形拥有全局作用域：</p>\n<h5 id=\"（1）程序最外层定义的函数或者变量\"><a href=\"#（1）程序最外层定义的函数或者变量\" class=\"headerlink\" title=\"（1）程序最外层定义的函数或者变量\"></a>（1）程序最外层定义的函数或者变量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\thello();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(a);     <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">hello();      <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">sayHello();   <span class=\"comment\">//能访问到hello函数，然后也能访问到tsrot</span></div></pre></td></tr></table></figure>\n<h5 id=\"（2）所有末定义直接赋值的变量（不推荐）\"><a href=\"#（2）所有末定义直接赋值的变量（不推荐）\" class=\"headerlink\" title=\"（2）所有末定义直接赋值的变量（不推荐）\"></a>（2）所有末定义直接赋值的变量（不推荐）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\ta = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> b = <span class=\"string\">\"hello tsrot\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">alert(a);  <span class=\"comment\">//能访问到tsrot</span></div><div class=\"line\">alert(b);  <span class=\"comment\">//error 不能访问</span></div></pre></td></tr></table></figure>\n<h5 id=\"（3）所有window对象的属性和方法\"><a href=\"#（3）所有window对象的属性和方法\" class=\"headerlink\" title=\"（3）所有window对象的属性和方法\"></a>（3）所有window对象的属性和方法</h5><p>一般情况下，window对象的内置属性都拥有全局作用域，例如window.name、window.location、window.top等等。</p>\n<h4 id=\"局部作用域（函数作用域）\"><a href=\"#局部作用域（函数作用域）\" class=\"headerlink\" title=\"局部作用域（函数作用域）\"></a>局部作用域（函数作用域）</h4><p>局部作用域在函数内创建，在函数内可访问，函数外不可访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> a = <span class=\"string\">\"tsrot\"</span>;</div><div class=\"line\">\talert(a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">hello(); <span class=\"comment\">//函数内可访问到tsrot</span></div><div class=\"line\">alert(a); <span class=\"comment\">//error not defined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"作用域链是什么\"><a href=\"#作用域链是什么\" class=\"headerlink\" title=\"作用域链是什么\"></a>作用域链是什么</h3><p>了解作用域链之前我们要知道一下几个概念：</p>\n<ul>\n<li>变量和函数的声明</li>\n<li>函数的生命周期</li>\n<li>Activetion Object（AO）、Variable Object（VO）</li>\n</ul>\n<h4 id=\"变量和函数的声明\"><a href=\"#变量和函数的声明\" class=\"headerlink\" title=\"变量和函数的声明\"></a>变量和函数的声明</h4><p>在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进行预解析，然后再去执行其他代码。</p>\n<p>变量声明：变量的声明只有一种方式，那就是用<code>var</code>关键字声明，直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）。它们有一下区别：<br>（1）因为它只是一种赋值，所以不会声明提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(a); <span class=\"comment\">// undefined</span></div><div class=\"line\">alert(b); <span class=\"comment\">// error \"b\" is not defined</span></div><div class=\"line\">b = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</div></pre></td></tr></table></figure></p>\n<p>（2）直接赋值形式是在执行阶段创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(a); <span class=\"comment\">// undefined, 这个大家都知道</span></div><div class=\"line\">b = <span class=\"number\">10</span>;</div><div class=\"line\">alert(b); <span class=\"comment\">// 10, 代码执行阶段创建</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">20</span>;</div><div class=\"line\">alert(a); <span class=\"comment\">// 20, 代码执行阶段修改</span></div></pre></td></tr></table></figure></p>\n<p>（3）变量不能删除（delete），属性可以删除<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">10</span>;</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">20</span>;</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 20</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> b); <span class=\"comment\">// false</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.b); <span class=\"comment\">// 仍然为 20，因为变量是不能够删除的。</span></div></pre></td></tr></table></figure></p>\n<p>但是，这里有一个意外情况，就是在“eval”的上下文中，变量是可以删除的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = 10;'</span>);</div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"keyword\">delete</span> a); <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\">alert(<span class=\"built_in\">window</span>.a); <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>有些debug工具也是可以删除的，因为它们使用了 eval()方法来执行代码的。</p>\n<p>函数声明：函数的声明有三种方式<br>（1）function name( ){ }直接创建方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure></p>\n<p>（2）new Funtion构建函数创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add=<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"return a+b;\"</span>);</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>（3）给变量赋值匿名函数方法创建<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>后面两种方法，在声明前访问时，返回的都是一个undefined的变量。当然，在声明后访问它们都是一个function的函数。</p>\n<p><strong>注意</strong>：如果变量名和函数名声明时相同，函数优先声明。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(x); <span class=\"comment\">// function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\">alert(x); <span class=\"comment\">// 10</span></div><div class=\"line\"> </div><div class=\"line\">x = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\"> </div><div class=\"line\">alert(x); <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"函数的生命周期\"><a href=\"#函数的生命周期\" class=\"headerlink\" title=\"函数的生命周期\"></a>函数的生命周期</h4><p>函数的的生命周期分为创建和执行两个阶段。</p>\n<p>在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</p>\n<p>在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</p>\n<h4 id=\"什么是AO、VO\"><a href=\"#什么是AO、VO\" class=\"headerlink\" title=\"什么是AO、VO\"></a>什么是AO、VO</h4><p>英文解释：<br>AO：Activetion Object（活动对象）<br>VO：Variable Object（变量对象）</p>\n<p>VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p>\n<ul>\n<li>变量 (var, 变量声明);</li>\n<li>函数声明 (FunctionDeclaration, 缩写为FD);</li>\n<li>函数的形参</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined</span></div></pre></td></tr></table></figure></p>\n<p>AO对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。该对象包含了：</p>\n<ul>\n<li>函数的所有局部变量</li>\n<li>函数的所有命名参数</li>\n<li>函数的参数集合</li>\n<li>函数的this指向</li>\n</ul>\n<p>举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\talert(sum);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">//  我用JS对象来表示AO</span></div><div class=\"line\"><span class=\"comment\">//  AO = &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t    this : window,</span></div><div class=\"line\"><span class=\"comment\">//\t    arguments : [4,5],</span></div><div class=\"line\"><span class=\"comment\">//\t    a : 4,</span></div><div class=\"line\"><span class=\"comment\">//\t    b : 5,</span></div><div class=\"line\"><span class=\"comment\">//\t    say : &lt;reference to function&gt;,</span></div><div class=\"line\"><span class=\"comment\">//\t    sum : undefined</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"JavaScript作用域链\"><a href=\"#JavaScript作用域链\" class=\"headerlink\" title=\"JavaScript作用域链\"></a>JavaScript作用域链</h4><p>现在我们回到主题，作用域链。</p>\n<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。作用域第一个对象始终是当前执行代码所在环境的变量对象（VO）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> sum = a + b;</div><div class=\"line\">\t<span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>假设函数是在全局作用域中创建的，在函数a创建的时候，它的作用域链填入全局对象,全局对象中有所有全局变量，此时的全局变量就是VO。此时的作用域链就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）只有一级,就为Global Object</div><div class=\"line\"></div><div class=\"line\">\tscope(add) -&gt; Global Object(VO)</div><div class=\"line\">\t</div><div class=\"line\">\tVO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\tadd : &lt;reference to function&gt;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>如果是函数执行阶段，那么将其activation object（AO）作为作用域链第一个对象，第二个对象是上级函数的执行上下文AO，下一个对象依次类推。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">5</span>);</div></pre></td></tr></table></figure></p>\n<p>例如，调用add后的作用域链是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）有两级，第一级为AO，然后Global Object（VO）</div><div class=\"line\"></div><div class=\"line\">\tscope(add) -&gt; AO -&gt; VO</div><div class=\"line\"></div><div class=\"line\">\tAO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\targuments : [4,5],</div><div class=\"line\">\t\ta : 4,</div><div class=\"line\">\t\tb : 5,</div><div class=\"line\">\t\tsum : undefined</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tVO = &#123;</div><div class=\"line\">\t\tthis : window,</div><div class=\"line\">\t\tadd : &lt;reference to function&gt;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。</p>\n<p>看过上面的内容后，可能还有人不懂，我再通熟易懂的解释一遍，先举个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(x + y + z);</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    bar()</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果为”60″，函数bar可以直接访问”z”，然后通过作用域链访问上层的”x”和”y”。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">此时作用域链（Scope Chain）有三级，第一级为bar AO，第二级为foo AO,然后Global Object（VO）</div><div class=\"line\"></div><div class=\"line\">\tscope -&gt; bar.AO -&gt; foo.AO -&gt; Global Object</div><div class=\"line\"></div><div class=\"line\">\tbar.AO = &#123;</div><div class=\"line\">\t\tz : 30,</div><div class=\"line\">\t\t__parent__ : foo.AO</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tfoo.AO = &#123;</div><div class=\"line\">\t\ty : 20,</div><div class=\"line\">\t\tbar : &lt;reference to function&gt;,</div><div class=\"line\">\t\t__parent__ : &lt;Global Object&gt;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\tGlobal Object = &#123;</div><div class=\"line\">\t\tx : 10,</div><div class=\"line\">\t\tfoo : &lt;reference to function&gt;,</div><div class=\"line\">\t\t__parent__ : null</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>未完待续。。。</p>\n"},{"_content":"# 深入了解JavaScript，优化作用域链（2）\n\n地址：http://blog.xieliqun.com/2016/10/06/scope-chain-2/\n\n> 作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。\n\n\n----------\n\n### 尽量使用局部变量\n\n从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。\n\n全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。\n\n一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：\n```javascript\nfunction toggle(){\n\tif(document.getElementById('btn').className == 'active'){\n\t\tdocument.getElementById('btn').className = '';\n\t\t//do someThing\n\t}else{\n\t\tdocument.getElementById('btn').className = 'active';\n\t\t//do someThing\n\t}\n}\n```\n以上代码中`document.getElementById('btn').className`被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到`document`，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：\n```javascript\nfunction toggle(){\n\tvar btnClass = document.getElementById('btn').className;\n\tif(btnClass == 'active'){\n\t\tbtnClass = '';\n\t\t//do someThing\n\t}else{\n\t\tbtnClass = 'active';\n\t\t//do someThing\n\t}\n}\n```\n\n### 尽量不要改变作用域链\n\n函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。\n\nwith语句是对象的快捷应用方式，用来避免书写重复代码。例如：\n```javascript\nvar o = {href:\"github.com\"};  \nvar href = \"blog.xieliqun.com\";  \n\nfunction buildUrl(){  \n     var q = \"?name=tsrot\";       \n     with(o){ \n          var url = href+q;  \n     }      \n     return url;  \n}\n  \nvar result = buildUrl();  \nalert(result);  //github.com?name=tsrot\nalert(href);    //blog.xieliqun.com\n```\n第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。\n\n当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：\n```flow\n\n\tscope -> with.AO -> with.VO -> buildUrl.AO -> Global Object\n\n\twith.AO = {\n\t\turl : undefined\n\t}\n\n\twith.VO = {\n\t\thref : \"github.com\"\n\t}\n\n\tbuildUrl.AO = {\n\t\tq : \"?name=tsrot\"\n\t}\n\t\n\tGlobal Object = {\n\t\to : {href:\"github.com\"},\n\t\thref : \"blog.xieliqun.com\",\n\t\tbuildUrl : <reference to function>,\n\t\tresult : undefined\n\t}\n```\n另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。\n\n\n### 闭包问题\n\n一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(i);\n\t\t}\n\t}\n}\n\nshow();\n```\n当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？\n\n由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\t(function(n){\n\t\t\tli[n].onclick = function(){\n\t\t\t\talert(n);\n\t\t\t}\n\t\t})(i)\n\t}\n}\n\nshow();\n```\n为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。\n\n闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。","source":"_drafts/深入了解JavaScript，优化作用域链（2）.md","raw":"# 深入了解JavaScript，优化作用域链（2）\n\n地址：http://blog.xieliqun.com/2016/10/06/scope-chain-2/\n\n> 作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。\n\n\n----------\n\n### 尽量使用局部变量\n\n从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。\n\n全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。\n\n一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：\n```javascript\nfunction toggle(){\n\tif(document.getElementById('btn').className == 'active'){\n\t\tdocument.getElementById('btn').className = '';\n\t\t//do someThing\n\t}else{\n\t\tdocument.getElementById('btn').className = 'active';\n\t\t//do someThing\n\t}\n}\n```\n以上代码中`document.getElementById('btn').className`被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到`document`，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：\n```javascript\nfunction toggle(){\n\tvar btnClass = document.getElementById('btn').className;\n\tif(btnClass == 'active'){\n\t\tbtnClass = '';\n\t\t//do someThing\n\t}else{\n\t\tbtnClass = 'active';\n\t\t//do someThing\n\t}\n}\n```\n\n### 尽量不要改变作用域链\n\n函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。\n\nwith语句是对象的快捷应用方式，用来避免书写重复代码。例如：\n```javascript\nvar o = {href:\"github.com\"};  \nvar href = \"blog.xieliqun.com\";  \n\nfunction buildUrl(){  \n     var q = \"?name=tsrot\";       \n     with(o){ \n          var url = href+q;  \n     }      \n     return url;  \n}\n  \nvar result = buildUrl();  \nalert(result);  //github.com?name=tsrot\nalert(href);    //blog.xieliqun.com\n```\n第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。\n\n当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：\n```flow\n\n\tscope -> with.AO -> with.VO -> buildUrl.AO -> Global Object\n\n\twith.AO = {\n\t\turl : undefined\n\t}\n\n\twith.VO = {\n\t\thref : \"github.com\"\n\t}\n\n\tbuildUrl.AO = {\n\t\tq : \"?name=tsrot\"\n\t}\n\t\n\tGlobal Object = {\n\t\to : {href:\"github.com\"},\n\t\thref : \"blog.xieliqun.com\",\n\t\tbuildUrl : <reference to function>,\n\t\tresult : undefined\n\t}\n```\n另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。\n\n\n### 闭包问题\n\n一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\tli[i].onclick = function(){\n\t\t\talert(i);\n\t\t}\n\t}\n}\n\nshow();\n```\n当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？\n\n由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：\n```javascript\nfunction show(){\n\tvar li = document.getElementsByTagName('li');\n\tvar length = li.length;\n\tfor(var i=0;i<length;i++){\n\t\t(function(n){\n\t\t\tli[n].onclick = function(){\n\t\t\t\talert(n);\n\t\t\t}\n\t\t})(i)\n\t}\n}\n\nshow();\n```\n为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。\n\n闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。","slug":"深入了解JavaScript，优化作用域链（2）","published":0,"date":"2017-08-03T10:21:24.111Z","updated":"2017-08-03T10:21:24.111Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96d9000bnou9e4j0ben1","content":"<h1 id=\"深入了解JavaScript，优化作用域链（2）\"><a href=\"#深入了解JavaScript，优化作用域链（2）\" class=\"headerlink\" title=\"深入了解JavaScript，优化作用域链（2）\"></a>深入了解JavaScript，优化作用域链（2）</h1><p>地址：<a href=\"http://blog.xieliqun.com/2016/10/06/scope-chain-2/\" target=\"_blank\" rel=\"external\">http://blog.xieliqun.com/2016/10/06/scope-chain-2/</a></p>\n<blockquote>\n<p>作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。</p>\n</blockquote>\n<hr>\n<h3 id=\"尽量使用局部变量\"><a href=\"#尽量使用局部变量\" class=\"headerlink\" title=\"尽量使用局部变量\"></a>尽量使用局部变量</h3><p>从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。</p>\n<p>全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。</p>\n<p>一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className == <span class=\"string\">'active'</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">'active'</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码中<code>document.getElementById(&#39;btn&#39;).className</code>被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到<code>document</code>，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> btnClass = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(btnClass == <span class=\"string\">'active'</span>)&#123;</div><div class=\"line\">\t\tbtnClass = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tbtnClass = <span class=\"string\">'active'</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"尽量不要改变作用域链\"><a href=\"#尽量不要改变作用域链\" class=\"headerlink\" title=\"尽量不要改变作用域链\"></a>尽量不要改变作用域链</h3><p>函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。</p>\n<p>with语句是对象的快捷应用方式，用来避免书写重复代码。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">href</span>:<span class=\"string\">\"github.com\"</span>&#125;;  </div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"string\">\"blog.xieliqun.com\"</span>;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">     <span class=\"keyword\">var</span> q = <span class=\"string\">\"?name=tsrot\"</span>;       </div><div class=\"line\">     <span class=\"keyword\">with</span>(o)&#123; </div><div class=\"line\">          <span class=\"keyword\">var</span> url = href+q;  </div><div class=\"line\">     &#125;      </div><div class=\"line\">     <span class=\"keyword\">return</span> url;  </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> result = buildUrl();  </div><div class=\"line\">alert(result);  <span class=\"comment\">//github.com?name=tsrot</span></div><div class=\"line\">alert(href);    <span class=\"comment\">//blog.xieliqun.com</span></div></pre></td></tr></table></figure></p>\n<p>第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。</p>\n<p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">scope -&gt; with.AO -&gt; with.VO -&gt; buildUrl.AO -&gt; Global Object</div><div class=\"line\"></div><div class=\"line\">with.AO = &#123;</div><div class=\"line\">\turl : undefined</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">with.VO = &#123;</div><div class=\"line\">\thref : &quot;github.com&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">buildUrl.AO = &#123;</div><div class=\"line\">\tq : &quot;?name=tsrot&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Global Object = &#123;</div><div class=\"line\">\to : &#123;href:&quot;github.com&quot;&#125;,</div><div class=\"line\">\thref : &quot;blog.xieliqun.com&quot;,</div><div class=\"line\">\tbuildUrl : &lt;reference to function&gt;,</div><div class=\"line\">\tresult : undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。</p>\n<h3 id=\"闭包问题\"><a href=\"#闭包问题\" class=\"headerlink\" title=\"闭包问题\"></a>闭包问题</h3><p>一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\talert(i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div></pre></td></tr></table></figure></p>\n<p>当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？</p>\n<p>由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">\t\t\tli[n].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t\talert(n);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div></pre></td></tr></table></figure></p>\n<p>为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。</p>\n<p>闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"深入了解JavaScript，优化作用域链（2）\"><a href=\"#深入了解JavaScript，优化作用域链（2）\" class=\"headerlink\" title=\"深入了解JavaScript，优化作用域链（2）\"></a>深入了解JavaScript，优化作用域链（2）</h1><p>地址：<a href=\"http://blog.xieliqun.com/2016/10/06/scope-chain-2/\" target=\"_blank\" rel=\"external\">http://blog.xieliqun.com/2016/10/06/scope-chain-2/</a></p>\n<blockquote>\n<p>作为一个良好的开发者必需考虑程序的运行性能，作用域链的层级关系是JavaScript性能优化的一个重要部分。因为这关系到变量在内存里的读写速度。</p>\n</blockquote>\n<hr>\n<h3 id=\"尽量使用局部变量\"><a href=\"#尽量使用局部变量\" class=\"headerlink\" title=\"尽量使用局部变量\"></a>尽量使用局部变量</h3><p>从作用域链的结构可以看出，在执行上下文的作用域链中，标识符所在的位置越深，读写速度就会越慢。</p>\n<p>全局变量总是存在于执行上下文作用域链的最末端，因此在标识符解析的时候，查找全局变量是最慢的，并且全局变量将常驻内存直到程序退出，而局部变量会在函数运行完直接销毁。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。</p>\n<p>一个好的经验法则是：如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className == <span class=\"string\">'active'</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className = <span class=\"string\">'active'</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码中<code>document.getElementById(&#39;btn&#39;).className</code>被引用了三次，查找该变量必须遍历整个作用域链，直到最后在全局对象中才能找到<code>document</code>，然后再去找它的方法和属性，这样严重的影响了程序性能。我们可以改为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggle</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> btnClass = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>).className;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(btnClass == <span class=\"string\">'active'</span>)&#123;</div><div class=\"line\">\t\tbtnClass = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\tbtnClass = <span class=\"string\">'active'</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//do someThing</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"尽量不要改变作用域链\"><a href=\"#尽量不要改变作用域链\" class=\"headerlink\" title=\"尽量不要改变作用域链\"></a>尽量不要改变作用域链</h3><p>函数每次执行时对应的执行上下文都是独一无二的，所以多次调用同一个函数就会导致创建多个执行上下文，当函数执行完毕，执行上下文会被销毁。每一个执行上下文都和一个作用域链关联。一般情况下，在执行上下文运行的过程中，其作用域链只会被 with 语句和 catch 语句影响。</p>\n<p>with语句是对象的快捷应用方式，用来避免书写重复代码。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">href</span>:<span class=\"string\">\"github.com\"</span>&#125;;  </div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"string\">\"blog.xieliqun.com\"</span>;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildUrl</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">     <span class=\"keyword\">var</span> q = <span class=\"string\">\"?name=tsrot\"</span>;       </div><div class=\"line\">     <span class=\"keyword\">with</span>(o)&#123; </div><div class=\"line\">          <span class=\"keyword\">var</span> url = href+q;  </div><div class=\"line\">     &#125;      </div><div class=\"line\">     <span class=\"keyword\">return</span> url;  </div><div class=\"line\">&#125;</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">var</span> result = buildUrl();  </div><div class=\"line\">alert(result);  <span class=\"comment\">//github.com?name=tsrot</span></div><div class=\"line\">alert(href);    <span class=\"comment\">//blog.xieliqun.com</span></div></pre></td></tr></table></figure></p>\n<p>第一个alert使用的o对象里的href，所以弹出github.com?name=tsrot，第二个alert使用的就是全局的href。</p>\n<p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。此时的作用域链为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">scope -&gt; with.AO -&gt; with.VO -&gt; buildUrl.AO -&gt; Global Object</div><div class=\"line\"></div><div class=\"line\">with.AO = &#123;</div><div class=\"line\">\turl : undefined</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">with.VO = &#123;</div><div class=\"line\">\thref : &quot;github.com&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">buildUrl.AO = &#123;</div><div class=\"line\">\tq : &quot;?name=tsrot&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Global Object = &#123;</div><div class=\"line\">\to : &#123;href:&quot;github.com&quot;&#125;,</div><div class=\"line\">\thref : &quot;blog.xieliqun.com&quot;,</div><div class=\"line\">\tbuildUrl : &lt;reference to function&gt;,</div><div class=\"line\">\tresult : undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外一个会改变作用域链的是try-catch语句中的catch语句。当try代码块中发生错误时，执行过程会跳转到catch语句，然后把异常对象推入一个可变对象并置于作用域的头部。在catch代码块内部，函数的所有局部变量将会被放在第二个作用域链对象中。</p>\n<h3 id=\"闭包问题\"><a href=\"#闭包问题\" class=\"headerlink\" title=\"闭包问题\"></a>闭包问题</h3><p>一个函数只要内部函数未销毁（内部函数存在被调用的可能），这个函数就不会销毁，将一直存在于内存中，只有所有内部函数都销毁了，并所有的业务代码都已执行完，这个函数才会被释放。我们看看最常见的闭包问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\tli[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\talert(i);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div></pre></td></tr></table></figure></p>\n<p>当点击li标签时，弹出的一直都是length的大小。这是一个比较经典的错误。为什么会这样呢？</p>\n<p>由于show的内部函数（click事件处理程序时刻有调用可能），所以show的作用域链不能被销毁（只能页面卸载是销毁），i的值一直保持for循环执行完后的length值，此时的click的函数只是进行了声明而未运行，当click触发的时候，函数才开始执行，这个时候i的值已经是length了。所以每次触发onclick的时候才会alert length。我们进行改一下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'li'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = li.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\t(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">\t\t\tli[n].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t\talert(n);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;)(i)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div></pre></td></tr></table></figure></p>\n<p>为什么这样就行了呢，这时候onclick引用的变量变成了n，而由于立即执行函数的原因，每个onclick函数在作用域链中分别保持着对应的n（0~length-1），这时候就可以了。</p>\n<p>闭包会使子函数保持其作用域链的所有变量及函数与内存中，内存消耗很大，在使用的时候尽量销毁父函数不再使用的变量。你经常访问一些范围之外的标识符，每次访问都将导致一些性能损失。</p>\n"},{"title":"WebView 调试","date":"2015-12-08T08:33:24.000Z","_content":"### 前言\nh5项目在通过APP WebView访问\n\n### 调试环境配置\n测试手机一台（Android）\n手机软件助手，如豌豆夹\n\n\n\n### 实例演示","source":"_posts/WebView-调试.md","raw":"title: \"WebView\\_调试\"\ndate: 2015-12-08 16:33:24\ntags:\n---\n### 前言\nh5项目在通过APP WebView访问\n\n### 调试环境配置\n测试手机一台（Android）\n手机软件助手，如豌豆夹\n\n\n\n### 实例演示","slug":"WebView-调试","published":1,"updated":"2017-08-03T10:21:24.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96da000cnou94khn9ljd","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>h5项目在通过APP WebView访问</p>\n<h3 id=\"调试环境配置\"><a href=\"#调试环境配置\" class=\"headerlink\" title=\"调试环境配置\"></a>调试环境配置</h3><p>测试手机一台（Android）<br>手机软件助手，如豌豆夹</p>\n<h3 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>h5项目在通过APP WebView访问</p>\n<h3 id=\"调试环境配置\"><a href=\"#调试环境配置\" class=\"headerlink\" title=\"调试环境配置\"></a>调试环境配置</h3><p>测试手机一台（Android）<br>手机软件助手，如豌豆夹</p>\n<h3 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h3>"},{"title":"script标签的工作原理","date":"2015-06-12T08:33:25.000Z","_content":"\n浏览器一边下载HTML网页，一边开始解析\n解析过程中，发现script标签\n暂停解析，网页渲染的控制权转交给JavaScript引擎\n如果script标签引用了外部脚本，就下载该脚本，否则就直接执行\n执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页\n\nhttp://javascript.ruanyifeng.com/bom/engine.html\n","source":"_posts/js.md","raw":"title: script标签的工作原理\ndate: 2015-06-12 16:33:25\n---\n\n浏览器一边下载HTML网页，一边开始解析\n解析过程中，发现script标签\n暂停解析，网页渲染的控制权转交给JavaScript引擎\n如果script标签引用了外部脚本，就下载该脚本，否则就直接执行\n执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页\n\nhttp://javascript.ruanyifeng.com/bom/engine.html\n","slug":"js","published":1,"updated":"2017-08-03T10:21:24.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96db000dnou93efjalmg","content":"<p>浏览器一边下载HTML网页，一边开始解析<br>解析过程中，发现script标签<br>暂停解析，网页渲染的控制权转交给JavaScript引擎<br>如果script标签引用了外部脚本，就下载该脚本，否则就直接执行<br>执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页</p>\n<p><a href=\"http://javascript.ruanyifeng.com/bom/engine.html\" target=\"_blank\" rel=\"external\">http://javascript.ruanyifeng.com/bom/engine.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>浏览器一边下载HTML网页，一边开始解析<br>解析过程中，发现script标签<br>暂停解析，网页渲染的控制权转交给JavaScript引擎<br>如果script标签引用了外部脚本，就下载该脚本，否则就直接执行<br>执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页</p>\n<p><a href=\"http://javascript.ruanyifeng.com/bom/engine.html\" target=\"_blank\" rel=\"external\">http://javascript.ruanyifeng.com/bom/engine.html</a></p>\n"},{"_content":"> Node中关于Buffer的用法\n\n#### Buffer的简单理解\nNode中的Buffer有点像数组Array，只是它是用来操作字节的。  \nBuffer在Node进程启动的时候就已经被加载，并将其放在了全局对象（global）中，因此使用时无需require。\n\n#### Buffer对象\nBuffer对象类似于数组，元素为16进制的两位数，即00-ff，对应十进制则为0-255的数值。\n```javascript\nvar str = \"hello\"\nvar buf = new Buffer(str)\n\n// 此时buf即为\n<Buffer 68 65 6c 6c 6f>\n\n// 转化成十进制则为\n104 101 108 108 111\n\n// 可与ASCII码表对照得出字符\n\n// 再来看看中文\nstr = \"你好\"\nbuf = new Buffer(str)   // *\n\n//此处buf为\n<Buffer e4 bd a0 e5 a5 bd>\n\n// 其实上述星号注释的代码把buffer的第二个参数省略了，默认为UTF-8\n// 这说明了UTF-8编码下的中文占用3个元素\n// 而字母和半角标点符号占用1个字符\n```\n为什么说Buffer类似数组，因为它拥有和数组类似的取值方式\n```javascript\n// 1.\nvar buf = new Buffer(10)\nconsole.log(buf.length)  // 10\n\n// 上述分配了一个长10个字节的Buffer对象，可以通过下标的方式获取获取值\nconsole.loe(buf[5])  // 这个值是随机的，在0-255之间的随机值\n\n// 我们也可以使用下标进行赋值\nbuf[5] = 100\n\n// 有一点需要注意，如果赋值如果小于0，则会将该值逐次加256直到得到一个0-255之间的值\n// 如果得到大于255的值，则逐次减256直到得到一个0-255之间的值。\n// 如果是一个小数，则只保留整数部分\n```\n\n#### Buffer与String的转换\n1. String到Buffer  \n`var buff = new Buffer(\"hello\")`\n2. Buffer到String  \n`var str = buf.toString()`\n\n#### Buffer的拼接\n对于英文，我们可以类似如下方式进行正常的拼接\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"test.md\")\nvar data = ''\nrs.on(\"data\", function(chunk) {\n  data += chunk\n  // 等价于\n  // data = data.toString() + chunk.toString()\n})\nrs.on(\"end\", function(){\n  console.log(data)\n})\n```\n对于中文，上述方式便会出现问题\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\nvar data = ''\nrs.on(\"data\", function(chunk) {\n  data += chunk\n  // 等价于\n  // data = data.toString() + chunk.toString()\n})\nrs.on(\"end\", function(){\n  console.log(data)\n})\n\n// 最终会打印出类似如下的效果\n事件循���和请求���象构成了Node.js���异步I/O模型的���个基本���素，这也是典���的消费���生产者场景。\n```\n造成以上原因是因为我们设置了可读流每次读取11个字节，即一个chunk，也即一个buffer中包含11个字节。而UTF8下的中文是3个字节为一个中文，于是便造成了第四个中文只截取了前两个字节。\n\n当然默认的highWaterMark是64KB，因此在每次读取的字节数越大的情况下，乱码的情况便会减少。\n\n正确拼接的方式可以有如下两种  \n1.设置可读流的编码  \n```javascript\n  var fs = require(\"fs\")\n  var rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\n  rs.setEncodeing(\"utf8\")\n  ...\n```\n这种方式依靠了StringDecoder模块的作用，将被截断的字节临时保存起来，再与下一次读取到的字节合并，解决了乱码的现象。当然，它只能支持少数的编码   \n\n2.不使用+chunk的方式  \n```javascript\n  var iconv = require(\"iconv-lite\")\n  var fs = require(\"fs\")\n  var rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\n  var chunks = []\n  var size = 0\n  rs.on(\"data\", function() {chunk} {\n    chunks.push(chunk)\n    size += chunk.length\n  })\n  rs.on(\"end\", function(){\n    var buffer = null\n    // switich(chunks.length) {\n    //   case 0: buffer = new Buffer(0)\n    //     break;\n    //   case 1: buffer = chunks[0]\n    //     break;\n    //   default:\n    //     buffer = new Buffer(chunks.length)\n        // for(var i = 0, pos = 0, l = chunks.length; i < l; i++) {\n        //   var chunk = chunks[i]\n        //   chunk.copy(buffer, pos)\n        //   pos += chunk.length\n        // } \n    }\n    // 可以使用Buffer的concat来代替上面代码，因为它内部便是使用了类似上面的代码\n    buffer = Buffer.concat(chunks, size)\n    var str = iconv.decode(buf, \"utf8\")\n    console.log(iconv)\n  })\n```\n\n#### Buffer对象中关于writeXXX和readXXX方法的用法\nBuffer中，如果用于存储数值的话，使用这些api便可以大大节省空间，因为它会将数值转化为二进制进行存储。  \n这些api可以分为两部分来说，一部分是存储类型为整型的数值，另一部分是存储类型为浮点型的数值。  \n而浮点型又分为单精度和双精度浮点型。\n\n首先我们看看整型  \n```javascript\n读部分：  \nbuf.readInt8(offset[, noAssert])  \nbuf.readInt16BE(offset[, noAssert])  \nbuf.readInt16LE(offset[, noAssert])  \nbuf.readInt32BE(offset[, noAssert])  \nbuf.readInt32LE(offset[, noAssert])  \nbuf.readIntBE(offset, byteLength[, noAssert])  \nbuf.readIntLE(offset, byteLength[, noAssert])  \nbuf.readUInt8(offset[, noAssert])  \nbuf.readUInt16BE(offset[, noAssert])  \nbuf.readUInt16LE(offset[, noAssert])  \nbuf.readUInt32BE(offset[, noAssert])  \nbuf.readUInt32LE(offset[, noAssert])  \nbuf.readUIntBE(offset, byteLength[, noAssert])  \nbuf.readUIntLE(offset, byteLength[, noAssert])  \n\n写部分：  \nbuf.writeInt8(value, offset[, noAssert])  \nbuf.writeInt16BE(value, offset[, noAssert])  \nbuf.writeInt16LE(value, offset[, noAssert])   \nbuf.writeInt32BE(value, offset[, noAssert])  \nbuf.writeInt32LE(value, offset[, noAssert])  \nbuf.writeIntBE(value, offset, byteLength[, noAssert])  \nbuf.writeIntLE(value, offset, byteLength[, noAssert])  \nbuf.writeUInt8(value, offset[, noAssert])  \nbuf.writeUInt16BE(value, offset[, noAssert])  \nbuf.writeUInt16LE(value, offset[, noAssert])  \nbuf.writeUInt32BE(value, offset[, noAssert])  \nbuf.writeUInt32LE(value, offset[, noAssert])  \nbuf.writeUIntBE(value, offset, byteLength[, noAssert])  \nbuf.writeUIntLE(value, offset, byteLength[, noAssert])  \n```\n可看到，它既可以读/写有符号的整型，也可以是读/写无符号的整型。  \n其中BE和LE的意思则为Big Endian 和 Little Endian。这个不在本文讨论之内，自行网上搜索吧。  \n\nint8则说明最大读/写8为二进制数，int16则为16位，以此类推，而像intBE和intLE这些就是最大48位二进制数了。\n\n写入时，传入的value只要是符合规则数值即可，可以是任何进制的数值。\n```javascript\nvar buf = new Buffer(6);\nvar timeStamp = 1447656645380\nbuf.writeUIntBE(timeStamp, 0, 6);\n// <Buffer 01 51 0f 0f 63 04>\n\ntimeStampe = buf.readUIntBE(0, 6)\n// 1447656645380\n```\n我们只要注意，传入Buffer构造函数的数值是字节，1个字节是8位二进制数，因此6个字节便是48位，所以需要使用writeUIntBE来写入  \n1447656645380的二进制为10101000100001111000011110110001100000100  \n有41位，也因此我们只能使用writeUIntBE来写。  \n如果我们一开始将时间戳作为字符串写入Buffer中的话，则需要耗费13个字节进行存储。  \n使用这种方式，现在只需要6个字节了，大大减少存储空间\n\n浮点型数值\n```javascript\n读部分\nbuf.readDoubleBE(offset[, noAssert])\nbuf.readDoubleLE(offset[, noAssert])\nbuf.readFloatBE(offset[, noAssert])\nbuf.readFloatLE(offset[, noAssert])\n\n写部分\nbuf.writeDoubleBE(value, offset[, noAssert])\nbuf.writeDoubleLE(value, offset[, noAssert])\nbuf.writeFloatBE(value, offset[, noAssert])\nbuf.writeFloatLE(value, offset[, noAssert])\n```\ndouble为双精度，数值最大为64位；而float为单精度，数值最大为32位。即都支持小数。\n\n因此我们应该充分利用这些特点来读写数据，充分利用我们的空间。  \n\n#### 6.0开始的Buffer\n从6.0开始的node，不再推荐使用`new Buffer`的这种方式来创建Buffer对象，这种方式会存在内存泄漏的问题。应该使用如下方式来创建：\n```javascript\nconst buff = Buffer.alloc(10)\n\n//相当于\nconst buff = new Buffer(10)\nbuff.fill(0)\n```\nalloc即为申请n个字节的内存空间\n\n同时6.0还提供了其他创建Buffer的api。\n\nBuffer.allocUnsafe，很明显这种方式创建的Buffer对象也是不安全的，数据可能是之前已经存在的旧数据。\n\nBuffer.from也是一种方式，可以根据创建包含指定字符串的Buffer对象。\n\n这里有一篇关于读写数值的[文章](https://cnodejs.org/topic/56499568d28aa64101600fdc)值得一看  \n6.0的用户也可以看看[这篇](https://segmentfault.com/a/1190000005368752)\n","source":"_drafts/深入浅出Buffer#node#$2016-05-31$.md","raw":"> Node中关于Buffer的用法\n\n#### Buffer的简单理解\nNode中的Buffer有点像数组Array，只是它是用来操作字节的。  \nBuffer在Node进程启动的时候就已经被加载，并将其放在了全局对象（global）中，因此使用时无需require。\n\n#### Buffer对象\nBuffer对象类似于数组，元素为16进制的两位数，即00-ff，对应十进制则为0-255的数值。\n```javascript\nvar str = \"hello\"\nvar buf = new Buffer(str)\n\n// 此时buf即为\n<Buffer 68 65 6c 6c 6f>\n\n// 转化成十进制则为\n104 101 108 108 111\n\n// 可与ASCII码表对照得出字符\n\n// 再来看看中文\nstr = \"你好\"\nbuf = new Buffer(str)   // *\n\n//此处buf为\n<Buffer e4 bd a0 e5 a5 bd>\n\n// 其实上述星号注释的代码把buffer的第二个参数省略了，默认为UTF-8\n// 这说明了UTF-8编码下的中文占用3个元素\n// 而字母和半角标点符号占用1个字符\n```\n为什么说Buffer类似数组，因为它拥有和数组类似的取值方式\n```javascript\n// 1.\nvar buf = new Buffer(10)\nconsole.log(buf.length)  // 10\n\n// 上述分配了一个长10个字节的Buffer对象，可以通过下标的方式获取获取值\nconsole.loe(buf[5])  // 这个值是随机的，在0-255之间的随机值\n\n// 我们也可以使用下标进行赋值\nbuf[5] = 100\n\n// 有一点需要注意，如果赋值如果小于0，则会将该值逐次加256直到得到一个0-255之间的值\n// 如果得到大于255的值，则逐次减256直到得到一个0-255之间的值。\n// 如果是一个小数，则只保留整数部分\n```\n\n#### Buffer与String的转换\n1. String到Buffer  \n`var buff = new Buffer(\"hello\")`\n2. Buffer到String  \n`var str = buf.toString()`\n\n#### Buffer的拼接\n对于英文，我们可以类似如下方式进行正常的拼接\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"test.md\")\nvar data = ''\nrs.on(\"data\", function(chunk) {\n  data += chunk\n  // 等价于\n  // data = data.toString() + chunk.toString()\n})\nrs.on(\"end\", function(){\n  console.log(data)\n})\n```\n对于中文，上述方式便会出现问题\n```javascript\nvar fs = require(\"fs\")\nvar rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\nvar data = ''\nrs.on(\"data\", function(chunk) {\n  data += chunk\n  // 等价于\n  // data = data.toString() + chunk.toString()\n})\nrs.on(\"end\", function(){\n  console.log(data)\n})\n\n// 最终会打印出类似如下的效果\n事件循���和请求���象构成了Node.js���异步I/O模型的���个基本���素，这也是典���的消费���生产者场景。\n```\n造成以上原因是因为我们设置了可读流每次读取11个字节，即一个chunk，也即一个buffer中包含11个字节。而UTF8下的中文是3个字节为一个中文，于是便造成了第四个中文只截取了前两个字节。\n\n当然默认的highWaterMark是64KB，因此在每次读取的字节数越大的情况下，乱码的情况便会减少。\n\n正确拼接的方式可以有如下两种  \n1.设置可读流的编码  \n```javascript\n  var fs = require(\"fs\")\n  var rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\n  rs.setEncodeing(\"utf8\")\n  ...\n```\n这种方式依靠了StringDecoder模块的作用，将被截断的字节临时保存起来，再与下一次读取到的字节合并，解决了乱码的现象。当然，它只能支持少数的编码   \n\n2.不使用+chunk的方式  \n```javascript\n  var iconv = require(\"iconv-lite\")\n  var fs = require(\"fs\")\n  var rs = fs.createReadStream(\"test.md\", {highWaterMark: 11})\n  var chunks = []\n  var size = 0\n  rs.on(\"data\", function() {chunk} {\n    chunks.push(chunk)\n    size += chunk.length\n  })\n  rs.on(\"end\", function(){\n    var buffer = null\n    // switich(chunks.length) {\n    //   case 0: buffer = new Buffer(0)\n    //     break;\n    //   case 1: buffer = chunks[0]\n    //     break;\n    //   default:\n    //     buffer = new Buffer(chunks.length)\n        // for(var i = 0, pos = 0, l = chunks.length; i < l; i++) {\n        //   var chunk = chunks[i]\n        //   chunk.copy(buffer, pos)\n        //   pos += chunk.length\n        // } \n    }\n    // 可以使用Buffer的concat来代替上面代码，因为它内部便是使用了类似上面的代码\n    buffer = Buffer.concat(chunks, size)\n    var str = iconv.decode(buf, \"utf8\")\n    console.log(iconv)\n  })\n```\n\n#### Buffer对象中关于writeXXX和readXXX方法的用法\nBuffer中，如果用于存储数值的话，使用这些api便可以大大节省空间，因为它会将数值转化为二进制进行存储。  \n这些api可以分为两部分来说，一部分是存储类型为整型的数值，另一部分是存储类型为浮点型的数值。  \n而浮点型又分为单精度和双精度浮点型。\n\n首先我们看看整型  \n```javascript\n读部分：  \nbuf.readInt8(offset[, noAssert])  \nbuf.readInt16BE(offset[, noAssert])  \nbuf.readInt16LE(offset[, noAssert])  \nbuf.readInt32BE(offset[, noAssert])  \nbuf.readInt32LE(offset[, noAssert])  \nbuf.readIntBE(offset, byteLength[, noAssert])  \nbuf.readIntLE(offset, byteLength[, noAssert])  \nbuf.readUInt8(offset[, noAssert])  \nbuf.readUInt16BE(offset[, noAssert])  \nbuf.readUInt16LE(offset[, noAssert])  \nbuf.readUInt32BE(offset[, noAssert])  \nbuf.readUInt32LE(offset[, noAssert])  \nbuf.readUIntBE(offset, byteLength[, noAssert])  \nbuf.readUIntLE(offset, byteLength[, noAssert])  \n\n写部分：  \nbuf.writeInt8(value, offset[, noAssert])  \nbuf.writeInt16BE(value, offset[, noAssert])  \nbuf.writeInt16LE(value, offset[, noAssert])   \nbuf.writeInt32BE(value, offset[, noAssert])  \nbuf.writeInt32LE(value, offset[, noAssert])  \nbuf.writeIntBE(value, offset, byteLength[, noAssert])  \nbuf.writeIntLE(value, offset, byteLength[, noAssert])  \nbuf.writeUInt8(value, offset[, noAssert])  \nbuf.writeUInt16BE(value, offset[, noAssert])  \nbuf.writeUInt16LE(value, offset[, noAssert])  \nbuf.writeUInt32BE(value, offset[, noAssert])  \nbuf.writeUInt32LE(value, offset[, noAssert])  \nbuf.writeUIntBE(value, offset, byteLength[, noAssert])  \nbuf.writeUIntLE(value, offset, byteLength[, noAssert])  \n```\n可看到，它既可以读/写有符号的整型，也可以是读/写无符号的整型。  \n其中BE和LE的意思则为Big Endian 和 Little Endian。这个不在本文讨论之内，自行网上搜索吧。  \n\nint8则说明最大读/写8为二进制数，int16则为16位，以此类推，而像intBE和intLE这些就是最大48位二进制数了。\n\n写入时，传入的value只要是符合规则数值即可，可以是任何进制的数值。\n```javascript\nvar buf = new Buffer(6);\nvar timeStamp = 1447656645380\nbuf.writeUIntBE(timeStamp, 0, 6);\n// <Buffer 01 51 0f 0f 63 04>\n\ntimeStampe = buf.readUIntBE(0, 6)\n// 1447656645380\n```\n我们只要注意，传入Buffer构造函数的数值是字节，1个字节是8位二进制数，因此6个字节便是48位，所以需要使用writeUIntBE来写入  \n1447656645380的二进制为10101000100001111000011110110001100000100  \n有41位，也因此我们只能使用writeUIntBE来写。  \n如果我们一开始将时间戳作为字符串写入Buffer中的话，则需要耗费13个字节进行存储。  \n使用这种方式，现在只需要6个字节了，大大减少存储空间\n\n浮点型数值\n```javascript\n读部分\nbuf.readDoubleBE(offset[, noAssert])\nbuf.readDoubleLE(offset[, noAssert])\nbuf.readFloatBE(offset[, noAssert])\nbuf.readFloatLE(offset[, noAssert])\n\n写部分\nbuf.writeDoubleBE(value, offset[, noAssert])\nbuf.writeDoubleLE(value, offset[, noAssert])\nbuf.writeFloatBE(value, offset[, noAssert])\nbuf.writeFloatLE(value, offset[, noAssert])\n```\ndouble为双精度，数值最大为64位；而float为单精度，数值最大为32位。即都支持小数。\n\n因此我们应该充分利用这些特点来读写数据，充分利用我们的空间。  \n\n#### 6.0开始的Buffer\n从6.0开始的node，不再推荐使用`new Buffer`的这种方式来创建Buffer对象，这种方式会存在内存泄漏的问题。应该使用如下方式来创建：\n```javascript\nconst buff = Buffer.alloc(10)\n\n//相当于\nconst buff = new Buffer(10)\nbuff.fill(0)\n```\nalloc即为申请n个字节的内存空间\n\n同时6.0还提供了其他创建Buffer的api。\n\nBuffer.allocUnsafe，很明显这种方式创建的Buffer对象也是不安全的，数据可能是之前已经存在的旧数据。\n\nBuffer.from也是一种方式，可以根据创建包含指定字符串的Buffer对象。\n\n这里有一篇关于读写数值的[文章](https://cnodejs.org/topic/56499568d28aa64101600fdc)值得一看  \n6.0的用户也可以看看[这篇](https://segmentfault.com/a/1190000005368752)\n","slug":"深入浅出Buffer#node#$2016-05-31$","published":0,"date":"2017-08-03T10:21:24.112Z","updated":"2017-08-03T10:21:24.112Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dc000enou9ywqggj25","content":"<blockquote>\n<p>Node中关于Buffer的用法</p>\n</blockquote>\n<h4 id=\"Buffer的简单理解\"><a href=\"#Buffer的简单理解\" class=\"headerlink\" title=\"Buffer的简单理解\"></a>Buffer的简单理解</h4><p>Node中的Buffer有点像数组Array，只是它是用来操作字节的。<br>Buffer在Node进程启动的时候就已经被加载，并将其放在了全局对象（global）中，因此使用时无需require。</p>\n<h4 id=\"Buffer对象\"><a href=\"#Buffer对象\" class=\"headerlink\" title=\"Buffer对象\"></a>Buffer对象</h4><p>Buffer对象类似于数组，元素为16进制的两位数，即00-ff，对应十进制则为0-255的数值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此时buf即为</span></div><div class=\"line\">&lt;Buffer <span class=\"number\">68</span> <span class=\"number\">65</span> <span class=\"number\">6</span>c <span class=\"number\">6</span>c <span class=\"number\">6</span>f&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转化成十进制则为</span></div><div class=\"line\"><span class=\"number\">104</span> <span class=\"number\">101</span> <span class=\"number\">108</span> <span class=\"number\">108</span> <span class=\"number\">111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可与ASCII码表对照得出字符</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再来看看中文</span></div><div class=\"line\">str = <span class=\"string\">\"你好\"</span></div><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(str)   <span class=\"comment\">// *</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//此处buf为</span></div><div class=\"line\">&lt;Buffer e4 bd a0 e5 a5 bd&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其实上述星号注释的代码把buffer的第二个参数省略了，默认为UTF-8</span></div><div class=\"line\"><span class=\"comment\">// 这说明了UTF-8编码下的中文占用3个元素</span></div><div class=\"line\"><span class=\"comment\">// 而字母和半角标点符号占用1个字符</span></div></pre></td></tr></table></figure></p>\n<p>为什么说Buffer类似数组，因为它拥有和数组类似的取值方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.length)  <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 上述分配了一个长10个字节的Buffer对象，可以通过下标的方式获取获取值</span></div><div class=\"line\"><span class=\"built_in\">console</span>.loe(buf[<span class=\"number\">5</span>])  <span class=\"comment\">// 这个值是随机的，在0-255之间的随机值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 我们也可以使用下标进行赋值</span></div><div class=\"line\">buf[<span class=\"number\">5</span>] = <span class=\"number\">100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有一点需要注意，如果赋值如果小于0，则会将该值逐次加256直到得到一个0-255之间的值</span></div><div class=\"line\"><span class=\"comment\">// 如果得到大于255的值，则逐次减256直到得到一个0-255之间的值。</span></div><div class=\"line\"><span class=\"comment\">// 如果是一个小数，则只保留整数部分</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Buffer与String的转换\"><a href=\"#Buffer与String的转换\" class=\"headerlink\" title=\"Buffer与String的转换\"></a>Buffer与String的转换</h4><ol>\n<li>String到Buffer<br><code>var buff = new Buffer(&quot;hello&quot;)</code></li>\n<li>Buffer到String<br><code>var str = buf.toString()</code></li>\n</ol>\n<h4 id=\"Buffer的拼接\"><a href=\"#Buffer的拼接\" class=\"headerlink\" title=\"Buffer的拼接\"></a>Buffer的拼接</h4><p>对于英文，我们可以类似如下方式进行正常的拼接<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  data += chunk</div><div class=\"line\">  <span class=\"comment\">// 等价于</span></div><div class=\"line\">  <span class=\"comment\">// data = data.toString() + chunk.toString()</span></div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>对于中文，上述方式便会出现问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  data += chunk</div><div class=\"line\">  <span class=\"comment\">// 等价于</span></div><div class=\"line\">  <span class=\"comment\">// data = data.toString() + chunk.toString()</span></div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 最终会打印出类似如下的效果</span></div><div class=\"line\">事件循���和请求���象构成了Node.js���异步I/O模型的���个基本���素，这也是典���的消费���生产者场景。</div></pre></td></tr></table></figure></p>\n<p>造成以上原因是因为我们设置了可读流每次读取11个字节，即一个chunk，也即一个buffer中包含11个字节。而UTF8下的中文是3个字节为一个中文，于是便造成了第四个中文只截取了前两个字节。</p>\n<p>当然默认的highWaterMark是64KB，因此在每次读取的字节数越大的情况下，乱码的情况便会减少。</p>\n<p>正确拼接的方式可以有如下两种<br>1.设置可读流的编码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\">rs.setEncodeing(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>这种方式依靠了StringDecoder模块的作用，将被截断的字节临时保存起来，再与下一次读取到的字节合并，解决了乱码的现象。当然，它只能支持少数的编码   </p>\n<p>2.不使用+chunk的方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iconv = <span class=\"built_in\">require</span>(<span class=\"string\">\"iconv-lite\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> chunks = []</div><div class=\"line\"><span class=\"keyword\">var</span> size = <span class=\"number\">0</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;chunk&#125; &#123;</div><div class=\"line\">  chunks.push(chunk)</div><div class=\"line\">  size += chunk.length</div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> buffer = <span class=\"literal\">null</span></div><div class=\"line\">  <span class=\"comment\">// switich(chunks.length) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   case 0: buffer = new Buffer(0)</span></div><div class=\"line\">  <span class=\"comment\">//     break;</span></div><div class=\"line\">  <span class=\"comment\">//   case 1: buffer = chunks[0]</span></div><div class=\"line\">  <span class=\"comment\">//     break;</span></div><div class=\"line\">  <span class=\"comment\">//   default:</span></div><div class=\"line\">  <span class=\"comment\">//     buffer = new Buffer(chunks.length)</span></div><div class=\"line\">      <span class=\"comment\">// for(var i = 0, pos = 0, l = chunks.length; i &lt; l; i++) &#123;</span></div><div class=\"line\">      <span class=\"comment\">//   var chunk = chunks[i]</span></div><div class=\"line\">      <span class=\"comment\">//   chunk.copy(buffer, pos)</span></div><div class=\"line\">      <span class=\"comment\">//   pos += chunk.length</span></div><div class=\"line\">      <span class=\"comment\">// &#125; </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 可以使用Buffer的concat来代替上面代码，因为它内部便是使用了类似上面的代码</span></div><div class=\"line\">  buffer = Buffer.concat(chunks, size)</div><div class=\"line\">  <span class=\"keyword\">var</span> str = iconv.decode(buf, <span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(iconv)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"Buffer对象中关于writeXXX和readXXX方法的用法\"><a href=\"#Buffer对象中关于writeXXX和readXXX方法的用法\" class=\"headerlink\" title=\"Buffer对象中关于writeXXX和readXXX方法的用法\"></a>Buffer对象中关于writeXXX和readXXX方法的用法</h4><p>Buffer中，如果用于存储数值的话，使用这些api便可以大大节省空间，因为它会将数值转化为二进制进行存储。<br>这些api可以分为两部分来说，一部分是存储类型为整型的数值，另一部分是存储类型为浮点型的数值。<br>而浮点型又分为单精度和双精度浮点型。</p>\n<p>首先我们看看整型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">读部分：  </div><div class=\"line\">buf.readInt8(offset[, noAssert])  </div><div class=\"line\">buf.readInt16BE(offset[, noAssert])  </div><div class=\"line\">buf.readInt16LE(offset[, noAssert])  </div><div class=\"line\">buf.readInt32BE(offset[, noAssert])  </div><div class=\"line\">buf.readInt32LE(offset[, noAssert])  </div><div class=\"line\">buf.readIntBE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readIntLE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readUInt8(offset[, noAssert])  </div><div class=\"line\">buf.readUInt16BE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt16LE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt32BE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt32LE(offset[, noAssert])  </div><div class=\"line\">buf.readUIntBE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readUIntLE(offset, byteLength[, noAssert])  </div><div class=\"line\"></div><div class=\"line\">写部分：  </div><div class=\"line\">buf.writeInt8(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt16BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt16LE(value, offset[, noAssert])   </div><div class=\"line\">buf.writeInt32BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt32LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeIntBE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeIntLE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeUInt8(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt16BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt16LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt32BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt32LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUIntBE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeUIntLE(value, offset, byteLength[, noAssert])</div></pre></td></tr></table></figure></p>\n<p>可看到，它既可以读/写有符号的整型，也可以是读/写无符号的整型。<br>其中BE和LE的意思则为Big Endian 和 Little Endian。这个不在本文讨论之内，自行网上搜索吧。  </p>\n<p>int8则说明最大读/写8为二进制数，int16则为16位，以此类推，而像intBE和intLE这些就是最大48位二进制数了。</p>\n<p>写入时，传入的value只要是符合规则数值即可，可以是任何进制的数值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> timeStamp = <span class=\"number\">1447656645380</span></div><div class=\"line\">buf.writeUIntBE(timeStamp, <span class=\"number\">0</span>, <span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"comment\">// &lt;Buffer 01 51 0f 0f 63 04&gt;</span></div><div class=\"line\"></div><div class=\"line\">timeStampe = buf.readUIntBE(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"comment\">// 1447656645380</span></div></pre></td></tr></table></figure></p>\n<p>我们只要注意，传入Buffer构造函数的数值是字节，1个字节是8位二进制数，因此6个字节便是48位，所以需要使用writeUIntBE来写入<br>1447656645380的二进制为10101000100001111000011110110001100000100<br>有41位，也因此我们只能使用writeUIntBE来写。<br>如果我们一开始将时间戳作为字符串写入Buffer中的话，则需要耗费13个字节进行存储。<br>使用这种方式，现在只需要6个字节了，大大减少存储空间</p>\n<p>浮点型数值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">读部分</div><div class=\"line\">buf.readDoubleBE(offset[, noAssert])</div><div class=\"line\">buf.readDoubleLE(offset[, noAssert])</div><div class=\"line\">buf.readFloatBE(offset[, noAssert])</div><div class=\"line\">buf.readFloatLE(offset[, noAssert])</div><div class=\"line\"></div><div class=\"line\">写部分</div><div class=\"line\">buf.writeDoubleBE(value, offset[, noAssert])</div><div class=\"line\">buf.writeDoubleLE(value, offset[, noAssert])</div><div class=\"line\">buf.writeFloatBE(value, offset[, noAssert])</div><div class=\"line\">buf.writeFloatLE(value, offset[, noAssert])</div></pre></td></tr></table></figure></p>\n<p>double为双精度，数值最大为64位；而float为单精度，数值最大为32位。即都支持小数。</p>\n<p>因此我们应该充分利用这些特点来读写数据，充分利用我们的空间。  </p>\n<h4 id=\"6-0开始的Buffer\"><a href=\"#6-0开始的Buffer\" class=\"headerlink\" title=\"6.0开始的Buffer\"></a>6.0开始的Buffer</h4><p>从6.0开始的node，不再推荐使用<code>new Buffer</code>的这种方式来创建Buffer对象，这种方式会存在内存泄漏的问题。应该使用如下方式来创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> buff = Buffer.alloc(<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//相当于</span></div><div class=\"line\"><span class=\"keyword\">const</span> buff = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>)</div><div class=\"line\">buff.fill(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>alloc即为申请n个字节的内存空间</p>\n<p>同时6.0还提供了其他创建Buffer的api。</p>\n<p>Buffer.allocUnsafe，很明显这种方式创建的Buffer对象也是不安全的，数据可能是之前已经存在的旧数据。</p>\n<p>Buffer.from也是一种方式，可以根据创建包含指定字符串的Buffer对象。</p>\n<p>这里有一篇关于读写数值的<a href=\"https://cnodejs.org/topic/56499568d28aa64101600fdc\" target=\"_blank\" rel=\"external\">文章</a>值得一看<br>6.0的用户也可以看看<a href=\"https://segmentfault.com/a/1190000005368752\" target=\"_blank\" rel=\"external\">这篇</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Node中关于Buffer的用法</p>\n</blockquote>\n<h4 id=\"Buffer的简单理解\"><a href=\"#Buffer的简单理解\" class=\"headerlink\" title=\"Buffer的简单理解\"></a>Buffer的简单理解</h4><p>Node中的Buffer有点像数组Array，只是它是用来操作字节的。<br>Buffer在Node进程启动的时候就已经被加载，并将其放在了全局对象（global）中，因此使用时无需require。</p>\n<h4 id=\"Buffer对象\"><a href=\"#Buffer对象\" class=\"headerlink\" title=\"Buffer对象\"></a>Buffer对象</h4><p>Buffer对象类似于数组，元素为16进制的两位数，即00-ff，对应十进制则为0-255的数值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 此时buf即为</span></div><div class=\"line\">&lt;Buffer <span class=\"number\">68</span> <span class=\"number\">65</span> <span class=\"number\">6</span>c <span class=\"number\">6</span>c <span class=\"number\">6</span>f&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转化成十进制则为</span></div><div class=\"line\"><span class=\"number\">104</span> <span class=\"number\">101</span> <span class=\"number\">108</span> <span class=\"number\">108</span> <span class=\"number\">111</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可与ASCII码表对照得出字符</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 再来看看中文</span></div><div class=\"line\">str = <span class=\"string\">\"你好\"</span></div><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(str)   <span class=\"comment\">// *</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//此处buf为</span></div><div class=\"line\">&lt;Buffer e4 bd a0 e5 a5 bd&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其实上述星号注释的代码把buffer的第二个参数省略了，默认为UTF-8</span></div><div class=\"line\"><span class=\"comment\">// 这说明了UTF-8编码下的中文占用3个元素</span></div><div class=\"line\"><span class=\"comment\">// 而字母和半角标点符号占用1个字符</span></div></pre></td></tr></table></figure></p>\n<p>为什么说Buffer类似数组，因为它拥有和数组类似的取值方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.</span></div><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.length)  <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 上述分配了一个长10个字节的Buffer对象，可以通过下标的方式获取获取值</span></div><div class=\"line\"><span class=\"built_in\">console</span>.loe(buf[<span class=\"number\">5</span>])  <span class=\"comment\">// 这个值是随机的，在0-255之间的随机值</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 我们也可以使用下标进行赋值</span></div><div class=\"line\">buf[<span class=\"number\">5</span>] = <span class=\"number\">100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有一点需要注意，如果赋值如果小于0，则会将该值逐次加256直到得到一个0-255之间的值</span></div><div class=\"line\"><span class=\"comment\">// 如果得到大于255的值，则逐次减256直到得到一个0-255之间的值。</span></div><div class=\"line\"><span class=\"comment\">// 如果是一个小数，则只保留整数部分</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"Buffer与String的转换\"><a href=\"#Buffer与String的转换\" class=\"headerlink\" title=\"Buffer与String的转换\"></a>Buffer与String的转换</h4><ol>\n<li>String到Buffer<br><code>var buff = new Buffer(&quot;hello&quot;)</code></li>\n<li>Buffer到String<br><code>var str = buf.toString()</code></li>\n</ol>\n<h4 id=\"Buffer的拼接\"><a href=\"#Buffer的拼接\" class=\"headerlink\" title=\"Buffer的拼接\"></a>Buffer的拼接</h4><p>对于英文，我们可以类似如下方式进行正常的拼接<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  data += chunk</div><div class=\"line\">  <span class=\"comment\">// 等价于</span></div><div class=\"line\">  <span class=\"comment\">// data = data.toString() + chunk.toString()</span></div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>对于中文，上述方式便会出现问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">  data += chunk</div><div class=\"line\">  <span class=\"comment\">// 等价于</span></div><div class=\"line\">  <span class=\"comment\">// data = data.toString() + chunk.toString()</span></div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 最终会打印出类似如下的效果</span></div><div class=\"line\">事件循���和请求���象构成了Node.js���异步I/O模型的���个基本���素，这也是典���的消费���生产者场景。</div></pre></td></tr></table></figure></p>\n<p>造成以上原因是因为我们设置了可读流每次读取11个字节，即一个chunk，也即一个buffer中包含11个字节。而UTF8下的中文是3个字节为一个中文，于是便造成了第四个中文只截取了前两个字节。</p>\n<p>当然默认的highWaterMark是64KB，因此在每次读取的字节数越大的情况下，乱码的情况便会减少。</p>\n<p>正确拼接的方式可以有如下两种<br>1.设置可读流的编码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\">rs.setEncodeing(<span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>这种方式依靠了StringDecoder模块的作用，将被截断的字节临时保存起来，再与下一次读取到的字节合并，解决了乱码的现象。当然，它只能支持少数的编码   </p>\n<p>2.不使用+chunk的方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iconv = <span class=\"built_in\">require</span>(<span class=\"string\">\"iconv-lite\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> rs = fs.createReadStream(<span class=\"string\">\"test.md\"</span>, &#123;<span class=\"attr\">highWaterMark</span>: <span class=\"number\">11</span>&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> chunks = []</div><div class=\"line\"><span class=\"keyword\">var</span> size = <span class=\"number\">0</span></div><div class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;chunk&#125; &#123;</div><div class=\"line\">  chunks.push(chunk)</div><div class=\"line\">  size += chunk.length</div><div class=\"line\">&#125;)</div><div class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> buffer = <span class=\"literal\">null</span></div><div class=\"line\">  <span class=\"comment\">// switich(chunks.length) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//   case 0: buffer = new Buffer(0)</span></div><div class=\"line\">  <span class=\"comment\">//     break;</span></div><div class=\"line\">  <span class=\"comment\">//   case 1: buffer = chunks[0]</span></div><div class=\"line\">  <span class=\"comment\">//     break;</span></div><div class=\"line\">  <span class=\"comment\">//   default:</span></div><div class=\"line\">  <span class=\"comment\">//     buffer = new Buffer(chunks.length)</span></div><div class=\"line\">      <span class=\"comment\">// for(var i = 0, pos = 0, l = chunks.length; i &lt; l; i++) &#123;</span></div><div class=\"line\">      <span class=\"comment\">//   var chunk = chunks[i]</span></div><div class=\"line\">      <span class=\"comment\">//   chunk.copy(buffer, pos)</span></div><div class=\"line\">      <span class=\"comment\">//   pos += chunk.length</span></div><div class=\"line\">      <span class=\"comment\">// &#125; </span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 可以使用Buffer的concat来代替上面代码，因为它内部便是使用了类似上面的代码</span></div><div class=\"line\">  buffer = Buffer.concat(chunks, size)</div><div class=\"line\">  <span class=\"keyword\">var</span> str = iconv.decode(buf, <span class=\"string\">\"utf8\"</span>)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(iconv)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"Buffer对象中关于writeXXX和readXXX方法的用法\"><a href=\"#Buffer对象中关于writeXXX和readXXX方法的用法\" class=\"headerlink\" title=\"Buffer对象中关于writeXXX和readXXX方法的用法\"></a>Buffer对象中关于writeXXX和readXXX方法的用法</h4><p>Buffer中，如果用于存储数值的话，使用这些api便可以大大节省空间，因为它会将数值转化为二进制进行存储。<br>这些api可以分为两部分来说，一部分是存储类型为整型的数值，另一部分是存储类型为浮点型的数值。<br>而浮点型又分为单精度和双精度浮点型。</p>\n<p>首先我们看看整型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">读部分：  </div><div class=\"line\">buf.readInt8(offset[, noAssert])  </div><div class=\"line\">buf.readInt16BE(offset[, noAssert])  </div><div class=\"line\">buf.readInt16LE(offset[, noAssert])  </div><div class=\"line\">buf.readInt32BE(offset[, noAssert])  </div><div class=\"line\">buf.readInt32LE(offset[, noAssert])  </div><div class=\"line\">buf.readIntBE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readIntLE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readUInt8(offset[, noAssert])  </div><div class=\"line\">buf.readUInt16BE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt16LE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt32BE(offset[, noAssert])  </div><div class=\"line\">buf.readUInt32LE(offset[, noAssert])  </div><div class=\"line\">buf.readUIntBE(offset, byteLength[, noAssert])  </div><div class=\"line\">buf.readUIntLE(offset, byteLength[, noAssert])  </div><div class=\"line\"></div><div class=\"line\">写部分：  </div><div class=\"line\">buf.writeInt8(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt16BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt16LE(value, offset[, noAssert])   </div><div class=\"line\">buf.writeInt32BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeInt32LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeIntBE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeIntLE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeUInt8(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt16BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt16LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt32BE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUInt32LE(value, offset[, noAssert])  </div><div class=\"line\">buf.writeUIntBE(value, offset, byteLength[, noAssert])  </div><div class=\"line\">buf.writeUIntLE(value, offset, byteLength[, noAssert])</div></pre></td></tr></table></figure></p>\n<p>可看到，它既可以读/写有符号的整型，也可以是读/写无符号的整型。<br>其中BE和LE的意思则为Big Endian 和 Little Endian。这个不在本文讨论之内，自行网上搜索吧。  </p>\n<p>int8则说明最大读/写8为二进制数，int16则为16位，以此类推，而像intBE和intLE这些就是最大48位二进制数了。</p>\n<p>写入时，传入的value只要是符合规则数值即可，可以是任何进制的数值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> timeStamp = <span class=\"number\">1447656645380</span></div><div class=\"line\">buf.writeUIntBE(timeStamp, <span class=\"number\">0</span>, <span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"comment\">// &lt;Buffer 01 51 0f 0f 63 04&gt;</span></div><div class=\"line\"></div><div class=\"line\">timeStampe = buf.readUIntBE(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"comment\">// 1447656645380</span></div></pre></td></tr></table></figure></p>\n<p>我们只要注意，传入Buffer构造函数的数值是字节，1个字节是8位二进制数，因此6个字节便是48位，所以需要使用writeUIntBE来写入<br>1447656645380的二进制为10101000100001111000011110110001100000100<br>有41位，也因此我们只能使用writeUIntBE来写。<br>如果我们一开始将时间戳作为字符串写入Buffer中的话，则需要耗费13个字节进行存储。<br>使用这种方式，现在只需要6个字节了，大大减少存储空间</p>\n<p>浮点型数值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">读部分</div><div class=\"line\">buf.readDoubleBE(offset[, noAssert])</div><div class=\"line\">buf.readDoubleLE(offset[, noAssert])</div><div class=\"line\">buf.readFloatBE(offset[, noAssert])</div><div class=\"line\">buf.readFloatLE(offset[, noAssert])</div><div class=\"line\"></div><div class=\"line\">写部分</div><div class=\"line\">buf.writeDoubleBE(value, offset[, noAssert])</div><div class=\"line\">buf.writeDoubleLE(value, offset[, noAssert])</div><div class=\"line\">buf.writeFloatBE(value, offset[, noAssert])</div><div class=\"line\">buf.writeFloatLE(value, offset[, noAssert])</div></pre></td></tr></table></figure></p>\n<p>double为双精度，数值最大为64位；而float为单精度，数值最大为32位。即都支持小数。</p>\n<p>因此我们应该充分利用这些特点来读写数据，充分利用我们的空间。  </p>\n<h4 id=\"6-0开始的Buffer\"><a href=\"#6-0开始的Buffer\" class=\"headerlink\" title=\"6.0开始的Buffer\"></a>6.0开始的Buffer</h4><p>从6.0开始的node，不再推荐使用<code>new Buffer</code>的这种方式来创建Buffer对象，这种方式会存在内存泄漏的问题。应该使用如下方式来创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> buff = Buffer.alloc(<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//相当于</span></div><div class=\"line\"><span class=\"keyword\">const</span> buff = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>)</div><div class=\"line\">buff.fill(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<p>alloc即为申请n个字节的内存空间</p>\n<p>同时6.0还提供了其他创建Buffer的api。</p>\n<p>Buffer.allocUnsafe，很明显这种方式创建的Buffer对象也是不安全的，数据可能是之前已经存在的旧数据。</p>\n<p>Buffer.from也是一种方式，可以根据创建包含指定字符串的Buffer对象。</p>\n<p>这里有一篇关于读写数值的<a href=\"https://cnodejs.org/topic/56499568d28aa64101600fdc\" target=\"_blank\" rel=\"external\">文章</a>值得一看<br>6.0的用户也可以看看<a href=\"https://segmentfault.com/a/1190000005368752\" target=\"_blank\" rel=\"external\">这篇</a></p>\n"},{"title":"nginx配置支持cors","date":"2016-10-20T04:54:12.000Z","_content":"\n\n```\n#\n# Wide-open CORS config for nginx\n#\nlocation / {\n     if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        #\n        # Om nom nom cookies\n        #\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        #\n        # Custom headers and headers various browsers *should* be OK with but aren't\n        #\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n        #\n        # Tell client that this pre-flight info is valid for 20 days\n        #\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type' 'text/plain charset=UTF-8';\n        add_header 'Content-Length' 0;\n        return 204;\n     }\n     if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n     }\n     if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n     }\n}\n```","source":"_posts/nginx-cors.md","raw":"---\ntitle: nginx配置支持cors\ndate: 2016-10-20 12:54:12\ntags:\n---\n\n\n```\n#\n# Wide-open CORS config for nginx\n#\nlocation / {\n     if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        #\n        # Om nom nom cookies\n        #\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        #\n        # Custom headers and headers various browsers *should* be OK with but aren't\n        #\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n        #\n        # Tell client that this pre-flight info is valid for 20 days\n        #\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type' 'text/plain charset=UTF-8';\n        add_header 'Content-Length' 0;\n        return 204;\n     }\n     if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n     }\n     if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n     }\n}\n```","slug":"nginx-cors","published":1,"updated":"2017-08-03T10:21:24.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dd000fnou93fjk2iqh","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\"># Wide-open CORS config for nginx</div><div class=\"line\">#</div><div class=\"line\">location / &#123;</div><div class=\"line\">     if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Om nom nom cookies</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Custom headers and headers various browsers *should* be OK with but aren&apos;t</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Tell client that this pre-flight info is valid for 20 days</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Max-Age&apos; 1728000;</div><div class=\"line\">        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</div><div class=\"line\">        add_header &apos;Content-Length&apos; 0;</div><div class=\"line\">        return 204;</div><div class=\"line\">     &#125;</div><div class=\"line\">     if ($request_method = &apos;POST&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">     &#125;</div><div class=\"line\">     if ($request_method = &apos;GET&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">#</div><div class=\"line\"># Wide-open CORS config for nginx</div><div class=\"line\">#</div><div class=\"line\">location / &#123;</div><div class=\"line\">     if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Om nom nom cookies</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Custom headers and headers various browsers *should* be OK with but aren&apos;t</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">        #</div><div class=\"line\">        # Tell client that this pre-flight info is valid for 20 days</div><div class=\"line\">        #</div><div class=\"line\">        add_header &apos;Access-Control-Max-Age&apos; 1728000;</div><div class=\"line\">        add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;;</div><div class=\"line\">        add_header &apos;Content-Length&apos; 0;</div><div class=\"line\">        return 204;</div><div class=\"line\">     &#125;</div><div class=\"line\">     if ($request_method = &apos;POST&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">     &#125;</div><div class=\"line\">     if ($request_method = &apos;GET&apos;) &#123;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET, POST, OPTIONS&apos;;</div><div class=\"line\">        add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"东方财富频道从0到1前端页面改造","date":"2017-01-23T02:38:25.000Z","_content":"\n### 目标\n\n- 必须完美支持IE6\n- 模块化机制的引入，解决如何维护文件\n- 组件化引入，与业务隔离，解决松耦合的复用\n- 引入less，解决CSS的复用\n- 文档沉淀，解决（铁打的营盘，流水的兵）\n- 必须要支持SEO\n\n<!-- more -->\n\n### 现状\n\n东方财富前端停留在“刀耕火种”的时代，所有的代码后端来套模板。\n\n由于特殊原因，东方财富的前端代码经过各时期的前辈完成，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。\n\n- 缺少统一的项目管理\n- 部署困难，没有版本号\n- 缺少统一的编程规范\n- 几乎没有模块化\n- 组件化概念无从谈起，大量的重复代码在搭积木般的堆业务\n\n### 技术选型\n根据需求分解的特征进行选型，所有的子项目都依赖于完美支持IE6，所以对于我的选择局限性就比较大了。\n\n###### jquery\n\n### 目录结构设计\n\n### 第三方库整合\n\n\n### 优化\n\n### 工具\n\n### 部署\n\n### 维护和开发\n\n### 总结\n\n\n### 参考资料\n","source":"_posts/fed-restructure.md","raw":"---\ntitle: 东方财富频道从0到1前端页面改造\ndate: 2017-01-23 10:38:25\ntags:\n---\n\n### 目标\n\n- 必须完美支持IE6\n- 模块化机制的引入，解决如何维护文件\n- 组件化引入，与业务隔离，解决松耦合的复用\n- 引入less，解决CSS的复用\n- 文档沉淀，解决（铁打的营盘，流水的兵）\n- 必须要支持SEO\n\n<!-- more -->\n\n### 现状\n\n东方财富前端停留在“刀耕火种”的时代，所有的代码后端来套模板。\n\n由于特殊原因，东方财富的前端代码经过各时期的前辈完成，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。\n\n- 缺少统一的项目管理\n- 部署困难，没有版本号\n- 缺少统一的编程规范\n- 几乎没有模块化\n- 组件化概念无从谈起，大量的重复代码在搭积木般的堆业务\n\n### 技术选型\n根据需求分解的特征进行选型，所有的子项目都依赖于完美支持IE6，所以对于我的选择局限性就比较大了。\n\n###### jquery\n\n### 目录结构设计\n\n### 第三方库整合\n\n\n### 优化\n\n### 工具\n\n### 部署\n\n### 维护和开发\n\n### 总结\n\n\n### 参考资料\n","slug":"fed-restructure","published":1,"updated":"2017-08-03T10:21:24.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96df000gnou9vz57x57w","content":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><ul>\n<li>必须完美支持IE6</li>\n<li>模块化机制的引入，解决如何维护文件</li>\n<li>组件化引入，与业务隔离，解决松耦合的复用</li>\n<li>引入less，解决CSS的复用</li>\n<li>文档沉淀，解决（铁打的营盘，流水的兵）</li>\n<li>必须要支持SEO</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h3><p>东方财富前端停留在“刀耕火种”的时代，所有的代码后端来套模板。</p>\n<p>由于特殊原因，东方财富的前端代码经过各时期的前辈完成，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。</p>\n<ul>\n<li>缺少统一的项目管理</li>\n<li>部署困难，没有版本号</li>\n<li>缺少统一的编程规范</li>\n<li>几乎没有模块化</li>\n<li>组件化概念无从谈起，大量的重复代码在搭积木般的堆业务</li>\n</ul>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>根据需求分解的特征进行选型，所有的子项目都依赖于完美支持IE6，所以对于我的选择局限性就比较大了。</p>\n<h6 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h6><h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><h3 id=\"第三方库整合\"><a href=\"#第三方库整合\" class=\"headerlink\" title=\"第三方库整合\"></a>第三方库整合</h3><h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><h3 id=\"维护和开发\"><a href=\"#维护和开发\" class=\"headerlink\" title=\"维护和开发\"></a>维护和开发</h3><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>","site":{"data":{}},"excerpt":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><ul>\n<li>必须完美支持IE6</li>\n<li>模块化机制的引入，解决如何维护文件</li>\n<li>组件化引入，与业务隔离，解决松耦合的复用</li>\n<li>引入less，解决CSS的复用</li>\n<li>文档沉淀，解决（铁打的营盘，流水的兵）</li>\n<li>必须要支持SEO</li>\n</ul>","more":"<h3 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h3><p>东方财富前端停留在“刀耕火种”的时代，所有的代码后端来套模板。</p>\n<p>由于特殊原因，东方财富的前端代码经过各时期的前辈完成，每一个时期都风格迥异，可维护性差。对于后来者，就像一根鱼刺咔在喉咙一般，我怎么感觉到灾难，来的这么快呢。</p>\n<ul>\n<li>缺少统一的项目管理</li>\n<li>部署困难，没有版本号</li>\n<li>缺少统一的编程规范</li>\n<li>几乎没有模块化</li>\n<li>组件化概念无从谈起，大量的重复代码在搭积木般的堆业务</li>\n</ul>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>根据需求分解的特征进行选型，所有的子项目都依赖于完美支持IE6，所以对于我的选择局限性就比较大了。</p>\n<h6 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h6><h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><h3 id=\"第三方库整合\"><a href=\"#第三方库整合\" class=\"headerlink\" title=\"第三方库整合\"></a>第三方库整合</h3><h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><h3 id=\"维护和开发\"><a href=\"#维护和开发\" class=\"headerlink\" title=\"维护和开发\"></a>维护和开发</h3><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>"},{"title":"kali 渗透","date":"2015-12-10T14:41:59.000Z","_content":"\n### 载入无线网卡\n\n\n```\nifconfig\n\nifconfig -a\n\nifconfig wlan0 up\n```\n\n### 激活无线网卡至monitor即监听模式\n\n```\nairmon-ng start wlan0\n```\n\n### 探测无线网络，抓取无线数据包\n\n```\nairodump-ng mon0\n```\n\n### 参考\n\nhttp://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html\n\nhttp://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html\n","source":"_posts/kali-渗透.md","raw":"---\ntitle: kali 渗透\ndate: 2015-12-10 22:41:59\ntags: kali\n---\n\n### 载入无线网卡\n\n\n```\nifconfig\n\nifconfig -a\n\nifconfig wlan0 up\n```\n\n### 激活无线网卡至monitor即监听模式\n\n```\nairmon-ng start wlan0\n```\n\n### 探测无线网络，抓取无线数据包\n\n```\nairodump-ng mon0\n```\n\n### 参考\n\nhttp://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html\n\nhttp://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html\n","slug":"kali-渗透","published":1,"updated":"2017-08-03T10:21:24.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dg000hnou9ufw8hrfb","content":"<h3 id=\"载入无线网卡\"><a href=\"#载入无线网卡\" class=\"headerlink\" title=\"载入无线网卡\"></a>载入无线网卡</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig</div><div class=\"line\"></div><div class=\"line\">ifconfig -a</div><div class=\"line\"></div><div class=\"line\">ifconfig wlan0 up</div></pre></td></tr></table></figure>\n<h3 id=\"激活无线网卡至monitor即监听模式\"><a href=\"#激活无线网卡至monitor即监听模式\" class=\"headerlink\" title=\"激活无线网卡至monitor即监听模式\"></a>激活无线网卡至monitor即监听模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airmon-ng start wlan0</div></pre></td></tr></table></figure>\n<h3 id=\"探测无线网络，抓取无线数据包\"><a href=\"#探测无线网络，抓取无线数据包\" class=\"headerlink\" title=\"探测无线网络，抓取无线数据包\"></a>探测无线网络，抓取无线数据包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airodump-ng mon0</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html\" target=\"_blank\" rel=\"external\">http://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html</a></p>\n<p><a href=\"http://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"载入无线网卡\"><a href=\"#载入无线网卡\" class=\"headerlink\" title=\"载入无线网卡\"></a>载入无线网卡</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig</div><div class=\"line\"></div><div class=\"line\">ifconfig -a</div><div class=\"line\"></div><div class=\"line\">ifconfig wlan0 up</div></pre></td></tr></table></figure>\n<h3 id=\"激活无线网卡至monitor即监听模式\"><a href=\"#激活无线网卡至monitor即监听模式\" class=\"headerlink\" title=\"激活无线网卡至monitor即监听模式\"></a>激活无线网卡至monitor即监听模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airmon-ng start wlan0</div></pre></td></tr></table></figure>\n<h3 id=\"探测无线网络，抓取无线数据包\"><a href=\"#探测无线网络，抓取无线数据包\" class=\"headerlink\" title=\"探测无线网络，抓取无线数据包\"></a>探测无线网络，抓取无线数据包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airodump-ng mon0</div></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html\" target=\"_blank\" rel=\"external\">http://www.aneasystone.com/archives/2016/08/wireless-analysis-one-monitoring.html</a></p>\n<p><a href=\"http://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/york-hust/archive/2012/07/07/2580340.html</a></p>\n"},{"title":"openwrt安装wifidog及配置","date":"2017-01-09T06:17:01.000Z","_content":"\n### 实现目标\n在路由器上安装wifidog搭建无线热点认证系统，终端设备联网没有授权将无法上网\n\n### 硬件设备\n\n路由器：极路由3(智能双频路由器)\n型号：HC5861\n\n### 软件信息\n\n固件版本：\nwifidog版本：wifidog_1.2.1-2\n\n\n### 安装wifidog\n\n<!--more-->\n\n```\nopkg install wifidog\n```\n或者\n```\nopkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\n```\n\n### 配置wifi\n\n/etc/wifidog.conf\n```\n# $Id$\n# WiFiDog 配置文件\n# *******************************************************\n\n# *******************************************************\n# 设备编号ID\n# Parameter: GatewayID\n# Default: default\nGatewayID stbui\n# 在身份验证服务器上将此设置为节点 ID\n# 用于批量部署设备监测/统计目的。如果没有提供，则超时将使\n# 用 GatewayInterface 接口的 mac 地作为ID : separators\n# *******************************************************\n\n\n# *******************************************************\n# 外部接口\n# Parameter: ExternalInterface\n# Default: br-lan\n# Optional\n# 将此设置为外部接口，出现多级NAT网络配置时或更多复杂NAT环\n# 境下,或子网VLAN，接口 eth0 ，认证ppp0 ！否则为自动检测\nExternalInterface eth0.2\n# *******************************************************\n\n\n# *******************************************************\n# 内网接口\n# Parameter: GatewayInterface\n# Default: br-lan\n# Mandatory\n# 通常为内网群体，接口常以网桥br-lan， 交换机Switch ，\n# 接口eth1，ath0 可以得到此 ifconfig 命令，查看相关配置信息\nGatewayInterface br-lan\n# *******************************************************\n\n\n# *******************************************************\n# 网关设置\n# Parameter: GatewayAddress\n# Default: 从接口查询GatewayInterface\n# 内网IP网关，出现多DHCP服务时请指定，通常不需要。\nGatewayAddress 192.168.1.1\n# *******************************************************\n\n\n# *******************************************************\n# 认证页面\n# Parameter: HtmlMessageFile\n# Default: wifidog-msg.html\n# 这允许您指定一个自定义 HTML 文件，它由网关触发。\n# 该文件内的“标题 $title、错误信息 $message 错误 $node”是\n# 需要被替换的内容，可看做此为模板文件。\n# HtmlMessageFile /etc/wifidog-msg.html\n# *******************************************************\n\n\n# *******************************************************\n# 验证服务\n# Parameter: AuthServer\n# Default: NONE\n# Mandatory, repeatable\n# 这允许您配置您的身份验证服务 可多个 顺序响应直到收到应答。\n# 需要配置:主机名 Hostname 路径，协议等 强制性Mandatory\nAuthServer {\n  Hostname 192.168.1.165\n  SSLAvailable no                   # yes,no 默认 no\n  SSLPort 443                       # 默认为 443\n  HTTPPort 80                       # 默认为 80\n  Path /                            # 默认为空白\n}\n\n# 如果启用了 SSLAvailable，客户端将被重定向到HTTPS端口上的\n# 身份验证守护进程。如果 Wifidog启用SSL加密连接，\n# 其Wifidog也需使用HTTPS协议，而不非HTTP协议进行身份验证服务。\n# *******************************************************\n\n\n# *******************************************************\n# 多种认证时，继续如下配置\n# AuthServer {\n# Hostname ecvit.com\n# SSLAvailable yes\n# Path /\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 后台运行\n# Parameter: Daemon\n# Default: 1 # 1 允许 0 拒绝\n# Daemon 1\n# *******************************************************\n\n\n# *******************************************************\n# 网关侦听端口\n# Parameter: GatewayPort\n# Default: 2060\n# Optional\n# GatewayPort 2060\n# *******************************************************\n\n\n# *******************************************************\n# 代理端口\n# Parameter: ProxyPort\n# Default: 0 (或者 disable ，1 为启用或 enable)\n# 重定向http流量到本地代理端口，透明代理用户\n# ProxyPort 0\n# *******************************************************\n\n\n# *******************************************************\n# 指定唤醒\n# Parameter: HTTPDName\n# Default: WiFiDog\n# HTTPDName:cnweaks\n# 定义什么名字 HTTPD 服务将响应调起 HTTPDName WiFiDog\n# *******************************************************\n\n\n# *******************************************************\n# 最大连接\n# Parameter: HTTPDMaxConn\n# Default: 10\n# HTTPDMaxConn 100\n# 指定接入用户的最大数量\n# *******************************************************\n\n\n# *******************************************************\n# 自身防护\n# Parameter: HTTPDRealm\n# Default: WiFiDog\n# HTTP域身份试图访问受保护的WiFiDog内部内容时，禁止访问\n# 更多请参阅 HTTPUserName。\n# HTTPDRealm wifidog\n# *******************************************************\n\n\n# *******************************************************\n# 账户密码保护\n# Parameter: HTTPDUserName / HTTPDPassword\n# Default: unset\n# 网关会广播某些信息，如用户名和密码，这使得可被任意接收。\n# 您可通过 HTTPDUserName HTTPDPassword 设置需要保护的参数。\n# HTTPDUserName admin\n# HTTPDPassword 847676\n# *******************************************************\n\n\n# *******************************************************\n# 流量计数器\n# Parameter: CheckInterval\n# Default: 60\n# 一般用于统计用户上网时长或流量统计使用，过频繁会使网关压力\n# 加大，指向到其他辅助服务器不太现实，基本无用处\n# CheckInterval 60\n# *******************************************************\n\n\n# *******************************************************\n# 状态过期注销\n# Parameter: ClientTimeout\n# Default: 5\n# 此配置将使接入客户端在指定的时间后，将其注销活动状态，\n# 注销后用户将处在“网络连接超时”状态\n# ClientTimeout 30\n# *******************************************************\n\n\n# *******************************************************\n# SSL证书配置\n# Parameter: SSLPeerVerification\n# Default: yes\n# 启用 SSL/TLS 身份验证服务时，同时应配置验证证书。\n# 如果你不想安装 ca 证书。禁用此项是有必要的，若启用yes，\n# 则需要使用 SSLCertPath 指定其证书路劲\n\n# 此设置要求 WifiDog 编译 SSL 支持。 否则它将被忽略了。\n# 若完全出于测试目的请禁用 SSL\n# SSLAvailable 为禁用时，此处却启用，将导致身份验证问题。\n# 这会使得已经通过HTTPS验证的用户再次重定向到验证\n# SSLPeerVerification no\n# *******************************************************\n\n\n# *******************************************************\n# SSL证书路径\n# Parameter: SSLCertPath\n# Default: /etc/ssl/certs/\n# 前提是SSLAvailable是启用状态才会有效，\n# 此目录中的证书必须由其哈希值命名。对于认证交换的\n# 您需要一个 ca 证书包比什么运屏障断路器\n# 参见 https://dev.openwrt.org/ticket/16537\n# 此设置要求 WifiDog 编译SSL支持。否则它将被忽略了。\n# SSLCertPath /etc/ssl/certs/\n# *******************************************************\n\n\n# *******************************************************\n# 证书加密算法\n# Parameter: SSLAllowedCipherList\n# Default: all ciphers supported\n# 允许使用密码加密证书 请注意 CyaSSL证书将忽略加密，\n# 由此会导致证书出现 *WITH ERRORS IN THEIR NAMES*错误\n# 请参阅 CyaSSL 文档允许值\n# SSLAllowedCipherList ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDH-ECDSA-AES128-SHA:ECDH-ECDSA-AES256-SHA:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:AES128-SHA:AES256-SHA\n# *******************************************************\n\n\n# *******************************************************\n# 跳过验证\n# Parameter: TrustedMACList\n# Default: none\n# 多个主机请使用英文逗号分隔，允许指定的MAC不进行验证。\n# 提示: 安全薄弱，因为 MAC 地址很容易被修改。\n# TrustedMACList 00:00:DE:AD:BE:AF,00:00:C0:1D:F0:0D\n# *******************************************************\n\n\n# *******************************************************\n# 防火墙配置\n# Parameter: FirewallRuleSet\n# Default: none # 参数 强制性 Mandatory 无 none 调用FirewallRule规则\n# 同 FirewallRule 策略一起被调用，\n# 其通常用于某些情况下，系统无法辨别用户时，配置其可能发生的策略\n# 或进行重新验证等办法核实用户\n# *******************************************************\n\n\n# *******************************************************\n# 防火墙规则\n# Parameter: FirewallRule\n# Default: none\n# Rule Set: global\n# FirewallRuleSet global {\n# FirewallRule syntax:\n# FirewallRule (block|drop|allow|log|ulog) [(tcp|udp|icmp) [port X or port-range X:Y]] [to IP/CIDR]\n\n# 要阻止 SMTP邮件服务 因为是明文传输的，如下\n# FirewallRule block tcp port 25\n\n# 如果您需要限制某网段用户上网或单主机\n# FirewallRule block to 192.168.0.0/16\n# FirewallRule block to 172.16.0.0/12\n# FirewallRule block to 10.0.0.0/8\n# 请注意，这不是客户端隔离，因为是依据IP或网段的，\n# 客户端依然可以通过桥接等方式继续使用\n\n# 这是防止Teliphone软件的规则。\n# FirewallRule allow udp to 69.90.89.192/27\n# FirewallRule allow udp to 69.90.85.0/27\n# FirewallRule allow tcp port 80 to 69.90.89.205\n\n\n# 这是依据域名的策略配置\nFirewallRule allow tcp to *.stbui.com\nFirewallRule allow tcp to *.baidu.com\nFirewallRule allow tcp to *.weixin.qq.com\n\n# 苹果 iOS 7 客户的问题\n# 参见如下地址的第7条和第14条办法处理:\n# https://github.com/wifidog/wifidog-gateway/issues/\n# FirewallRule allow tcp to apple.com\n# FirewallRule allow tcp to icloud.com\n\n\n# 使用 Log 或 ulog 进行允许或禁止某些端口内容\n# 如 OPENWRT: 使用这些功能需要依赖项\n# iptables-mod-extra 和 iptables-mod-ulog （基于 linux 发行版）。\n# 规则你想 match.for 交换机︰\n# 如：允许流量在 ip 69.90.89.205 端口 80:上通过\n# FirewallRule log tcp port 80 to 69.90.89.205\n# FirewallRule allow tcp port 80 to 69.90.89.205\n\n\n# 你想要知道特定内容时，您可采用本办法:\n# FirewallRule log to 0.0.0.0/0\n# FirewallRule block to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 无条件阻止\n# Rule Set: validating-users\n# FirewallRuleSet validating-users {\n# FirewallRule block to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 无条件允许\n# Rule Set: known-users\n# FirewallRuleSet known-users {\n# FirewallRule allow to wifi.ecvit.com\n# FirewallRule allow to weixin.qq.com\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 验证发生错误\n# Rule Set: auth-is-down\n# FirewallRuleSet auth-is-down {\n# FirewallRule allow to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 非法访问\n# Rule Set: unknown-users\n# 用于未经验证的用户，这是获取重定向的规则集\n# FirewallRuleSet unknown-users {\n# 使用到 ipset 来阻止或允许外部指定的主机。\n# 例如，如果您的身份验证服务器要求用户登录 facebook，\n# 使用 ipset 功能内置到 dnsmasq 来短暂允许Facebook验证所使用的各种 IPs。\n# FirewallRule allow to-ipset fb\n# FirewallRule allow udp port 53\n# FirewallRule allow tcp port 53\n# FirewallRule allow udp port 67\n# FirewallRule allow tcp port 67\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 禁止连接的客户端\n# Rule Set: locked-users\n# FirewallRuleSet locked-users {\n# FirewallRule block to 0.0.0.0/0\n# }\n```\n\n\n启动服务\n```\n/etc/init.d/wifidog start\n```\n\n开机自启\n```\n/etc/init.d/wifidog enable\n```\n\n\n### 验证\n\n{% post_link wifidog认证服务开发 %}\n\n\n### 问题\n\n如果路由器中配置了 `mwan3` ，即使 wifidog 授权成功也无法上网，需要停止mwan3\n```\n状态 -> 系统进程 -> 找到“mwan3track”相关的关键字 -> 关闭\n```\n\n\n### 参考资料\nwifidog包：\nhttps://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk\n\nhttp://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\n\n源代码：\nhttps://github.com/wifidog/wifidog-gateway\n\n微信接口文档\nhttp://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html\n\nhttps://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/\n\nhttp://blog.csdn.net/just_young/article/details/38003015\n\nhttp://www.cnblogs.com/tolimit/p/4223644.html\n\n\nhttps://github.com/liudf0716/apfree_wifidog\n\n\n### 附 操作命令\n\n```\nopkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\nvi /etc/wifidog.conf\n\n// 编辑配置文件\n// GatewayID default\n// ExternalInterface eth0\n// GatewayAddress 192.168.1.1\n// AUthServer {\n//    Hostname 192.168.1.165\n//    SSLAvailable no\n//    Path /\n// }\n// FirewallRule allow tcp to www.baidu.com\n\n/etc/init.d/wifidog start\n```","source":"_posts/openwrt安装wifidog及配置.md","raw":"---\ntitle: openwrt安装wifidog及配置\ndate: 2017-01-09 14:17:01\ntags:\n---\n\n### 实现目标\n在路由器上安装wifidog搭建无线热点认证系统，终端设备联网没有授权将无法上网\n\n### 硬件设备\n\n路由器：极路由3(智能双频路由器)\n型号：HC5861\n\n### 软件信息\n\n固件版本：\nwifidog版本：wifidog_1.2.1-2\n\n\n### 安装wifidog\n\n<!--more-->\n\n```\nopkg install wifidog\n```\n或者\n```\nopkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\n```\n\n### 配置wifi\n\n/etc/wifidog.conf\n```\n# $Id$\n# WiFiDog 配置文件\n# *******************************************************\n\n# *******************************************************\n# 设备编号ID\n# Parameter: GatewayID\n# Default: default\nGatewayID stbui\n# 在身份验证服务器上将此设置为节点 ID\n# 用于批量部署设备监测/统计目的。如果没有提供，则超时将使\n# 用 GatewayInterface 接口的 mac 地作为ID : separators\n# *******************************************************\n\n\n# *******************************************************\n# 外部接口\n# Parameter: ExternalInterface\n# Default: br-lan\n# Optional\n# 将此设置为外部接口，出现多级NAT网络配置时或更多复杂NAT环\n# 境下,或子网VLAN，接口 eth0 ，认证ppp0 ！否则为自动检测\nExternalInterface eth0.2\n# *******************************************************\n\n\n# *******************************************************\n# 内网接口\n# Parameter: GatewayInterface\n# Default: br-lan\n# Mandatory\n# 通常为内网群体，接口常以网桥br-lan， 交换机Switch ，\n# 接口eth1，ath0 可以得到此 ifconfig 命令，查看相关配置信息\nGatewayInterface br-lan\n# *******************************************************\n\n\n# *******************************************************\n# 网关设置\n# Parameter: GatewayAddress\n# Default: 从接口查询GatewayInterface\n# 内网IP网关，出现多DHCP服务时请指定，通常不需要。\nGatewayAddress 192.168.1.1\n# *******************************************************\n\n\n# *******************************************************\n# 认证页面\n# Parameter: HtmlMessageFile\n# Default: wifidog-msg.html\n# 这允许您指定一个自定义 HTML 文件，它由网关触发。\n# 该文件内的“标题 $title、错误信息 $message 错误 $node”是\n# 需要被替换的内容，可看做此为模板文件。\n# HtmlMessageFile /etc/wifidog-msg.html\n# *******************************************************\n\n\n# *******************************************************\n# 验证服务\n# Parameter: AuthServer\n# Default: NONE\n# Mandatory, repeatable\n# 这允许您配置您的身份验证服务 可多个 顺序响应直到收到应答。\n# 需要配置:主机名 Hostname 路径，协议等 强制性Mandatory\nAuthServer {\n  Hostname 192.168.1.165\n  SSLAvailable no                   # yes,no 默认 no\n  SSLPort 443                       # 默认为 443\n  HTTPPort 80                       # 默认为 80\n  Path /                            # 默认为空白\n}\n\n# 如果启用了 SSLAvailable，客户端将被重定向到HTTPS端口上的\n# 身份验证守护进程。如果 Wifidog启用SSL加密连接，\n# 其Wifidog也需使用HTTPS协议，而不非HTTP协议进行身份验证服务。\n# *******************************************************\n\n\n# *******************************************************\n# 多种认证时，继续如下配置\n# AuthServer {\n# Hostname ecvit.com\n# SSLAvailable yes\n# Path /\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 后台运行\n# Parameter: Daemon\n# Default: 1 # 1 允许 0 拒绝\n# Daemon 1\n# *******************************************************\n\n\n# *******************************************************\n# 网关侦听端口\n# Parameter: GatewayPort\n# Default: 2060\n# Optional\n# GatewayPort 2060\n# *******************************************************\n\n\n# *******************************************************\n# 代理端口\n# Parameter: ProxyPort\n# Default: 0 (或者 disable ，1 为启用或 enable)\n# 重定向http流量到本地代理端口，透明代理用户\n# ProxyPort 0\n# *******************************************************\n\n\n# *******************************************************\n# 指定唤醒\n# Parameter: HTTPDName\n# Default: WiFiDog\n# HTTPDName:cnweaks\n# 定义什么名字 HTTPD 服务将响应调起 HTTPDName WiFiDog\n# *******************************************************\n\n\n# *******************************************************\n# 最大连接\n# Parameter: HTTPDMaxConn\n# Default: 10\n# HTTPDMaxConn 100\n# 指定接入用户的最大数量\n# *******************************************************\n\n\n# *******************************************************\n# 自身防护\n# Parameter: HTTPDRealm\n# Default: WiFiDog\n# HTTP域身份试图访问受保护的WiFiDog内部内容时，禁止访问\n# 更多请参阅 HTTPUserName。\n# HTTPDRealm wifidog\n# *******************************************************\n\n\n# *******************************************************\n# 账户密码保护\n# Parameter: HTTPDUserName / HTTPDPassword\n# Default: unset\n# 网关会广播某些信息，如用户名和密码，这使得可被任意接收。\n# 您可通过 HTTPDUserName HTTPDPassword 设置需要保护的参数。\n# HTTPDUserName admin\n# HTTPDPassword 847676\n# *******************************************************\n\n\n# *******************************************************\n# 流量计数器\n# Parameter: CheckInterval\n# Default: 60\n# 一般用于统计用户上网时长或流量统计使用，过频繁会使网关压力\n# 加大，指向到其他辅助服务器不太现实，基本无用处\n# CheckInterval 60\n# *******************************************************\n\n\n# *******************************************************\n# 状态过期注销\n# Parameter: ClientTimeout\n# Default: 5\n# 此配置将使接入客户端在指定的时间后，将其注销活动状态，\n# 注销后用户将处在“网络连接超时”状态\n# ClientTimeout 30\n# *******************************************************\n\n\n# *******************************************************\n# SSL证书配置\n# Parameter: SSLPeerVerification\n# Default: yes\n# 启用 SSL/TLS 身份验证服务时，同时应配置验证证书。\n# 如果你不想安装 ca 证书。禁用此项是有必要的，若启用yes，\n# 则需要使用 SSLCertPath 指定其证书路劲\n\n# 此设置要求 WifiDog 编译 SSL 支持。 否则它将被忽略了。\n# 若完全出于测试目的请禁用 SSL\n# SSLAvailable 为禁用时，此处却启用，将导致身份验证问题。\n# 这会使得已经通过HTTPS验证的用户再次重定向到验证\n# SSLPeerVerification no\n# *******************************************************\n\n\n# *******************************************************\n# SSL证书路径\n# Parameter: SSLCertPath\n# Default: /etc/ssl/certs/\n# 前提是SSLAvailable是启用状态才会有效，\n# 此目录中的证书必须由其哈希值命名。对于认证交换的\n# 您需要一个 ca 证书包比什么运屏障断路器\n# 参见 https://dev.openwrt.org/ticket/16537\n# 此设置要求 WifiDog 编译SSL支持。否则它将被忽略了。\n# SSLCertPath /etc/ssl/certs/\n# *******************************************************\n\n\n# *******************************************************\n# 证书加密算法\n# Parameter: SSLAllowedCipherList\n# Default: all ciphers supported\n# 允许使用密码加密证书 请注意 CyaSSL证书将忽略加密，\n# 由此会导致证书出现 *WITH ERRORS IN THEIR NAMES*错误\n# 请参阅 CyaSSL 文档允许值\n# SSLAllowedCipherList ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDH-ECDSA-AES128-SHA:ECDH-ECDSA-AES256-SHA:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:AES128-SHA:AES256-SHA\n# *******************************************************\n\n\n# *******************************************************\n# 跳过验证\n# Parameter: TrustedMACList\n# Default: none\n# 多个主机请使用英文逗号分隔，允许指定的MAC不进行验证。\n# 提示: 安全薄弱，因为 MAC 地址很容易被修改。\n# TrustedMACList 00:00:DE:AD:BE:AF,00:00:C0:1D:F0:0D\n# *******************************************************\n\n\n# *******************************************************\n# 防火墙配置\n# Parameter: FirewallRuleSet\n# Default: none # 参数 强制性 Mandatory 无 none 调用FirewallRule规则\n# 同 FirewallRule 策略一起被调用，\n# 其通常用于某些情况下，系统无法辨别用户时，配置其可能发生的策略\n# 或进行重新验证等办法核实用户\n# *******************************************************\n\n\n# *******************************************************\n# 防火墙规则\n# Parameter: FirewallRule\n# Default: none\n# Rule Set: global\n# FirewallRuleSet global {\n# FirewallRule syntax:\n# FirewallRule (block|drop|allow|log|ulog) [(tcp|udp|icmp) [port X or port-range X:Y]] [to IP/CIDR]\n\n# 要阻止 SMTP邮件服务 因为是明文传输的，如下\n# FirewallRule block tcp port 25\n\n# 如果您需要限制某网段用户上网或单主机\n# FirewallRule block to 192.168.0.0/16\n# FirewallRule block to 172.16.0.0/12\n# FirewallRule block to 10.0.0.0/8\n# 请注意，这不是客户端隔离，因为是依据IP或网段的，\n# 客户端依然可以通过桥接等方式继续使用\n\n# 这是防止Teliphone软件的规则。\n# FirewallRule allow udp to 69.90.89.192/27\n# FirewallRule allow udp to 69.90.85.0/27\n# FirewallRule allow tcp port 80 to 69.90.89.205\n\n\n# 这是依据域名的策略配置\nFirewallRule allow tcp to *.stbui.com\nFirewallRule allow tcp to *.baidu.com\nFirewallRule allow tcp to *.weixin.qq.com\n\n# 苹果 iOS 7 客户的问题\n# 参见如下地址的第7条和第14条办法处理:\n# https://github.com/wifidog/wifidog-gateway/issues/\n# FirewallRule allow tcp to apple.com\n# FirewallRule allow tcp to icloud.com\n\n\n# 使用 Log 或 ulog 进行允许或禁止某些端口内容\n# 如 OPENWRT: 使用这些功能需要依赖项\n# iptables-mod-extra 和 iptables-mod-ulog （基于 linux 发行版）。\n# 规则你想 match.for 交换机︰\n# 如：允许流量在 ip 69.90.89.205 端口 80:上通过\n# FirewallRule log tcp port 80 to 69.90.89.205\n# FirewallRule allow tcp port 80 to 69.90.89.205\n\n\n# 你想要知道特定内容时，您可采用本办法:\n# FirewallRule log to 0.0.0.0/0\n# FirewallRule block to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 无条件阻止\n# Rule Set: validating-users\n# FirewallRuleSet validating-users {\n# FirewallRule block to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 无条件允许\n# Rule Set: known-users\n# FirewallRuleSet known-users {\n# FirewallRule allow to wifi.ecvit.com\n# FirewallRule allow to weixin.qq.com\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 验证发生错误\n# Rule Set: auth-is-down\n# FirewallRuleSet auth-is-down {\n# FirewallRule allow to 0.0.0.0/0\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 非法访问\n# Rule Set: unknown-users\n# 用于未经验证的用户，这是获取重定向的规则集\n# FirewallRuleSet unknown-users {\n# 使用到 ipset 来阻止或允许外部指定的主机。\n# 例如，如果您的身份验证服务器要求用户登录 facebook，\n# 使用 ipset 功能内置到 dnsmasq 来短暂允许Facebook验证所使用的各种 IPs。\n# FirewallRule allow to-ipset fb\n# FirewallRule allow udp port 53\n# FirewallRule allow tcp port 53\n# FirewallRule allow udp port 67\n# FirewallRule allow tcp port 67\n# }\n# *******************************************************\n\n\n# *******************************************************\n# 禁止连接的客户端\n# Rule Set: locked-users\n# FirewallRuleSet locked-users {\n# FirewallRule block to 0.0.0.0/0\n# }\n```\n\n\n启动服务\n```\n/etc/init.d/wifidog start\n```\n\n开机自启\n```\n/etc/init.d/wifidog enable\n```\n\n\n### 验证\n\n{% post_link wifidog认证服务开发 %}\n\n\n### 问题\n\n如果路由器中配置了 `mwan3` ，即使 wifidog 授权成功也无法上网，需要停止mwan3\n```\n状态 -> 系统进程 -> 找到“mwan3track”相关的关键字 -> 关闭\n```\n\n\n### 参考资料\nwifidog包：\nhttps://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk\n\nhttp://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\n\n源代码：\nhttps://github.com/wifidog/wifidog-gateway\n\n微信接口文档\nhttp://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html\n\nhttps://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/\n\nhttp://blog.csdn.net/just_young/article/details/38003015\n\nhttp://www.cnblogs.com/tolimit/p/4223644.html\n\n\nhttps://github.com/liudf0716/apfree_wifidog\n\n\n### 附 操作命令\n\n```\nopkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\nvi /etc/wifidog.conf\n\n// 编辑配置文件\n// GatewayID default\n// ExternalInterface eth0\n// GatewayAddress 192.168.1.1\n// AUthServer {\n//    Hostname 192.168.1.165\n//    SSLAvailable no\n//    Path /\n// }\n// FirewallRule allow tcp to www.baidu.com\n\n/etc/init.d/wifidog start\n```","slug":"openwrt安装wifidog及配置","published":1,"updated":"2017-08-03T10:21:24.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dh000inou9vxuoggze","content":"<h3 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h3><p>在路由器上安装wifidog搭建无线热点认证系统，终端设备联网没有授权将无法上网</p>\n<h3 id=\"硬件设备\"><a href=\"#硬件设备\" class=\"headerlink\" title=\"硬件设备\"></a>硬件设备</h3><p>路由器：极路由3(智能双频路由器)<br>型号：HC5861</p>\n<h3 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h3><p>固件版本：<br>wifidog版本：wifidog_1.2.1-2</p>\n<h3 id=\"安装wifidog\"><a href=\"#安装wifidog\" class=\"headerlink\" title=\"安装wifidog\"></a>安装wifidog</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install wifidog</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置wifi\"><a href=\"#配置wifi\" class=\"headerlink\" title=\"配置wifi\"></a>配置wifi</h3><p>/etc/wifidog.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div></pre></td><td class=\"code\"><pre><div class=\"line\"># $Id$</div><div class=\"line\"># WiFiDog 配置文件</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 设备编号ID</div><div class=\"line\"># Parameter: GatewayID</div><div class=\"line\"># Default: default</div><div class=\"line\">GatewayID stbui</div><div class=\"line\"># 在身份验证服务器上将此设置为节点 ID</div><div class=\"line\"># 用于批量部署设备监测/统计目的。如果没有提供，则超时将使</div><div class=\"line\"># 用 GatewayInterface 接口的 mac 地作为ID : separators</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 外部接口</div><div class=\"line\"># Parameter: ExternalInterface</div><div class=\"line\"># Default: br-lan</div><div class=\"line\"># Optional</div><div class=\"line\"># 将此设置为外部接口，出现多级NAT网络配置时或更多复杂NAT环</div><div class=\"line\"># 境下,或子网VLAN，接口 eth0 ，认证ppp0 ！否则为自动检测</div><div class=\"line\">ExternalInterface eth0.2</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 内网接口</div><div class=\"line\"># Parameter: GatewayInterface</div><div class=\"line\"># Default: br-lan</div><div class=\"line\"># Mandatory</div><div class=\"line\"># 通常为内网群体，接口常以网桥br-lan， 交换机Switch ，</div><div class=\"line\"># 接口eth1，ath0 可以得到此 ifconfig 命令，查看相关配置信息</div><div class=\"line\">GatewayInterface br-lan</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 网关设置</div><div class=\"line\"># Parameter: GatewayAddress</div><div class=\"line\"># Default: 从接口查询GatewayInterface</div><div class=\"line\"># 内网IP网关，出现多DHCP服务时请指定，通常不需要。</div><div class=\"line\">GatewayAddress 192.168.1.1</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 认证页面</div><div class=\"line\"># Parameter: HtmlMessageFile</div><div class=\"line\"># Default: wifidog-msg.html</div><div class=\"line\"># 这允许您指定一个自定义 HTML 文件，它由网关触发。</div><div class=\"line\"># 该文件内的“标题 $title、错误信息 $message 错误 $node”是</div><div class=\"line\"># 需要被替换的内容，可看做此为模板文件。</div><div class=\"line\"># HtmlMessageFile /etc/wifidog-msg.html</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 验证服务</div><div class=\"line\"># Parameter: AuthServer</div><div class=\"line\"># Default: NONE</div><div class=\"line\"># Mandatory, repeatable</div><div class=\"line\"># 这允许您配置您的身份验证服务 可多个 顺序响应直到收到应答。</div><div class=\"line\"># 需要配置:主机名 Hostname 路径，协议等 强制性Mandatory</div><div class=\"line\">AuthServer &#123;</div><div class=\"line\">  Hostname 192.168.1.165</div><div class=\"line\">  SSLAvailable no                   # yes,no 默认 no</div><div class=\"line\">  SSLPort 443                       # 默认为 443</div><div class=\"line\">  HTTPPort 80                       # 默认为 80</div><div class=\"line\">  Path /                            # 默认为空白</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># 如果启用了 SSLAvailable，客户端将被重定向到HTTPS端口上的</div><div class=\"line\"># 身份验证守护进程。如果 Wifidog启用SSL加密连接，</div><div class=\"line\"># 其Wifidog也需使用HTTPS协议，而不非HTTP协议进行身份验证服务。</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 多种认证时，继续如下配置</div><div class=\"line\"># AuthServer &#123;</div><div class=\"line\"># Hostname ecvit.com</div><div class=\"line\"># SSLAvailable yes</div><div class=\"line\"># Path /</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 后台运行</div><div class=\"line\"># Parameter: Daemon</div><div class=\"line\"># Default: 1 # 1 允许 0 拒绝</div><div class=\"line\"># Daemon 1</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 网关侦听端口</div><div class=\"line\"># Parameter: GatewayPort</div><div class=\"line\"># Default: 2060</div><div class=\"line\"># Optional</div><div class=\"line\"># GatewayPort 2060</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 代理端口</div><div class=\"line\"># Parameter: ProxyPort</div><div class=\"line\"># Default: 0 (或者 disable ，1 为启用或 enable)</div><div class=\"line\"># 重定向http流量到本地代理端口，透明代理用户</div><div class=\"line\"># ProxyPort 0</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 指定唤醒</div><div class=\"line\"># Parameter: HTTPDName</div><div class=\"line\"># Default: WiFiDog</div><div class=\"line\"># HTTPDName:cnweaks</div><div class=\"line\"># 定义什么名字 HTTPD 服务将响应调起 HTTPDName WiFiDog</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 最大连接</div><div class=\"line\"># Parameter: HTTPDMaxConn</div><div class=\"line\"># Default: 10</div><div class=\"line\"># HTTPDMaxConn 100</div><div class=\"line\"># 指定接入用户的最大数量</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 自身防护</div><div class=\"line\"># Parameter: HTTPDRealm</div><div class=\"line\"># Default: WiFiDog</div><div class=\"line\"># HTTP域身份试图访问受保护的WiFiDog内部内容时，禁止访问</div><div class=\"line\"># 更多请参阅 HTTPUserName。</div><div class=\"line\"># HTTPDRealm wifidog</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 账户密码保护</div><div class=\"line\"># Parameter: HTTPDUserName / HTTPDPassword</div><div class=\"line\"># Default: unset</div><div class=\"line\"># 网关会广播某些信息，如用户名和密码，这使得可被任意接收。</div><div class=\"line\"># 您可通过 HTTPDUserName HTTPDPassword 设置需要保护的参数。</div><div class=\"line\"># HTTPDUserName admin</div><div class=\"line\"># HTTPDPassword 847676</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 流量计数器</div><div class=\"line\"># Parameter: CheckInterval</div><div class=\"line\"># Default: 60</div><div class=\"line\"># 一般用于统计用户上网时长或流量统计使用，过频繁会使网关压力</div><div class=\"line\"># 加大，指向到其他辅助服务器不太现实，基本无用处</div><div class=\"line\"># CheckInterval 60</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 状态过期注销</div><div class=\"line\"># Parameter: ClientTimeout</div><div class=\"line\"># Default: 5</div><div class=\"line\"># 此配置将使接入客户端在指定的时间后，将其注销活动状态，</div><div class=\"line\"># 注销后用户将处在“网络连接超时”状态</div><div class=\"line\"># ClientTimeout 30</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># SSL证书配置</div><div class=\"line\"># Parameter: SSLPeerVerification</div><div class=\"line\"># Default: yes</div><div class=\"line\"># 启用 SSL/TLS 身份验证服务时，同时应配置验证证书。</div><div class=\"line\"># 如果你不想安装 ca 证书。禁用此项是有必要的，若启用yes，</div><div class=\"line\"># 则需要使用 SSLCertPath 指定其证书路劲</div><div class=\"line\"></div><div class=\"line\"># 此设置要求 WifiDog 编译 SSL 支持。 否则它将被忽略了。</div><div class=\"line\"># 若完全出于测试目的请禁用 SSL</div><div class=\"line\"># SSLAvailable 为禁用时，此处却启用，将导致身份验证问题。</div><div class=\"line\"># 这会使得已经通过HTTPS验证的用户再次重定向到验证</div><div class=\"line\"># SSLPeerVerification no</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># SSL证书路径</div><div class=\"line\"># Parameter: SSLCertPath</div><div class=\"line\"># Default: /etc/ssl/certs/</div><div class=\"line\"># 前提是SSLAvailable是启用状态才会有效，</div><div class=\"line\"># 此目录中的证书必须由其哈希值命名。对于认证交换的</div><div class=\"line\"># 您需要一个 ca 证书包比什么运屏障断路器</div><div class=\"line\"># 参见 https://dev.openwrt.org/ticket/16537</div><div class=\"line\"># 此设置要求 WifiDog 编译SSL支持。否则它将被忽略了。</div><div class=\"line\"># SSLCertPath /etc/ssl/certs/</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 证书加密算法</div><div class=\"line\"># Parameter: SSLAllowedCipherList</div><div class=\"line\"># Default: all ciphers supported</div><div class=\"line\"># 允许使用密码加密证书 请注意 CyaSSL证书将忽略加密，</div><div class=\"line\"># 由此会导致证书出现 *WITH ERRORS IN THEIR NAMES*错误</div><div class=\"line\"># 请参阅 CyaSSL 文档允许值</div><div class=\"line\"># SSLAllowedCipherList ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDH-ECDSA-AES128-SHA:ECDH-ECDSA-AES256-SHA:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:AES128-SHA:AES256-SHA</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 跳过验证</div><div class=\"line\"># Parameter: TrustedMACList</div><div class=\"line\"># Default: none</div><div class=\"line\"># 多个主机请使用英文逗号分隔，允许指定的MAC不进行验证。</div><div class=\"line\"># 提示: 安全薄弱，因为 MAC 地址很容易被修改。</div><div class=\"line\"># TrustedMACList 00:00:DE:AD:BE:AF,00:00:C0:1D:F0:0D</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 防火墙配置</div><div class=\"line\"># Parameter: FirewallRuleSet</div><div class=\"line\"># Default: none # 参数 强制性 Mandatory 无 none 调用FirewallRule规则</div><div class=\"line\"># 同 FirewallRule 策略一起被调用，</div><div class=\"line\"># 其通常用于某些情况下，系统无法辨别用户时，配置其可能发生的策略</div><div class=\"line\"># 或进行重新验证等办法核实用户</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 防火墙规则</div><div class=\"line\"># Parameter: FirewallRule</div><div class=\"line\"># Default: none</div><div class=\"line\"># Rule Set: global</div><div class=\"line\"># FirewallRuleSet global &#123;</div><div class=\"line\"># FirewallRule syntax:</div><div class=\"line\"># FirewallRule (block|drop|allow|log|ulog) [(tcp|udp|icmp) [port X or port-range X:Y]] [to IP/CIDR]</div><div class=\"line\"></div><div class=\"line\"># 要阻止 SMTP邮件服务 因为是明文传输的，如下</div><div class=\"line\"># FirewallRule block tcp port 25</div><div class=\"line\"></div><div class=\"line\"># 如果您需要限制某网段用户上网或单主机</div><div class=\"line\"># FirewallRule block to 192.168.0.0/16</div><div class=\"line\"># FirewallRule block to 172.16.0.0/12</div><div class=\"line\"># FirewallRule block to 10.0.0.0/8</div><div class=\"line\"># 请注意，这不是客户端隔离，因为是依据IP或网段的，</div><div class=\"line\"># 客户端依然可以通过桥接等方式继续使用</div><div class=\"line\"></div><div class=\"line\"># 这是防止Teliphone软件的规则。</div><div class=\"line\"># FirewallRule allow udp to 69.90.89.192/27</div><div class=\"line\"># FirewallRule allow udp to 69.90.85.0/27</div><div class=\"line\"># FirewallRule allow tcp port 80 to 69.90.89.205</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 这是依据域名的策略配置</div><div class=\"line\">FirewallRule allow tcp to *.stbui.com</div><div class=\"line\">FirewallRule allow tcp to *.baidu.com</div><div class=\"line\">FirewallRule allow tcp to *.weixin.qq.com</div><div class=\"line\"></div><div class=\"line\"># 苹果 iOS 7 客户的问题</div><div class=\"line\"># 参见如下地址的第7条和第14条办法处理:</div><div class=\"line\"># https://github.com/wifidog/wifidog-gateway/issues/</div><div class=\"line\"># FirewallRule allow tcp to apple.com</div><div class=\"line\"># FirewallRule allow tcp to icloud.com</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 使用 Log 或 ulog 进行允许或禁止某些端口内容</div><div class=\"line\"># 如 OPENWRT: 使用这些功能需要依赖项</div><div class=\"line\"># iptables-mod-extra 和 iptables-mod-ulog （基于 linux 发行版）。</div><div class=\"line\"># 规则你想 match.for 交换机︰</div><div class=\"line\"># 如：允许流量在 ip 69.90.89.205 端口 80:上通过</div><div class=\"line\"># FirewallRule log tcp port 80 to 69.90.89.205</div><div class=\"line\"># FirewallRule allow tcp port 80 to 69.90.89.205</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 你想要知道特定内容时，您可采用本办法:</div><div class=\"line\"># FirewallRule log to 0.0.0.0/0</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 无条件阻止</div><div class=\"line\"># Rule Set: validating-users</div><div class=\"line\"># FirewallRuleSet validating-users &#123;</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 无条件允许</div><div class=\"line\"># Rule Set: known-users</div><div class=\"line\"># FirewallRuleSet known-users &#123;</div><div class=\"line\"># FirewallRule allow to wifi.ecvit.com</div><div class=\"line\"># FirewallRule allow to weixin.qq.com</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 验证发生错误</div><div class=\"line\"># Rule Set: auth-is-down</div><div class=\"line\"># FirewallRuleSet auth-is-down &#123;</div><div class=\"line\"># FirewallRule allow to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 非法访问</div><div class=\"line\"># Rule Set: unknown-users</div><div class=\"line\"># 用于未经验证的用户，这是获取重定向的规则集</div><div class=\"line\"># FirewallRuleSet unknown-users &#123;</div><div class=\"line\"># 使用到 ipset 来阻止或允许外部指定的主机。</div><div class=\"line\"># 例如，如果您的身份验证服务器要求用户登录 facebook，</div><div class=\"line\"># 使用 ipset 功能内置到 dnsmasq 来短暂允许Facebook验证所使用的各种 IPs。</div><div class=\"line\"># FirewallRule allow to-ipset fb</div><div class=\"line\"># FirewallRule allow udp port 53</div><div class=\"line\"># FirewallRule allow tcp port 53</div><div class=\"line\"># FirewallRule allow udp port 67</div><div class=\"line\"># FirewallRule allow tcp port 67</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 禁止连接的客户端</div><div class=\"line\"># Rule Set: locked-users</div><div class=\"line\"># FirewallRuleSet locked-users &#123;</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/wifidog start</div></pre></td></tr></table></figure></p>\n<p>开机自启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/wifidog enable</div></pre></td></tr></table></figure></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><a href=\"/2017/01/13/wifidog认证服务开发/\" title=\"wifidog认证服务开发 - nodejs\">wifidog认证服务开发 - nodejs</a>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果路由器中配置了 <code>mwan3</code> ，即使 wifidog 授权成功也无法上网，需要停止mwan3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">状态 -&gt; 系统进程 -&gt; 找到“mwan3track”相关的关键字 -&gt; 关闭</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>wifidog包：<br><a href=\"https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk</a></p>\n<p><a href=\"http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</a></p>\n<p>源代码：<br><a href=\"https://github.com/wifidog/wifidog-gateway\" target=\"_blank\" rel=\"external\">https://github.com/wifidog/wifidog-gateway</a></p>\n<p>微信接口文档<br><a href=\"http://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html</a></p>\n<p><a href=\"https://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/\" target=\"_blank\" rel=\"external\">https://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/</a></p>\n<p><a href=\"http://blog.csdn.net/just_young/article/details/38003015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/just_young/article/details/38003015</a></p>\n<p><a href=\"http://www.cnblogs.com/tolimit/p/4223644.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tolimit/p/4223644.html</a></p>\n<p><a href=\"https://github.com/liudf0716/apfree_wifidog\" target=\"_blank\" rel=\"external\">https://github.com/liudf0716/apfree_wifidog</a></p>\n<h3 id=\"附-操作命令\"><a href=\"#附-操作命令\" class=\"headerlink\" title=\"附 操作命令\"></a>附 操作命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</div><div class=\"line\">vi /etc/wifidog.conf</div><div class=\"line\"></div><div class=\"line\">// 编辑配置文件</div><div class=\"line\">// GatewayID default</div><div class=\"line\">// ExternalInterface eth0</div><div class=\"line\">// GatewayAddress 192.168.1.1</div><div class=\"line\">// AUthServer &#123;</div><div class=\"line\">//    Hostname 192.168.1.165</div><div class=\"line\">//    SSLAvailable no</div><div class=\"line\">//    Path /</div><div class=\"line\">// &#125;</div><div class=\"line\">// FirewallRule allow tcp to www.baidu.com</div><div class=\"line\"></div><div class=\"line\">/etc/init.d/wifidog start</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h3><p>在路由器上安装wifidog搭建无线热点认证系统，终端设备联网没有授权将无法上网</p>\n<h3 id=\"硬件设备\"><a href=\"#硬件设备\" class=\"headerlink\" title=\"硬件设备\"></a>硬件设备</h3><p>路由器：极路由3(智能双频路由器)<br>型号：HC5861</p>\n<h3 id=\"软件信息\"><a href=\"#软件信息\" class=\"headerlink\" title=\"软件信息\"></a>软件信息</h3><p>固件版本：<br>wifidog版本：wifidog_1.2.1-2</p>\n<h3 id=\"安装wifidog\"><a href=\"#安装wifidog\" class=\"headerlink\" title=\"安装wifidog\"></a>安装wifidog</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install wifidog</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</div></pre></td></tr></table></figure></p>\n<h3 id=\"配置wifi\"><a href=\"#配置wifi\" class=\"headerlink\" title=\"配置wifi\"></a>配置wifi</h3><p>/etc/wifidog.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div></pre></td><td class=\"code\"><pre><div class=\"line\"># $Id$</div><div class=\"line\"># WiFiDog 配置文件</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 设备编号ID</div><div class=\"line\"># Parameter: GatewayID</div><div class=\"line\"># Default: default</div><div class=\"line\">GatewayID stbui</div><div class=\"line\"># 在身份验证服务器上将此设置为节点 ID</div><div class=\"line\"># 用于批量部署设备监测/统计目的。如果没有提供，则超时将使</div><div class=\"line\"># 用 GatewayInterface 接口的 mac 地作为ID : separators</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 外部接口</div><div class=\"line\"># Parameter: ExternalInterface</div><div class=\"line\"># Default: br-lan</div><div class=\"line\"># Optional</div><div class=\"line\"># 将此设置为外部接口，出现多级NAT网络配置时或更多复杂NAT环</div><div class=\"line\"># 境下,或子网VLAN，接口 eth0 ，认证ppp0 ！否则为自动检测</div><div class=\"line\">ExternalInterface eth0.2</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 内网接口</div><div class=\"line\"># Parameter: GatewayInterface</div><div class=\"line\"># Default: br-lan</div><div class=\"line\"># Mandatory</div><div class=\"line\"># 通常为内网群体，接口常以网桥br-lan， 交换机Switch ，</div><div class=\"line\"># 接口eth1，ath0 可以得到此 ifconfig 命令，查看相关配置信息</div><div class=\"line\">GatewayInterface br-lan</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 网关设置</div><div class=\"line\"># Parameter: GatewayAddress</div><div class=\"line\"># Default: 从接口查询GatewayInterface</div><div class=\"line\"># 内网IP网关，出现多DHCP服务时请指定，通常不需要。</div><div class=\"line\">GatewayAddress 192.168.1.1</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 认证页面</div><div class=\"line\"># Parameter: HtmlMessageFile</div><div class=\"line\"># Default: wifidog-msg.html</div><div class=\"line\"># 这允许您指定一个自定义 HTML 文件，它由网关触发。</div><div class=\"line\"># 该文件内的“标题 $title、错误信息 $message 错误 $node”是</div><div class=\"line\"># 需要被替换的内容，可看做此为模板文件。</div><div class=\"line\"># HtmlMessageFile /etc/wifidog-msg.html</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 验证服务</div><div class=\"line\"># Parameter: AuthServer</div><div class=\"line\"># Default: NONE</div><div class=\"line\"># Mandatory, repeatable</div><div class=\"line\"># 这允许您配置您的身份验证服务 可多个 顺序响应直到收到应答。</div><div class=\"line\"># 需要配置:主机名 Hostname 路径，协议等 强制性Mandatory</div><div class=\"line\">AuthServer &#123;</div><div class=\"line\">  Hostname 192.168.1.165</div><div class=\"line\">  SSLAvailable no                   # yes,no 默认 no</div><div class=\"line\">  SSLPort 443                       # 默认为 443</div><div class=\"line\">  HTTPPort 80                       # 默认为 80</div><div class=\"line\">  Path /                            # 默认为空白</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"># 如果启用了 SSLAvailable，客户端将被重定向到HTTPS端口上的</div><div class=\"line\"># 身份验证守护进程。如果 Wifidog启用SSL加密连接，</div><div class=\"line\"># 其Wifidog也需使用HTTPS协议，而不非HTTP协议进行身份验证服务。</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 多种认证时，继续如下配置</div><div class=\"line\"># AuthServer &#123;</div><div class=\"line\"># Hostname ecvit.com</div><div class=\"line\"># SSLAvailable yes</div><div class=\"line\"># Path /</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 后台运行</div><div class=\"line\"># Parameter: Daemon</div><div class=\"line\"># Default: 1 # 1 允许 0 拒绝</div><div class=\"line\"># Daemon 1</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 网关侦听端口</div><div class=\"line\"># Parameter: GatewayPort</div><div class=\"line\"># Default: 2060</div><div class=\"line\"># Optional</div><div class=\"line\"># GatewayPort 2060</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 代理端口</div><div class=\"line\"># Parameter: ProxyPort</div><div class=\"line\"># Default: 0 (或者 disable ，1 为启用或 enable)</div><div class=\"line\"># 重定向http流量到本地代理端口，透明代理用户</div><div class=\"line\"># ProxyPort 0</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 指定唤醒</div><div class=\"line\"># Parameter: HTTPDName</div><div class=\"line\"># Default: WiFiDog</div><div class=\"line\"># HTTPDName:cnweaks</div><div class=\"line\"># 定义什么名字 HTTPD 服务将响应调起 HTTPDName WiFiDog</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 最大连接</div><div class=\"line\"># Parameter: HTTPDMaxConn</div><div class=\"line\"># Default: 10</div><div class=\"line\"># HTTPDMaxConn 100</div><div class=\"line\"># 指定接入用户的最大数量</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 自身防护</div><div class=\"line\"># Parameter: HTTPDRealm</div><div class=\"line\"># Default: WiFiDog</div><div class=\"line\"># HTTP域身份试图访问受保护的WiFiDog内部内容时，禁止访问</div><div class=\"line\"># 更多请参阅 HTTPUserName。</div><div class=\"line\"># HTTPDRealm wifidog</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 账户密码保护</div><div class=\"line\"># Parameter: HTTPDUserName / HTTPDPassword</div><div class=\"line\"># Default: unset</div><div class=\"line\"># 网关会广播某些信息，如用户名和密码，这使得可被任意接收。</div><div class=\"line\"># 您可通过 HTTPDUserName HTTPDPassword 设置需要保护的参数。</div><div class=\"line\"># HTTPDUserName admin</div><div class=\"line\"># HTTPDPassword 847676</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 流量计数器</div><div class=\"line\"># Parameter: CheckInterval</div><div class=\"line\"># Default: 60</div><div class=\"line\"># 一般用于统计用户上网时长或流量统计使用，过频繁会使网关压力</div><div class=\"line\"># 加大，指向到其他辅助服务器不太现实，基本无用处</div><div class=\"line\"># CheckInterval 60</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 状态过期注销</div><div class=\"line\"># Parameter: ClientTimeout</div><div class=\"line\"># Default: 5</div><div class=\"line\"># 此配置将使接入客户端在指定的时间后，将其注销活动状态，</div><div class=\"line\"># 注销后用户将处在“网络连接超时”状态</div><div class=\"line\"># ClientTimeout 30</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># SSL证书配置</div><div class=\"line\"># Parameter: SSLPeerVerification</div><div class=\"line\"># Default: yes</div><div class=\"line\"># 启用 SSL/TLS 身份验证服务时，同时应配置验证证书。</div><div class=\"line\"># 如果你不想安装 ca 证书。禁用此项是有必要的，若启用yes，</div><div class=\"line\"># 则需要使用 SSLCertPath 指定其证书路劲</div><div class=\"line\"></div><div class=\"line\"># 此设置要求 WifiDog 编译 SSL 支持。 否则它将被忽略了。</div><div class=\"line\"># 若完全出于测试目的请禁用 SSL</div><div class=\"line\"># SSLAvailable 为禁用时，此处却启用，将导致身份验证问题。</div><div class=\"line\"># 这会使得已经通过HTTPS验证的用户再次重定向到验证</div><div class=\"line\"># SSLPeerVerification no</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># SSL证书路径</div><div class=\"line\"># Parameter: SSLCertPath</div><div class=\"line\"># Default: /etc/ssl/certs/</div><div class=\"line\"># 前提是SSLAvailable是启用状态才会有效，</div><div class=\"line\"># 此目录中的证书必须由其哈希值命名。对于认证交换的</div><div class=\"line\"># 您需要一个 ca 证书包比什么运屏障断路器</div><div class=\"line\"># 参见 https://dev.openwrt.org/ticket/16537</div><div class=\"line\"># 此设置要求 WifiDog 编译SSL支持。否则它将被忽略了。</div><div class=\"line\"># SSLCertPath /etc/ssl/certs/</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 证书加密算法</div><div class=\"line\"># Parameter: SSLAllowedCipherList</div><div class=\"line\"># Default: all ciphers supported</div><div class=\"line\"># 允许使用密码加密证书 请注意 CyaSSL证书将忽略加密，</div><div class=\"line\"># 由此会导致证书出现 *WITH ERRORS IN THEIR NAMES*错误</div><div class=\"line\"># 请参阅 CyaSSL 文档允许值</div><div class=\"line\"># SSLAllowedCipherList ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDH-ECDSA-AES128-GCM-SHA256:ECDH-ECDSA-AES256-GCM-SHA384:ECDH-RSA-AES128-GCM-SHA256:ECDH-RSA-AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:ECDH-ECDSA-AES128-SHA:ECDH-ECDSA-AES256-SHA:ECDH-RSA-AES128-SHA:ECDH-RSA-AES256-SHA:AES128-SHA:AES256-SHA</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 跳过验证</div><div class=\"line\"># Parameter: TrustedMACList</div><div class=\"line\"># Default: none</div><div class=\"line\"># 多个主机请使用英文逗号分隔，允许指定的MAC不进行验证。</div><div class=\"line\"># 提示: 安全薄弱，因为 MAC 地址很容易被修改。</div><div class=\"line\"># TrustedMACList 00:00:DE:AD:BE:AF,00:00:C0:1D:F0:0D</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 防火墙配置</div><div class=\"line\"># Parameter: FirewallRuleSet</div><div class=\"line\"># Default: none # 参数 强制性 Mandatory 无 none 调用FirewallRule规则</div><div class=\"line\"># 同 FirewallRule 策略一起被调用，</div><div class=\"line\"># 其通常用于某些情况下，系统无法辨别用户时，配置其可能发生的策略</div><div class=\"line\"># 或进行重新验证等办法核实用户</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 防火墙规则</div><div class=\"line\"># Parameter: FirewallRule</div><div class=\"line\"># Default: none</div><div class=\"line\"># Rule Set: global</div><div class=\"line\"># FirewallRuleSet global &#123;</div><div class=\"line\"># FirewallRule syntax:</div><div class=\"line\"># FirewallRule (block|drop|allow|log|ulog) [(tcp|udp|icmp) [port X or port-range X:Y]] [to IP/CIDR]</div><div class=\"line\"></div><div class=\"line\"># 要阻止 SMTP邮件服务 因为是明文传输的，如下</div><div class=\"line\"># FirewallRule block tcp port 25</div><div class=\"line\"></div><div class=\"line\"># 如果您需要限制某网段用户上网或单主机</div><div class=\"line\"># FirewallRule block to 192.168.0.0/16</div><div class=\"line\"># FirewallRule block to 172.16.0.0/12</div><div class=\"line\"># FirewallRule block to 10.0.0.0/8</div><div class=\"line\"># 请注意，这不是客户端隔离，因为是依据IP或网段的，</div><div class=\"line\"># 客户端依然可以通过桥接等方式继续使用</div><div class=\"line\"></div><div class=\"line\"># 这是防止Teliphone软件的规则。</div><div class=\"line\"># FirewallRule allow udp to 69.90.89.192/27</div><div class=\"line\"># FirewallRule allow udp to 69.90.85.0/27</div><div class=\"line\"># FirewallRule allow tcp port 80 to 69.90.89.205</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 这是依据域名的策略配置</div><div class=\"line\">FirewallRule allow tcp to *.stbui.com</div><div class=\"line\">FirewallRule allow tcp to *.baidu.com</div><div class=\"line\">FirewallRule allow tcp to *.weixin.qq.com</div><div class=\"line\"></div><div class=\"line\"># 苹果 iOS 7 客户的问题</div><div class=\"line\"># 参见如下地址的第7条和第14条办法处理:</div><div class=\"line\"># https://github.com/wifidog/wifidog-gateway/issues/</div><div class=\"line\"># FirewallRule allow tcp to apple.com</div><div class=\"line\"># FirewallRule allow tcp to icloud.com</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 使用 Log 或 ulog 进行允许或禁止某些端口内容</div><div class=\"line\"># 如 OPENWRT: 使用这些功能需要依赖项</div><div class=\"line\"># iptables-mod-extra 和 iptables-mod-ulog （基于 linux 发行版）。</div><div class=\"line\"># 规则你想 match.for 交换机︰</div><div class=\"line\"># 如：允许流量在 ip 69.90.89.205 端口 80:上通过</div><div class=\"line\"># FirewallRule log tcp port 80 to 69.90.89.205</div><div class=\"line\"># FirewallRule allow tcp port 80 to 69.90.89.205</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 你想要知道特定内容时，您可采用本办法:</div><div class=\"line\"># FirewallRule log to 0.0.0.0/0</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 无条件阻止</div><div class=\"line\"># Rule Set: validating-users</div><div class=\"line\"># FirewallRuleSet validating-users &#123;</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 无条件允许</div><div class=\"line\"># Rule Set: known-users</div><div class=\"line\"># FirewallRuleSet known-users &#123;</div><div class=\"line\"># FirewallRule allow to wifi.ecvit.com</div><div class=\"line\"># FirewallRule allow to weixin.qq.com</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 验证发生错误</div><div class=\"line\"># Rule Set: auth-is-down</div><div class=\"line\"># FirewallRuleSet auth-is-down &#123;</div><div class=\"line\"># FirewallRule allow to 0.0.0.0/0</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 非法访问</div><div class=\"line\"># Rule Set: unknown-users</div><div class=\"line\"># 用于未经验证的用户，这是获取重定向的规则集</div><div class=\"line\"># FirewallRuleSet unknown-users &#123;</div><div class=\"line\"># 使用到 ipset 来阻止或允许外部指定的主机。</div><div class=\"line\"># 例如，如果您的身份验证服务器要求用户登录 facebook，</div><div class=\"line\"># 使用 ipset 功能内置到 dnsmasq 来短暂允许Facebook验证所使用的各种 IPs。</div><div class=\"line\"># FirewallRule allow to-ipset fb</div><div class=\"line\"># FirewallRule allow udp port 53</div><div class=\"line\"># FirewallRule allow tcp port 53</div><div class=\"line\"># FirewallRule allow udp port 67</div><div class=\"line\"># FirewallRule allow tcp port 67</div><div class=\"line\"># &#125;</div><div class=\"line\"># *******************************************************</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># *******************************************************</div><div class=\"line\"># 禁止连接的客户端</div><div class=\"line\"># Rule Set: locked-users</div><div class=\"line\"># FirewallRuleSet locked-users &#123;</div><div class=\"line\"># FirewallRule block to 0.0.0.0/0</div><div class=\"line\"># &#125;</div></pre></td></tr></table></figure></p>\n<p>启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/wifidog start</div></pre></td></tr></table></figure></p>\n<p>开机自启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/wifidog enable</div></pre></td></tr></table></figure></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><a href=\"/2017/01/13/wifidog认证服务开发/\" title=\"wifidog认证服务开发 - nodejs\">wifidog认证服务开发 - nodejs</a>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>如果路由器中配置了 <code>mwan3</code> ，即使 wifidog 授权成功也无法上网，需要停止mwan3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">状态 -&gt; 系统进程 -&gt; 找到“mwan3track”相关的关键字 -&gt; 关闭</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>wifidog包：<br><a href=\"https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/chaos_calmer/15.05.1/ramips/mt7620/packages/packages/wifidog_1.2.1-1_ramips_24kec.ipk</a></p>\n<p><a href=\"http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</a></p>\n<p>源代码：<br><a href=\"https://github.com/wifidog/wifidog-gateway\" target=\"_blank\" rel=\"external\">https://github.com/wifidog/wifidog-gateway</a></p>\n<p>微信接口文档<br><a href=\"http://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/wiki/2/55f1e301f4558846d2bf0dd51543e252.html</a></p>\n<p><a href=\"https://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/\" target=\"_blank\" rel=\"external\">https://blog.fliaping.com/the-implements-of-weixin-wifi-by-using-wifidog-gateway/</a></p>\n<p><a href=\"http://blog.csdn.net/just_young/article/details/38003015\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/just_young/article/details/38003015</a></p>\n<p><a href=\"http://www.cnblogs.com/tolimit/p/4223644.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/tolimit/p/4223644.html</a></p>\n<p><a href=\"https://github.com/liudf0716/apfree_wifidog\" target=\"_blank\" rel=\"external\">https://github.com/liudf0716/apfree_wifidog</a></p>\n<h3 id=\"附-操作命令\"><a href=\"#附-操作命令\" class=\"headerlink\" title=\"附 操作命令\"></a>附 操作命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.openwrt.io/vendors/gee/ralink/packages/wifidog_1.2.1-2_ralink.ipk</div><div class=\"line\">vi /etc/wifidog.conf</div><div class=\"line\"></div><div class=\"line\">// 编辑配置文件</div><div class=\"line\">// GatewayID default</div><div class=\"line\">// ExternalInterface eth0</div><div class=\"line\">// GatewayAddress 192.168.1.1</div><div class=\"line\">// AUthServer &#123;</div><div class=\"line\">//    Hostname 192.168.1.165</div><div class=\"line\">//    SSLAvailable no</div><div class=\"line\">//    Path /</div><div class=\"line\">// &#125;</div><div class=\"line\">// FirewallRule allow tcp to www.baidu.com</div><div class=\"line\"></div><div class=\"line\">/etc/init.d/wifidog start</div></pre></td></tr></table></figure>"},{"title":"pandorabox中mwan负载均衡配置","date":"2017-01-09T03:24:44.000Z","_content":"\n### 设备环境\n\n路由器：极路由3(智能双频路由器)\n型号：HC5861\n主机型号：MediaTek MT7620A Evaluation Board\n固件版本：PandoraBox 16.11 R4-3 Mod By LEAN / LuCI Master (git-16.274.06460-a91d7ee)\n内核版本：3.14.79\n\n### 实验目标\n在公司局域网中一般做了网络限速，通过创建多个虚拟wan获取不同IP地址，然后配置mwan达到网速提速效果。\n\n### 固件&工具\n\nssh: xshell\n固件：\n\n\n### 刷机\n\n{% post_link 极路由3刷机过程 %}\n\n\n### 配置\n\n<!-- more -->\n\n#### 接口添加\n\n选择“网络” “接口” “添加新接口”\n\n![](/images/201701091216.jpg)\n\n设置IP地址\n![](/images/2017-01-09_122138.jpg)\n\n设置活跃点\n![](/images/2017-01-09_122234.jpg)\n\n分配防火墙\n![](/images/2017-01-09_122308.jpg)\n\n#### mwan添加\n\n选择“网络” “负载均衡”\n\n![](/images/201701091218.jpg)\n\n成员设置\n\n![](/images/2017-01-09_122359.jpg)\n\n策略设置\n\n![](/images/2017-01-09_122435.jpg)\n\n规则设置\n\n![](/images/2017-01-09_122457.jpg)\n\n设置成功\n\n![](/images/2017-01-09_122944.jpg)\n\n\n### 参考资料\n","source":"_posts/pandorabox中mwan负载均衡配置.md","raw":"---\ntitle: pandorabox中mwan负载均衡配置\ndate: 2017-01-09 11:24:44\ncategories: openwrt\ntags: [openwrt,pandorabox,hc5861]\n---\n\n### 设备环境\n\n路由器：极路由3(智能双频路由器)\n型号：HC5861\n主机型号：MediaTek MT7620A Evaluation Board\n固件版本：PandoraBox 16.11 R4-3 Mod By LEAN / LuCI Master (git-16.274.06460-a91d7ee)\n内核版本：3.14.79\n\n### 实验目标\n在公司局域网中一般做了网络限速，通过创建多个虚拟wan获取不同IP地址，然后配置mwan达到网速提速效果。\n\n### 固件&工具\n\nssh: xshell\n固件：\n\n\n### 刷机\n\n{% post_link 极路由3刷机过程 %}\n\n\n### 配置\n\n<!-- more -->\n\n#### 接口添加\n\n选择“网络” “接口” “添加新接口”\n\n![](/images/201701091216.jpg)\n\n设置IP地址\n![](/images/2017-01-09_122138.jpg)\n\n设置活跃点\n![](/images/2017-01-09_122234.jpg)\n\n分配防火墙\n![](/images/2017-01-09_122308.jpg)\n\n#### mwan添加\n\n选择“网络” “负载均衡”\n\n![](/images/201701091218.jpg)\n\n成员设置\n\n![](/images/2017-01-09_122359.jpg)\n\n策略设置\n\n![](/images/2017-01-09_122435.jpg)\n\n规则设置\n\n![](/images/2017-01-09_122457.jpg)\n\n设置成功\n\n![](/images/2017-01-09_122944.jpg)\n\n\n### 参考资料\n","slug":"pandorabox中mwan负载均衡配置","published":1,"updated":"2017-08-03T10:21:24.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dn000knou9gphpld01","content":"<h3 id=\"设备环境\"><a href=\"#设备环境\" class=\"headerlink\" title=\"设备环境\"></a>设备环境</h3><p>路由器：极路由3(智能双频路由器)<br>型号：HC5861<br>主机型号：MediaTek MT7620A Evaluation Board<br>固件版本：PandoraBox 16.11 R4-3 Mod By LEAN / LuCI Master (git-16.274.06460-a91d7ee)<br>内核版本：3.14.79</p>\n<h3 id=\"实验目标\"><a href=\"#实验目标\" class=\"headerlink\" title=\"实验目标\"></a>实验目标</h3><p>在公司局域网中一般做了网络限速，通过创建多个虚拟wan获取不同IP地址，然后配置mwan达到网速提速效果。</p>\n<h3 id=\"固件-amp-工具\"><a href=\"#固件-amp-工具\" class=\"headerlink\" title=\"固件&amp;工具\"></a>固件&amp;工具</h3><p>ssh: xshell<br>固件：</p>\n<h3 id=\"刷机\"><a href=\"#刷机\" class=\"headerlink\" title=\"刷机\"></a>刷机</h3>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><a id=\"more\"></a>\n<h4 id=\"接口添加\"><a href=\"#接口添加\" class=\"headerlink\" title=\"接口添加\"></a>接口添加</h4><p>选择“网络” “接口” “添加新接口”</p>\n<p><img src=\"/images/201701091216.jpg\" alt=\"\"></p>\n<p>设置IP地址<br><img src=\"/images/2017-01-09_122138.jpg\" alt=\"\"></p>\n<p>设置活跃点<br><img src=\"/images/2017-01-09_122234.jpg\" alt=\"\"></p>\n<p>分配防火墙<br><img src=\"/images/2017-01-09_122308.jpg\" alt=\"\"></p>\n<h4 id=\"mwan添加\"><a href=\"#mwan添加\" class=\"headerlink\" title=\"mwan添加\"></a>mwan添加</h4><p>选择“网络” “负载均衡”</p>\n<p><img src=\"/images/201701091218.jpg\" alt=\"\"></p>\n<p>成员设置</p>\n<p><img src=\"/images/2017-01-09_122359.jpg\" alt=\"\"></p>\n<p>策略设置</p>\n<p><img src=\"/images/2017-01-09_122435.jpg\" alt=\"\"></p>\n<p>规则设置</p>\n<p><img src=\"/images/2017-01-09_122457.jpg\" alt=\"\"></p>\n<p>设置成功</p>\n<p><img src=\"/images/2017-01-09_122944.jpg\" alt=\"\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>","site":{"data":{}},"excerpt":"<h3 id=\"设备环境\"><a href=\"#设备环境\" class=\"headerlink\" title=\"设备环境\"></a>设备环境</h3><p>路由器：极路由3(智能双频路由器)<br>型号：HC5861<br>主机型号：MediaTek MT7620A Evaluation Board<br>固件版本：PandoraBox 16.11 R4-3 Mod By LEAN / LuCI Master (git-16.274.06460-a91d7ee)<br>内核版本：3.14.79</p>\n<h3 id=\"实验目标\"><a href=\"#实验目标\" class=\"headerlink\" title=\"实验目标\"></a>实验目标</h3><p>在公司局域网中一般做了网络限速，通过创建多个虚拟wan获取不同IP地址，然后配置mwan达到网速提速效果。</p>\n<h3 id=\"固件-amp-工具\"><a href=\"#固件-amp-工具\" class=\"headerlink\" title=\"固件&amp;工具\"></a>固件&amp;工具</h3><p>ssh: xshell<br>固件：</p>\n<h3 id=\"刷机\"><a href=\"#刷机\" class=\"headerlink\" title=\"刷机\"></a>刷机</h3>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3>","more":"<h4 id=\"接口添加\"><a href=\"#接口添加\" class=\"headerlink\" title=\"接口添加\"></a>接口添加</h4><p>选择“网络” “接口” “添加新接口”</p>\n<p><img src=\"/images/201701091216.jpg\" alt=\"\"></p>\n<p>设置IP地址<br><img src=\"/images/2017-01-09_122138.jpg\" alt=\"\"></p>\n<p>设置活跃点<br><img src=\"/images/2017-01-09_122234.jpg\" alt=\"\"></p>\n<p>分配防火墙<br><img src=\"/images/2017-01-09_122308.jpg\" alt=\"\"></p>\n<h4 id=\"mwan添加\"><a href=\"#mwan添加\" class=\"headerlink\" title=\"mwan添加\"></a>mwan添加</h4><p>选择“网络” “负载均衡”</p>\n<p><img src=\"/images/201701091218.jpg\" alt=\"\"></p>\n<p>成员设置</p>\n<p><img src=\"/images/2017-01-09_122359.jpg\" alt=\"\"></p>\n<p>策略设置</p>\n<p><img src=\"/images/2017-01-09_122435.jpg\" alt=\"\"></p>\n<p>规则设置</p>\n<p><img src=\"/images/2017-01-09_122457.jpg\" alt=\"\"></p>\n<p>设置成功</p>\n<p><img src=\"/images/2017-01-09_122944.jpg\" alt=\"\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>"},{"title":"在树莓派3(raspberry Pi 3)上刷openwrt实现路由器","date":"2017-01-17T05:04:05.000Z","_content":"\n### 硬件配置\n\n CPU: 1.2GHz 四核 Broadcom BCM2837 64 位 ARMv8 处理器\n WiFi功能：板载 BCM43143 WiFi\n 蓝牙功能：板载低功耗蓝牙4.0功能 (BLE)\n 内存：1GB RAM\n 4 个 USB 2 端口\n 40引脚扩展GPIO\n HDMI 和 RCA 视频输出\n 4路立体声输出和复合视频端口\n 全尺寸HDMI\n\n### 工具\n\nwin32 Disk Imager\nXshell\n\n### 固件地址\n\nhttps://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710\n\nhttps://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz\n\n### 配置\n\n##### 网络\n\n```\n/etc/config/network\n```\n```\nconfig interface 'loopback'\n\toption ifname 'lo'\n\toption proto 'static'\n\toption ipaddr '127.0.0.1'\n\toption netmask '255.0.0.0'\n\nconfig globals 'globals'\n\toption ula_prefix 'fdf7:af39:fdc2::/48'\n\nconfig interface 'lan'\n\toption type 'bridge'\n#\toption ifname 'eth0'\n\toption proto 'static'\n\toption ipaddr '192.168.1.1'\n\toption netmask '255.255.255.0'\n\toption ip6assign '60'\n\n#config interface 'wan'\n#\toption proto 'dhcp'\n#\toption ifname 'eth0'\n\nconfig interface 'wan'\n\toption ifname 'eth0'\n\toption proto 'static'\n\toption ipaddr '172.31.32.200'\n\toption netmask '255.255.255.0'\n\toption gateway '172.31.32.1'\n\toption dns '202.96.209.133'\n```\n\n```\n/etc/config/wireless\n```\n```\nconfig wifi-device 'radio0'\n\toption type 'mac80211'\n\toption channel '11'\n\toption hwmode '11g'\n\toption path 'platform/soc/3f300000.mmc/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n\toption htmode 'HT20'\n\toption disabled '0'\n\nconfig wifi-iface 'default_radio0'\n\toption device 'radio0'\n\toption network 'lan'\n\toption mode 'ap'\n\toption ssid 'stbui'\n\toption encryption 'none'\n#\toption encryption psk2\n#\toption key '12345678'\n```\n\n```\n/etc/config/firewall\n```\n\n##### 安装luci界面\n\n```\nopkg update\nopkg install luci\n```\n\n```\n/etc/init.d/uhttpd start\n/etc/init.d/uhttpd enable\n```\n\n### 验证\n\n### 参考\nLEDE:\nhttps://lede-project.org/\n","source":"_posts/raspberry-openwrt.md","raw":"---\ntitle: 在树莓派3(raspberry Pi 3)上刷openwrt实现路由器\ndate: 2017-01-17 13:04:05\ntags: [opentwrt, respberry]\n---\n\n### 硬件配置\n\n CPU: 1.2GHz 四核 Broadcom BCM2837 64 位 ARMv8 处理器\n WiFi功能：板载 BCM43143 WiFi\n 蓝牙功能：板载低功耗蓝牙4.0功能 (BLE)\n 内存：1GB RAM\n 4 个 USB 2 端口\n 40引脚扩展GPIO\n HDMI 和 RCA 视频输出\n 4路立体声输出和复合视频端口\n 全尺寸HDMI\n\n### 工具\n\nwin32 Disk Imager\nXshell\n\n### 固件地址\n\nhttps://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710\n\nhttps://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz\n\n### 配置\n\n##### 网络\n\n```\n/etc/config/network\n```\n```\nconfig interface 'loopback'\n\toption ifname 'lo'\n\toption proto 'static'\n\toption ipaddr '127.0.0.1'\n\toption netmask '255.0.0.0'\n\nconfig globals 'globals'\n\toption ula_prefix 'fdf7:af39:fdc2::/48'\n\nconfig interface 'lan'\n\toption type 'bridge'\n#\toption ifname 'eth0'\n\toption proto 'static'\n\toption ipaddr '192.168.1.1'\n\toption netmask '255.255.255.0'\n\toption ip6assign '60'\n\n#config interface 'wan'\n#\toption proto 'dhcp'\n#\toption ifname 'eth0'\n\nconfig interface 'wan'\n\toption ifname 'eth0'\n\toption proto 'static'\n\toption ipaddr '172.31.32.200'\n\toption netmask '255.255.255.0'\n\toption gateway '172.31.32.1'\n\toption dns '202.96.209.133'\n```\n\n```\n/etc/config/wireless\n```\n```\nconfig wifi-device 'radio0'\n\toption type 'mac80211'\n\toption channel '11'\n\toption hwmode '11g'\n\toption path 'platform/soc/3f300000.mmc/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n\toption htmode 'HT20'\n\toption disabled '0'\n\nconfig wifi-iface 'default_radio0'\n\toption device 'radio0'\n\toption network 'lan'\n\toption mode 'ap'\n\toption ssid 'stbui'\n\toption encryption 'none'\n#\toption encryption psk2\n#\toption key '12345678'\n```\n\n```\n/etc/config/firewall\n```\n\n##### 安装luci界面\n\n```\nopkg update\nopkg install luci\n```\n\n```\n/etc/init.d/uhttpd start\n/etc/init.d/uhttpd enable\n```\n\n### 验证\n\n### 参考\nLEDE:\nhttps://lede-project.org/\n","slug":"raspberry-openwrt","published":1,"updated":"2017-08-03T10:21:24.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96do000lnou9hhhaduej","content":"<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><p> CPU: 1.2GHz 四核 Broadcom BCM2837 64 位 ARMv8 处理器<br> WiFi功能：板载 BCM43143 WiFi<br> 蓝牙功能：板载低功耗蓝牙4.0功能 (BLE)<br> 内存：1GB RAM<br> 4 个 USB 2 端口<br> 40引脚扩展GPIO<br> HDMI 和 RCA 视频输出<br> 4路立体声输出和复合视频端口<br> 全尺寸HDMI</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>win32 Disk Imager<br>Xshell</p>\n<h3 id=\"固件地址\"><a href=\"#固件地址\" class=\"headerlink\" title=\"固件地址\"></a>固件地址</h3><p><a href=\"https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710\" target=\"_blank\" rel=\"external\">https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710</a></p>\n<p><a href=\"https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz\" target=\"_blank\" rel=\"external\">https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/network</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">config interface &apos;loopback&apos;</div><div class=\"line\">\toption ifname &apos;lo&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;127.0.0.1&apos;</div><div class=\"line\">\toption netmask &apos;255.0.0.0&apos;</div><div class=\"line\"></div><div class=\"line\">config globals &apos;globals&apos;</div><div class=\"line\">\toption ula_prefix &apos;fdf7:af39:fdc2::/48&apos;</div><div class=\"line\"></div><div class=\"line\">config interface &apos;lan&apos;</div><div class=\"line\">\toption type &apos;bridge&apos;</div><div class=\"line\">#\toption ifname &apos;eth0&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;192.168.1.1&apos;</div><div class=\"line\">\toption netmask &apos;255.255.255.0&apos;</div><div class=\"line\">\toption ip6assign &apos;60&apos;</div><div class=\"line\"></div><div class=\"line\">#config interface &apos;wan&apos;</div><div class=\"line\">#\toption proto &apos;dhcp&apos;</div><div class=\"line\">#\toption ifname &apos;eth0&apos;</div><div class=\"line\"></div><div class=\"line\">config interface &apos;wan&apos;</div><div class=\"line\">\toption ifname &apos;eth0&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;172.31.32.200&apos;</div><div class=\"line\">\toption netmask &apos;255.255.255.0&apos;</div><div class=\"line\">\toption gateway &apos;172.31.32.1&apos;</div><div class=\"line\">\toption dns &apos;202.96.209.133&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/wireless</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">config wifi-device &apos;radio0&apos;</div><div class=\"line\">\toption type &apos;mac80211&apos;</div><div class=\"line\">\toption channel &apos;11&apos;</div><div class=\"line\">\toption hwmode &apos;11g&apos;</div><div class=\"line\">\toption path &apos;platform/soc/3f300000.mmc/mmc_host/mmc1/mmc1:0001/mmc1:0001:1&apos;</div><div class=\"line\">\toption htmode &apos;HT20&apos;</div><div class=\"line\">\toption disabled &apos;0&apos;</div><div class=\"line\"></div><div class=\"line\">config wifi-iface &apos;default_radio0&apos;</div><div class=\"line\">\toption device &apos;radio0&apos;</div><div class=\"line\">\toption network &apos;lan&apos;</div><div class=\"line\">\toption mode &apos;ap&apos;</div><div class=\"line\">\toption ssid &apos;stbui&apos;</div><div class=\"line\">\toption encryption &apos;none&apos;</div><div class=\"line\">#\toption encryption psk2</div><div class=\"line\">#\toption key &apos;12345678&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/firewall</div></pre></td></tr></table></figure>\n<h5 id=\"安装luci界面\"><a href=\"#安装luci界面\" class=\"headerlink\" title=\"安装luci界面\"></a>安装luci界面</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install luci</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/uhttpd start</div><div class=\"line\">/etc/init.d/uhttpd enable</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>LEDE:<br><a href=\"https://lede-project.org/\" target=\"_blank\" rel=\"external\">https://lede-project.org/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><p> CPU: 1.2GHz 四核 Broadcom BCM2837 64 位 ARMv8 处理器<br> WiFi功能：板载 BCM43143 WiFi<br> 蓝牙功能：板载低功耗蓝牙4.0功能 (BLE)<br> 内存：1GB RAM<br> 4 个 USB 2 端口<br> 40引脚扩展GPIO<br> HDMI 和 RCA 视频输出<br> 4路立体声输出和复合视频端口<br> 全尺寸HDMI</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>win32 Disk Imager<br>Xshell</p>\n<h3 id=\"固件地址\"><a href=\"#固件地址\" class=\"headerlink\" title=\"固件地址\"></a>固件地址</h3><p><a href=\"https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710\" target=\"_blank\" rel=\"external\">https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710</a></p>\n<p><a href=\"https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz\" target=\"_blank\" rel=\"external\">https://downloads.lede-project.org/snapshots/targets/brcm2708/bcm2710/lede-brcm2708-bcm2710-rpi-3-ext4-sdcard.img.gz</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h5 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/network</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">config interface &apos;loopback&apos;</div><div class=\"line\">\toption ifname &apos;lo&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;127.0.0.1&apos;</div><div class=\"line\">\toption netmask &apos;255.0.0.0&apos;</div><div class=\"line\"></div><div class=\"line\">config globals &apos;globals&apos;</div><div class=\"line\">\toption ula_prefix &apos;fdf7:af39:fdc2::/48&apos;</div><div class=\"line\"></div><div class=\"line\">config interface &apos;lan&apos;</div><div class=\"line\">\toption type &apos;bridge&apos;</div><div class=\"line\">#\toption ifname &apos;eth0&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;192.168.1.1&apos;</div><div class=\"line\">\toption netmask &apos;255.255.255.0&apos;</div><div class=\"line\">\toption ip6assign &apos;60&apos;</div><div class=\"line\"></div><div class=\"line\">#config interface &apos;wan&apos;</div><div class=\"line\">#\toption proto &apos;dhcp&apos;</div><div class=\"line\">#\toption ifname &apos;eth0&apos;</div><div class=\"line\"></div><div class=\"line\">config interface &apos;wan&apos;</div><div class=\"line\">\toption ifname &apos;eth0&apos;</div><div class=\"line\">\toption proto &apos;static&apos;</div><div class=\"line\">\toption ipaddr &apos;172.31.32.200&apos;</div><div class=\"line\">\toption netmask &apos;255.255.255.0&apos;</div><div class=\"line\">\toption gateway &apos;172.31.32.1&apos;</div><div class=\"line\">\toption dns &apos;202.96.209.133&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/wireless</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">config wifi-device &apos;radio0&apos;</div><div class=\"line\">\toption type &apos;mac80211&apos;</div><div class=\"line\">\toption channel &apos;11&apos;</div><div class=\"line\">\toption hwmode &apos;11g&apos;</div><div class=\"line\">\toption path &apos;platform/soc/3f300000.mmc/mmc_host/mmc1/mmc1:0001/mmc1:0001:1&apos;</div><div class=\"line\">\toption htmode &apos;HT20&apos;</div><div class=\"line\">\toption disabled &apos;0&apos;</div><div class=\"line\"></div><div class=\"line\">config wifi-iface &apos;default_radio0&apos;</div><div class=\"line\">\toption device &apos;radio0&apos;</div><div class=\"line\">\toption network &apos;lan&apos;</div><div class=\"line\">\toption mode &apos;ap&apos;</div><div class=\"line\">\toption ssid &apos;stbui&apos;</div><div class=\"line\">\toption encryption &apos;none&apos;</div><div class=\"line\">#\toption encryption psk2</div><div class=\"line\">#\toption key &apos;12345678&apos;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/config/firewall</div></pre></td></tr></table></figure>\n<h5 id=\"安装luci界面\"><a href=\"#安装luci界面\" class=\"headerlink\" title=\"安装luci界面\"></a>安装luci界面</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg update</div><div class=\"line\">opkg install luci</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/uhttpd start</div><div class=\"line\">/etc/init.d/uhttpd enable</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>LEDE:<br><a href=\"https://lede-project.org/\" target=\"_blank\" rel=\"external\">https://lede-project.org/</a></p>\n"},{"title":"raspberry-系统安装","date":"2016-05-09T03:24:44.000Z","_content":"\n在淘宝买的最新`raspberry Pi 3`\n\n### 硬件配置\n\nCPU 和 GPU： Broadcom BCM2835\n内存：1024 MB(LPDDR2)\n视频输入： 15-针头 MIPI 相机 (CSI) 界面，可被树莓派相机或树莓派相机(无红外线版)使用\n视频输出： HDMI 可接入大多数通用 HDMI 接口的显示设备\n音源输入：I²S\n音源输出：HDMI 电子输出或I²S\n板载存储：MicroSD 卡插槽\n板载网卡：10/100Mbps 以太网接口（RJ45接口），支持802.11n无线网络及蓝牙4.1\n通用外设：14 个 GPIO\n电源输入：5V 电压 (通过 MicroUSB 或经 GPIO 输入)\n\n### 烧录镜像\n\n<!--more-->\n\n\n### 系统优化\n\n###### 替换源为国内源\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n\nvi /etc/apt/sources.list\n```\n\n```\n# 清华\ndeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n# 东软信息学院\ndeb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n# 中国科学技术大学\ndeb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n```\n\n然后更新软件\n```\napt-get update\napt-get upgrade\n```\n\n\n### 参考资料\n官网系统下载地址：http://www.raspberrypi.org/downloads/\nCentos7 for Raspberry Pi：\nhttp://mirror.centos.org/altarch/7/isos/armhfp/\n\n让你的docker(只能跑基于ARM的镜像)跑在树莓派上的系统\nhttp://blog.hypriot.com/downloads/\n\nHypriot系统的安装教程\nhttp://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/\n\nHypriot的docker hub\nhttps://hub.docker.com/u/hypriot/\n","source":"_posts/raspberry-系统安装.md","raw":"---\ntitle: raspberry-系统安装\ndate: 2016-05-09 11:24:44\ncategories: raspberry\ntags:\n---\n\n在淘宝买的最新`raspberry Pi 3`\n\n### 硬件配置\n\nCPU 和 GPU： Broadcom BCM2835\n内存：1024 MB(LPDDR2)\n视频输入： 15-针头 MIPI 相机 (CSI) 界面，可被树莓派相机或树莓派相机(无红外线版)使用\n视频输出： HDMI 可接入大多数通用 HDMI 接口的显示设备\n音源输入：I²S\n音源输出：HDMI 电子输出或I²S\n板载存储：MicroSD 卡插槽\n板载网卡：10/100Mbps 以太网接口（RJ45接口），支持802.11n无线网络及蓝牙4.1\n通用外设：14 个 GPIO\n电源输入：5V 电压 (通过 MicroUSB 或经 GPIO 输入)\n\n### 烧录镜像\n\n<!--more-->\n\n\n### 系统优化\n\n###### 替换源为国内源\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n\nvi /etc/apt/sources.list\n```\n\n```\n# 清华\ndeb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n# 东软信息学院\ndeb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n# 中国科学技术大学\ndeb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\ndeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi\n\n```\n\n然后更新软件\n```\napt-get update\napt-get upgrade\n```\n\n\n### 参考资料\n官网系统下载地址：http://www.raspberrypi.org/downloads/\nCentos7 for Raspberry Pi：\nhttp://mirror.centos.org/altarch/7/isos/armhfp/\n\n让你的docker(只能跑基于ARM的镜像)跑在树莓派上的系统\nhttp://blog.hypriot.com/downloads/\n\nHypriot系统的安装教程\nhttp://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/\n\nHypriot的docker hub\nhttps://hub.docker.com/u/hypriot/\n","slug":"raspberry-系统安装","published":1,"updated":"2017-08-03T10:21:24.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dp000nnou9r71xo0gd","content":"<p>在淘宝买的最新<code>raspberry Pi 3</code></p>\n<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><p>CPU 和 GPU： Broadcom BCM2835<br>内存：1024 MB(LPDDR2)<br>视频输入： 15-针头 MIPI 相机 (CSI) 界面，可被树莓派相机或树莓派相机(无红外线版)使用<br>视频输出： HDMI 可接入大多数通用 HDMI 接口的显示设备<br>音源输入：I²S<br>音源输出：HDMI 电子输出或I²S<br>板载存储：MicroSD 卡插槽<br>板载网卡：10/100Mbps 以太网接口（RJ45接口），支持802.11n无线网络及蓝牙4.1<br>通用外设：14 个 GPIO<br>电源输入：5V 电压 (通过 MicroUSB 或经 GPIO 输入)</p>\n<h3 id=\"烧录镜像\"><a href=\"#烧录镜像\" class=\"headerlink\" title=\"烧录镜像\"></a>烧录镜像</h3><a id=\"more\"></a>\n<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><h6 id=\"替换源为国内源\"><a href=\"#替换源为国内源\" class=\"headerlink\" title=\"替换源为国内源\"></a>替换源为国内源</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</div><div class=\"line\"></div><div class=\"line\">vi /etc/apt/sources.list</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 清华</div><div class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\"></div><div class=\"line\"># 东软信息学院</div><div class=\"line\">deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\"></div><div class=\"line\"># 中国科学技术大学</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div></pre></td></tr></table></figure>\n<p>然后更新软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get update</div><div class=\"line\">apt-get upgrade</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>官网系统下载地址：<a href=\"http://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"external\">http://www.raspberrypi.org/downloads/</a><br>Centos7 for Raspberry Pi：<br><a href=\"http://mirror.centos.org/altarch/7/isos/armhfp/\" target=\"_blank\" rel=\"external\">http://mirror.centos.org/altarch/7/isos/armhfp/</a></p>\n<p>让你的docker(只能跑基于ARM的镜像)跑在树莓派上的系统<br><a href=\"http://blog.hypriot.com/downloads/\" target=\"_blank\" rel=\"external\">http://blog.hypriot.com/downloads/</a></p>\n<p>Hypriot系统的安装教程<br><a href=\"http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/\" target=\"_blank\" rel=\"external\">http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</a></p>\n<p>Hypriot的docker hub<br><a href=\"https://hub.docker.com/u/hypriot/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/u/hypriot/</a></p>\n","site":{"data":{}},"excerpt":"<p>在淘宝买的最新<code>raspberry Pi 3</code></p>\n<h3 id=\"硬件配置\"><a href=\"#硬件配置\" class=\"headerlink\" title=\"硬件配置\"></a>硬件配置</h3><p>CPU 和 GPU： Broadcom BCM2835<br>内存：1024 MB(LPDDR2)<br>视频输入： 15-针头 MIPI 相机 (CSI) 界面，可被树莓派相机或树莓派相机(无红外线版)使用<br>视频输出： HDMI 可接入大多数通用 HDMI 接口的显示设备<br>音源输入：I²S<br>音源输出：HDMI 电子输出或I²S<br>板载存储：MicroSD 卡插槽<br>板载网卡：10/100Mbps 以太网接口（RJ45接口），支持802.11n无线网络及蓝牙4.1<br>通用外设：14 个 GPIO<br>电源输入：5V 电压 (通过 MicroUSB 或经 GPIO 输入)</p>\n<h3 id=\"烧录镜像\"><a href=\"#烧录镜像\" class=\"headerlink\" title=\"烧录镜像\"></a>烧录镜像</h3>","more":"<h3 id=\"系统优化\"><a href=\"#系统优化\" class=\"headerlink\" title=\"系统优化\"></a>系统优化</h3><h6 id=\"替换源为国内源\"><a href=\"#替换源为国内源\" class=\"headerlink\" title=\"替换源为国内源\"></a>替换源为国内源</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</div><div class=\"line\"></div><div class=\"line\">vi /etc/apt/sources.list</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 清华</div><div class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\"></div><div class=\"line\"># 东软信息学院</div><div class=\"line\">deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\"></div><div class=\"line\"># 中国科学技术大学</div><div class=\"line\">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div><div class=\"line\">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi</div></pre></td></tr></table></figure>\n<p>然后更新软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get update</div><div class=\"line\">apt-get upgrade</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>官网系统下载地址：<a href=\"http://www.raspberrypi.org/downloads/\" target=\"_blank\" rel=\"external\">http://www.raspberrypi.org/downloads/</a><br>Centos7 for Raspberry Pi：<br><a href=\"http://mirror.centos.org/altarch/7/isos/armhfp/\" target=\"_blank\" rel=\"external\">http://mirror.centos.org/altarch/7/isos/armhfp/</a></p>\n<p>让你的docker(只能跑基于ARM的镜像)跑在树莓派上的系统<br><a href=\"http://blog.hypriot.com/downloads/\" target=\"_blank\" rel=\"external\">http://blog.hypriot.com/downloads/</a></p>\n<p>Hypriot系统的安装教程<br><a href=\"http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/\" target=\"_blank\" rel=\"external\">http://blog.hypriot.com/getting-started-with-docker-and-mac-on-the-raspberry-pi/</a></p>\n<p>Hypriot的docker hub<br><a href=\"https://hub.docker.com/u/hypriot/\" target=\"_blank\" rel=\"external\">https://hub.docker.com/u/hypriot/</a></p>"},{"title":"启动第三方应用接口列表","date":"2015-12-30T08:33:25.000Z","_content":"\n app | android | iso\n----|----|----\nQQ空间 - 全部动态 | mqzonev2://arouse/activefeed?source=webview&version=1 | -\nQQ空间 - 我的动态 | mqzone://arouse/passivityfeed?source=webview&version=1 | -\n微博|sinaweibo://splash 　 sinaweibo://home 　 sinaweibo://browser?url= | -\n壹钱包|eqianbao://qr/qr.html|-\n慕课网 | mukewang://?list | mukewang://?list\n","source":"_posts/setup-app-third.md","raw":"---\ntitle: \"启动第三方应用接口列表\"\ndate: 2015-12-30 16:33:25\ntags: [native]\n---\n\n app | android | iso\n----|----|----\nQQ空间 - 全部动态 | mqzonev2://arouse/activefeed?source=webview&version=1 | -\nQQ空间 - 我的动态 | mqzone://arouse/passivityfeed?source=webview&version=1 | -\n微博|sinaweibo://splash 　 sinaweibo://home 　 sinaweibo://browser?url= | -\n壹钱包|eqianbao://qr/qr.html|-\n慕课网 | mukewang://?list | mukewang://?list\n","slug":"setup-app-third","published":1,"updated":"2017-08-03T10:21:24.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dr000qnou93bzlzyri","content":"<table>\n<thead>\n<tr>\n<th>app</th>\n<th>android</th>\n<th>iso</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QQ空间 - 全部动态</td>\n<td>mqzonev2://arouse/activefeed?source=webview&amp;version=1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>QQ空间 - 我的动态</td>\n<td>mqzone://arouse/passivityfeed?source=webview&amp;version=1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>微博</td>\n<td>sinaweibo://splash 　 sinaweibo://home 　 sinaweibo://browser?url=</td>\n<td>-</td>\n</tr>\n<tr>\n<td>壹钱包</td>\n<td>eqianbao://qr/qr.html</td>\n<td>-</td>\n</tr>\n<tr>\n<td>慕课网</td>\n<td>mukewang://?list</td>\n<td>mukewang://?list</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>app</th>\n<th>android</th>\n<th>iso</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QQ空间 - 全部动态</td>\n<td>mqzonev2://arouse/activefeed?source=webview&amp;version=1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>QQ空间 - 我的动态</td>\n<td>mqzone://arouse/passivityfeed?source=webview&amp;version=1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>微博</td>\n<td>sinaweibo://splash 　 sinaweibo://home 　 sinaweibo://browser?url=</td>\n<td>-</td>\n</tr>\n<tr>\n<td>壹钱包</td>\n<td>eqianbao://qr/qr.html</td>\n<td>-</td>\n</tr>\n<tr>\n<td>慕课网</td>\n<td>mukewang://?list</td>\n<td>mukewang://?list</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"raspberry Pi 3上安装openwrt系统","date":"2017-01-09T06:33:10.000Z","_content":"\n### 工具\n\nwin32DiskImager\n","source":"_posts/shadowsocks服务安装.md","raw":"---\ntitle: raspberry Pi 3上安装openwrt系统\ndate: 2017-01-09 14:33:10\ntags: [raspberry,openwrt]\n---\n\n### 工具\n\nwin32DiskImager\n","slug":"shadowsocks服务安装","published":1,"updated":"2017-08-03T10:21:24.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96ds000rnou9rsb1pswd","content":"<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>win32DiskImager</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>win32DiskImager</p>\n"},{"title":"2016汇总","date":"2017-01-01T08:19:29.000Z","_content":"\n\n\nWeb应用多账号系统设计及微信扫码登录实现\n\nhttp://www.cnblogs.com/beer/p/5538403.html","source":"_posts/test.md","raw":"---\ntitle: 2016汇总\ndate: 2017-01-01 16:19:29\ntags:\n---\n\n\n\nWeb应用多账号系统设计及微信扫码登录实现\n\nhttp://www.cnblogs.com/beer/p/5538403.html","slug":"test","published":1,"updated":"2017-08-03T10:21:24.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dt000unou98y1201wl","content":"<p>Web应用多账号系统设计及微信扫码登录实现</p>\n<p><a href=\"http://www.cnblogs.com/beer/p/5538403.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/5538403.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Web应用多账号系统设计及微信扫码登录实现</p>\n<p><a href=\"http://www.cnblogs.com/beer/p/5538403.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/5538403.html</a></p>\n"},{"title":"web桌面虚拟化","date":"2016-10-20T04:54:12.000Z","_content":"\n#### 一、环境说明\n\n操作系统：centos 6.5\n软件：guacamole\n\n\n#### 二、安装编译和运行环境\n\n<!--more-->\n\n1. 关闭防火墙\n\n```\nchkconfig iptables off\nservice iptables stop\n```\n2. 修改SELinux运行模式\n3. 安装GCC套件\n```\nyum groupinstall -y \"Development Tools\";\n```\n4. 下载JDK\n5. 下载Tomcat\n\n### 三、安装和配置Guacamole\n\n1. 导入第三方软件源\n```\nrpm -Uvh http://mirrors.ustc.edu.cn/epel/6/x86_64/epel-release-6-8.noarch.rpm\n```\n\n```\nrpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm\n```\n\n修改配置文件：\n```\nvi /etc/yum.repos.d/epel.repo\n```\n\n```\n# baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=$basearch\n```\n改为：\n```\nbaseurl=http://download.fedoraproject.org/pub/epel/6/$basearch\n#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=$basearch\n```\n2. 安装Guacamole依赖软件包\n```\n# 安装Cairo\nyum install -y cairo cairo-devel\n# 安装libpng\nyum install -y libpng libpng-devel\n# 安装FreeRDP\nyum install -y freerdp freerdp-devel\n# 安装Pango\nyum install -y pango pango-devel\n# 安装libssh2\nyum install -y libssh2 libssh2-devel\n# 安装libtelnet\nyum install -y libtelnet libtelnet-devel\n# 安装libVNCServer\nyum install -y libvncserver libvncserver-devel\n# 安装libpulse\nyum install -y pulseaudio pulseaudio-libs pulseaudio-libs-devel\n# 安装libssl\nyum install -y openssl openssl-devel\n# 安装libvorbis\nyum install -y libvorbis libvorbis-devel\n# 安装OSSP UUID\nyum install -y uuid uuid-devel\n```\n3. 下载Guacamole源码包\n```\ncd /root/Downloads\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.9.7.tar.gz\ngit clone https://github.com/cmujedi/guacamole.git\n```\n4. 编译Guacamole\n```\ntar -xvzf guacamole-server-0.9.7.tar.gz\ncd guacamole-server-0.9.7/\n./configure --with-init-dir=/etc/init.d\nmake\nmake install\nldconfig\n```\n5. 配置Guacamole服务\n```\nchown root.root /etc/init.d/guacd\nchmod 755 /etc/init.d/guacd\nchkconfig --add guacd\nchkconfig guacd on\n```\n以下四条命令可用于控制guacd服务：\n\n```\nservice guacd start # 启动guacd服务\nservice guacd stop # 停止guacd服务\nservice guacd restart # 重启guacd服务\nservice guacd status # 查看guacd服务状态\n```\n\n6. 下载Guacamole客户端\n```\ncd /root/Downloads\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/binary/guacamole-0.9.7.war\nmkdir /var/lib/guacamole\nmv /root/Downloads/guacamole-0.9.7.war /var/lib/guacamole/guacamole.war\n```\n7. 新建Guacamole配置文件\n```\nmkdir /etc/guacamole\nmkdir /root/.guacamole\ncp /root/Downloads/guacamole/doc/example/guacamole.properties /etc/guacamole/guacamole.properties\ncp /root/Downloads/guacamole/doc/example/user-mapping.xml /etc/guacamole/user-mapping.xml\nln -s /etc/guacamole/guacamole.properties /root/.guacamole/\n```\n8. 配置guacamole.properties文件\n```\nvi /etc/guacamole/guacamole.properties\n```\n将上述文件的basic-user-mapping属性设置为：\n\n```\n/etc/guacamole/user-mapping.xml\n```\n9. 配置user-mapping.xml文件\n```\nvi /etc/guacamole/user-mapping.xml\n```\n在上述XML文件的user-mapping节点内添加如下内容：\n\n```\n<authorize username=\"root\" password=\"password\">\n <protocol>vnc</protocol>\n <param name=\"hostname\">localhost</param>\n <param name=\"port\">5901</param>\n <param name=\"password\">password</param>\n <param name=\"color-depth\">32</param>\n</authorize>\n```\n其中的密码值要和之前安装VNC Server时为相应用户设置的密码相同。\n10. 部署Guacamole客户端\n```\nln -s /var/lib/guacamole/guacamole.war /usr/local/Tomcat/webapps\n```\n11. 重启Tomcat\n```\nservice tomcat restart\n```\n12. 启动guacd\n```\nservice guacd start\n```\n\n### 四、验证Guacamole安装\n在WEB浏览器中输入以下URL：\n\n```\nhttp://192.168.159.133:8080/guacamole/\n```\n然后，在登录页面中输入之前配置好的用户名/密码（root/password）即可通过WEB页面连接至VNC。\n\n\n#### 五、问题\n查看guacamole日志\n\n```\ncat /var/log/syslog\n```\n在使用过程中我遇到了使用rdp协议时无法播放声音问题，通过到社区http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，\n查看系统日志会发现问题提示：\nFailed to load guacsnd plugin. Audio will not work.\nFailed to load guacdr plugin. Drive redirection and printing will not work.\n解决办法如下：\n\n```\nln -s /usr/local/lib/freerdp/guacsnd.so /usr/lib/freerdp/\nln -s /usr/local/lib/freerdp/guacdr.so /usr/lib/freerdp/\n```\n\n把这两个插件软连接到rdp插件加载的文件夹下。\n\n\n\n参考链接\n- http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html\n- https://github.com/cmujedi/guacamole\n- http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/\n- http://guoxiaoming.com/f2etest-install/\n- http://blog.csdn.net/inuyasha1121/article/details/50262721\n","source":"_posts/web桌面虚拟化.md","raw":"---\ntitle: web桌面虚拟化\ndate: 2016-10-20 12:54:12\ncategories: guacamole\ntags: [nodejs,react,nw]\n---\n\n#### 一、环境说明\n\n操作系统：centos 6.5\n软件：guacamole\n\n\n#### 二、安装编译和运行环境\n\n<!--more-->\n\n1. 关闭防火墙\n\n```\nchkconfig iptables off\nservice iptables stop\n```\n2. 修改SELinux运行模式\n3. 安装GCC套件\n```\nyum groupinstall -y \"Development Tools\";\n```\n4. 下载JDK\n5. 下载Tomcat\n\n### 三、安装和配置Guacamole\n\n1. 导入第三方软件源\n```\nrpm -Uvh http://mirrors.ustc.edu.cn/epel/6/x86_64/epel-release-6-8.noarch.rpm\n```\n\n```\nrpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm\n```\n\n修改配置文件：\n```\nvi /etc/yum.repos.d/epel.repo\n```\n\n```\n# baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch\nmirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=$basearch\n```\n改为：\n```\nbaseurl=http://download.fedoraproject.org/pub/epel/6/$basearch\n#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=$basearch\n```\n2. 安装Guacamole依赖软件包\n```\n# 安装Cairo\nyum install -y cairo cairo-devel\n# 安装libpng\nyum install -y libpng libpng-devel\n# 安装FreeRDP\nyum install -y freerdp freerdp-devel\n# 安装Pango\nyum install -y pango pango-devel\n# 安装libssh2\nyum install -y libssh2 libssh2-devel\n# 安装libtelnet\nyum install -y libtelnet libtelnet-devel\n# 安装libVNCServer\nyum install -y libvncserver libvncserver-devel\n# 安装libpulse\nyum install -y pulseaudio pulseaudio-libs pulseaudio-libs-devel\n# 安装libssl\nyum install -y openssl openssl-devel\n# 安装libvorbis\nyum install -y libvorbis libvorbis-devel\n# 安装OSSP UUID\nyum install -y uuid uuid-devel\n```\n3. 下载Guacamole源码包\n```\ncd /root/Downloads\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.9.7.tar.gz\ngit clone https://github.com/cmujedi/guacamole.git\n```\n4. 编译Guacamole\n```\ntar -xvzf guacamole-server-0.9.7.tar.gz\ncd guacamole-server-0.9.7/\n./configure --with-init-dir=/etc/init.d\nmake\nmake install\nldconfig\n```\n5. 配置Guacamole服务\n```\nchown root.root /etc/init.d/guacd\nchmod 755 /etc/init.d/guacd\nchkconfig --add guacd\nchkconfig guacd on\n```\n以下四条命令可用于控制guacd服务：\n\n```\nservice guacd start # 启动guacd服务\nservice guacd stop # 停止guacd服务\nservice guacd restart # 重启guacd服务\nservice guacd status # 查看guacd服务状态\n```\n\n6. 下载Guacamole客户端\n```\ncd /root/Downloads\nwget http://jaist.dl.sourceforge.net/project/guacamole/current/binary/guacamole-0.9.7.war\nmkdir /var/lib/guacamole\nmv /root/Downloads/guacamole-0.9.7.war /var/lib/guacamole/guacamole.war\n```\n7. 新建Guacamole配置文件\n```\nmkdir /etc/guacamole\nmkdir /root/.guacamole\ncp /root/Downloads/guacamole/doc/example/guacamole.properties /etc/guacamole/guacamole.properties\ncp /root/Downloads/guacamole/doc/example/user-mapping.xml /etc/guacamole/user-mapping.xml\nln -s /etc/guacamole/guacamole.properties /root/.guacamole/\n```\n8. 配置guacamole.properties文件\n```\nvi /etc/guacamole/guacamole.properties\n```\n将上述文件的basic-user-mapping属性设置为：\n\n```\n/etc/guacamole/user-mapping.xml\n```\n9. 配置user-mapping.xml文件\n```\nvi /etc/guacamole/user-mapping.xml\n```\n在上述XML文件的user-mapping节点内添加如下内容：\n\n```\n<authorize username=\"root\" password=\"password\">\n <protocol>vnc</protocol>\n <param name=\"hostname\">localhost</param>\n <param name=\"port\">5901</param>\n <param name=\"password\">password</param>\n <param name=\"color-depth\">32</param>\n</authorize>\n```\n其中的密码值要和之前安装VNC Server时为相应用户设置的密码相同。\n10. 部署Guacamole客户端\n```\nln -s /var/lib/guacamole/guacamole.war /usr/local/Tomcat/webapps\n```\n11. 重启Tomcat\n```\nservice tomcat restart\n```\n12. 启动guacd\n```\nservice guacd start\n```\n\n### 四、验证Guacamole安装\n在WEB浏览器中输入以下URL：\n\n```\nhttp://192.168.159.133:8080/guacamole/\n```\n然后，在登录页面中输入之前配置好的用户名/密码（root/password）即可通过WEB页面连接至VNC。\n\n\n#### 五、问题\n查看guacamole日志\n\n```\ncat /var/log/syslog\n```\n在使用过程中我遇到了使用rdp协议时无法播放声音问题，通过到社区http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，\n查看系统日志会发现问题提示：\nFailed to load guacsnd plugin. Audio will not work.\nFailed to load guacdr plugin. Drive redirection and printing will not work.\n解决办法如下：\n\n```\nln -s /usr/local/lib/freerdp/guacsnd.so /usr/lib/freerdp/\nln -s /usr/local/lib/freerdp/guacdr.so /usr/lib/freerdp/\n```\n\n把这两个插件软连接到rdp插件加载的文件夹下。\n\n\n\n参考链接\n- http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html\n- https://github.com/cmujedi/guacamole\n- http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/\n- http://guoxiaoming.com/f2etest-install/\n- http://blog.csdn.net/inuyasha1121/article/details/50262721\n","slug":"web桌面虚拟化","published":1,"updated":"2017-08-03T10:21:24.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dv000wnou9lb9ylte1","content":"<h4 id=\"一、环境说明\"><a href=\"#一、环境说明\" class=\"headerlink\" title=\"一、环境说明\"></a>一、环境说明</h4><p>操作系统：centos 6.5<br>软件：guacamole</p>\n<h4 id=\"二、安装编译和运行环境\"><a href=\"#二、安装编译和运行环境\" class=\"headerlink\" title=\"二、安装编译和运行环境\"></a>二、安装编译和运行环境</h4><a id=\"more\"></a>\n<ol>\n<li>关闭防火墙</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig iptables off</div><div class=\"line\">service iptables stop</div></pre></td></tr></table></figure>\n<ol>\n<li>修改SELinux运行模式</li>\n<li><p>安装GCC套件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum groupinstall -y &quot;Development Tools&quot;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载JDK</p>\n</li>\n<li>下载Tomcat</li>\n</ol>\n<h3 id=\"三、安装和配置Guacamole\"><a href=\"#三、安装和配置Guacamole\" class=\"headerlink\" title=\"三、安装和配置Guacamole\"></a>三、安装和配置Guacamole</h3><ol>\n<li>导入第三方软件源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -Uvh http://mirrors.ustc.edu.cn/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm</div></pre></td></tr></table></figure>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/yum.repos.d/epel.repo</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</div><div class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div></pre></td></tr></table></figure>\n<p>改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</div><div class=\"line\">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>安装Guacamole依赖软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 安装Cairo</div><div class=\"line\">yum install -y cairo cairo-devel</div><div class=\"line\"># 安装libpng</div><div class=\"line\">yum install -y libpng libpng-devel</div><div class=\"line\"># 安装FreeRDP</div><div class=\"line\">yum install -y freerdp freerdp-devel</div><div class=\"line\"># 安装Pango</div><div class=\"line\">yum install -y pango pango-devel</div><div class=\"line\"># 安装libssh2</div><div class=\"line\">yum install -y libssh2 libssh2-devel</div><div class=\"line\"># 安装libtelnet</div><div class=\"line\">yum install -y libtelnet libtelnet-devel</div><div class=\"line\"># 安装libVNCServer</div><div class=\"line\">yum install -y libvncserver libvncserver-devel</div><div class=\"line\"># 安装libpulse</div><div class=\"line\">yum install -y pulseaudio pulseaudio-libs pulseaudio-libs-devel</div><div class=\"line\"># 安装libssl</div><div class=\"line\">yum install -y openssl openssl-devel</div><div class=\"line\"># 安装libvorbis</div><div class=\"line\">yum install -y libvorbis libvorbis-devel</div><div class=\"line\"># 安装OSSP UUID</div><div class=\"line\">yum install -y uuid uuid-devel</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载Guacamole源码包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/Downloads</div><div class=\"line\">wget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.9.7.tar.gz</div><div class=\"line\">git clone https://github.com/cmujedi/guacamole.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译Guacamole</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf guacamole-server-0.9.7.tar.gz</div><div class=\"line\">cd guacamole-server-0.9.7/</div><div class=\"line\">./configure --with-init-dir=/etc/init.d</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">ldconfig</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置Guacamole服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown root.root /etc/init.d/guacd</div><div class=\"line\">chmod 755 /etc/init.d/guacd</div><div class=\"line\">chkconfig --add guacd</div><div class=\"line\">chkconfig guacd on</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>以下四条命令可用于控制guacd服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">service guacd start # 启动guacd服务</div><div class=\"line\">service guacd stop # 停止guacd服务</div><div class=\"line\">service guacd restart # 重启guacd服务</div><div class=\"line\">service guacd status # 查看guacd服务状态</div></pre></td></tr></table></figure>\n<ol>\n<li><p>下载Guacamole客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/Downloads</div><div class=\"line\">wget http://jaist.dl.sourceforge.net/project/guacamole/current/binary/guacamole-0.9.7.war</div><div class=\"line\">mkdir /var/lib/guacamole</div><div class=\"line\">mv /root/Downloads/guacamole-0.9.7.war /var/lib/guacamole/guacamole.war</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建Guacamole配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /etc/guacamole</div><div class=\"line\">mkdir /root/.guacamole</div><div class=\"line\">cp /root/Downloads/guacamole/doc/example/guacamole.properties /etc/guacamole/guacamole.properties</div><div class=\"line\">cp /root/Downloads/guacamole/doc/example/user-mapping.xml /etc/guacamole/user-mapping.xml</div><div class=\"line\">ln -s /etc/guacamole/guacamole.properties /root/.guacamole/</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置guacamole.properties文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/guacamole/guacamole.properties</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将上述文件的basic-user-mapping属性设置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/guacamole/user-mapping.xml</div></pre></td></tr></table></figure>\n<ol>\n<li>配置user-mapping.xml文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/guacamole/user-mapping.xml</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在上述XML文件的user-mapping节点内添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;authorize username=&quot;root&quot; password=&quot;password&quot;&gt;</div><div class=\"line\"> &lt;protocol&gt;vnc&lt;/protocol&gt;</div><div class=\"line\"> &lt;param name=&quot;hostname&quot;&gt;localhost&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;port&quot;&gt;5901&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;password&quot;&gt;password&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;color-depth&quot;&gt;32&lt;/param&gt;</div><div class=\"line\">&lt;/authorize&gt;</div></pre></td></tr></table></figure>\n<p>其中的密码值要和之前安装VNC Server时为相应用户设置的密码相同。</p>\n<ol>\n<li><p>部署Guacamole客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /var/lib/guacamole/guacamole.war /usr/local/Tomcat/webapps</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启Tomcat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service tomcat restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动guacd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service guacd start</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"四、验证Guacamole安装\"><a href=\"#四、验证Guacamole安装\" class=\"headerlink\" title=\"四、验证Guacamole安装\"></a>四、验证Guacamole安装</h3><p>在WEB浏览器中输入以下URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.159.133:8080/guacamole/</div></pre></td></tr></table></figure>\n<p>然后，在登录页面中输入之前配置好的用户名/密码（root/password）即可通过WEB页面连接至VNC。</p>\n<h4 id=\"五、问题\"><a href=\"#五、问题\" class=\"headerlink\" title=\"五、问题\"></a>五、问题</h4><p>查看guacamole日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/log/syslog</div></pre></td></tr></table></figure>\n<p>在使用过程中我遇到了使用rdp协议时无法播放声音问题，通过到社区<a href=\"http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，</a><br>查看系统日志会发现问题提示：<br>Failed to load guacsnd plugin. Audio will not work.<br>Failed to load guacdr plugin. Drive redirection and printing will not work.<br>解决办法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /usr/local/lib/freerdp/guacsnd.so /usr/lib/freerdp/</div><div class=\"line\">ln -s /usr/local/lib/freerdp/guacdr.so /usr/lib/freerdp/</div></pre></td></tr></table></figure>\n<p>把这两个插件软连接到rdp插件加载的文件夹下。</p>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html\" target=\"_blank\" rel=\"external\">http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html</a></li>\n<li><a href=\"https://github.com/cmujedi/guacamole\" target=\"_blank\" rel=\"external\">https://github.com/cmujedi/guacamole</a></li>\n<li><a href=\"http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/\" target=\"_blank\" rel=\"external\">http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/</a></li>\n<li><a href=\"http://guoxiaoming.com/f2etest-install/\" target=\"_blank\" rel=\"external\">http://guoxiaoming.com/f2etest-install/</a></li>\n<li><a href=\"http://blog.csdn.net/inuyasha1121/article/details/50262721\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/inuyasha1121/article/details/50262721</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"一、环境说明\"><a href=\"#一、环境说明\" class=\"headerlink\" title=\"一、环境说明\"></a>一、环境说明</h4><p>操作系统：centos 6.5<br>软件：guacamole</p>\n<h4 id=\"二、安装编译和运行环境\"><a href=\"#二、安装编译和运行环境\" class=\"headerlink\" title=\"二、安装编译和运行环境\"></a>二、安装编译和运行环境</h4>","more":"<ol>\n<li>关闭防火墙</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig iptables off</div><div class=\"line\">service iptables stop</div></pre></td></tr></table></figure>\n<ol>\n<li>修改SELinux运行模式</li>\n<li><p>安装GCC套件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum groupinstall -y &quot;Development Tools&quot;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载JDK</p>\n</li>\n<li>下载Tomcat</li>\n</ol>\n<h3 id=\"三、安装和配置Guacamole\"><a href=\"#三、安装和配置Guacamole\" class=\"headerlink\" title=\"三、安装和配置Guacamole\"></a>三、安装和配置Guacamole</h3><ol>\n<li>导入第三方软件源<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -Uvh http://mirrors.ustc.edu.cn/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm</div></pre></td></tr></table></figure>\n<p>修改配置文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/yum.repos.d/epel.repo</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</div><div class=\"line\">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div></pre></td></tr></table></figure>\n<p>改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">baseurl=http://download.fedoraproject.org/pub/epel/6/$basearch</div><div class=\"line\">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>安装Guacamole依赖软件包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 安装Cairo</div><div class=\"line\">yum install -y cairo cairo-devel</div><div class=\"line\"># 安装libpng</div><div class=\"line\">yum install -y libpng libpng-devel</div><div class=\"line\"># 安装FreeRDP</div><div class=\"line\">yum install -y freerdp freerdp-devel</div><div class=\"line\"># 安装Pango</div><div class=\"line\">yum install -y pango pango-devel</div><div class=\"line\"># 安装libssh2</div><div class=\"line\">yum install -y libssh2 libssh2-devel</div><div class=\"line\"># 安装libtelnet</div><div class=\"line\">yum install -y libtelnet libtelnet-devel</div><div class=\"line\"># 安装libVNCServer</div><div class=\"line\">yum install -y libvncserver libvncserver-devel</div><div class=\"line\"># 安装libpulse</div><div class=\"line\">yum install -y pulseaudio pulseaudio-libs pulseaudio-libs-devel</div><div class=\"line\"># 安装libssl</div><div class=\"line\">yum install -y openssl openssl-devel</div><div class=\"line\"># 安装libvorbis</div><div class=\"line\">yum install -y libvorbis libvorbis-devel</div><div class=\"line\"># 安装OSSP UUID</div><div class=\"line\">yum install -y uuid uuid-devel</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载Guacamole源码包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/Downloads</div><div class=\"line\">wget http://jaist.dl.sourceforge.net/project/guacamole/current/source/guacamole-server-0.9.7.tar.gz</div><div class=\"line\">git clone https://github.com/cmujedi/guacamole.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译Guacamole</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf guacamole-server-0.9.7.tar.gz</div><div class=\"line\">cd guacamole-server-0.9.7/</div><div class=\"line\">./configure --with-init-dir=/etc/init.d</div><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">ldconfig</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置Guacamole服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown root.root /etc/init.d/guacd</div><div class=\"line\">chmod 755 /etc/init.d/guacd</div><div class=\"line\">chkconfig --add guacd</div><div class=\"line\">chkconfig guacd on</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>以下四条命令可用于控制guacd服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">service guacd start # 启动guacd服务</div><div class=\"line\">service guacd stop # 停止guacd服务</div><div class=\"line\">service guacd restart # 重启guacd服务</div><div class=\"line\">service guacd status # 查看guacd服务状态</div></pre></td></tr></table></figure>\n<ol>\n<li><p>下载Guacamole客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/Downloads</div><div class=\"line\">wget http://jaist.dl.sourceforge.net/project/guacamole/current/binary/guacamole-0.9.7.war</div><div class=\"line\">mkdir /var/lib/guacamole</div><div class=\"line\">mv /root/Downloads/guacamole-0.9.7.war /var/lib/guacamole/guacamole.war</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建Guacamole配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /etc/guacamole</div><div class=\"line\">mkdir /root/.guacamole</div><div class=\"line\">cp /root/Downloads/guacamole/doc/example/guacamole.properties /etc/guacamole/guacamole.properties</div><div class=\"line\">cp /root/Downloads/guacamole/doc/example/user-mapping.xml /etc/guacamole/user-mapping.xml</div><div class=\"line\">ln -s /etc/guacamole/guacamole.properties /root/.guacamole/</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置guacamole.properties文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/guacamole/guacamole.properties</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将上述文件的basic-user-mapping属性设置为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/guacamole/user-mapping.xml</div></pre></td></tr></table></figure>\n<ol>\n<li>配置user-mapping.xml文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/guacamole/user-mapping.xml</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在上述XML文件的user-mapping节点内添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;authorize username=&quot;root&quot; password=&quot;password&quot;&gt;</div><div class=\"line\"> &lt;protocol&gt;vnc&lt;/protocol&gt;</div><div class=\"line\"> &lt;param name=&quot;hostname&quot;&gt;localhost&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;port&quot;&gt;5901&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;password&quot;&gt;password&lt;/param&gt;</div><div class=\"line\"> &lt;param name=&quot;color-depth&quot;&gt;32&lt;/param&gt;</div><div class=\"line\">&lt;/authorize&gt;</div></pre></td></tr></table></figure>\n<p>其中的密码值要和之前安装VNC Server时为相应用户设置的密码相同。</p>\n<ol>\n<li><p>部署Guacamole客户端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /var/lib/guacamole/guacamole.war /usr/local/Tomcat/webapps</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启Tomcat</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service tomcat restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动guacd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service guacd start</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"四、验证Guacamole安装\"><a href=\"#四、验证Guacamole安装\" class=\"headerlink\" title=\"四、验证Guacamole安装\"></a>四、验证Guacamole安装</h3><p>在WEB浏览器中输入以下URL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.159.133:8080/guacamole/</div></pre></td></tr></table></figure>\n<p>然后，在登录页面中输入之前配置好的用户名/密码（root/password）即可通过WEB页面连接至VNC。</p>\n<h4 id=\"五、问题\"><a href=\"#五、问题\" class=\"headerlink\" title=\"五、问题\"></a>五、问题</h4><p>查看guacamole日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/log/syslog</div></pre></td></tr></table></figure>\n<p>在使用过程中我遇到了使用rdp协议时无法播放声音问题，通过到社区<a href=\"http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，\" target=\"_blank\" rel=\"external\">http://sourceforge.net/projects/guacamole/forums查找提问的帖子解决了问题，</a><br>查看系统日志会发现问题提示：<br>Failed to load guacsnd plugin. Audio will not work.<br>Failed to load guacdr plugin. Drive redirection and printing will not work.<br>解决办法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /usr/local/lib/freerdp/guacsnd.so /usr/lib/freerdp/</div><div class=\"line\">ln -s /usr/local/lib/freerdp/guacdr.so /usr/lib/freerdp/</div></pre></td></tr></table></figure>\n<p>把这两个插件软连接到rdp插件加载的文件夹下。</p>\n<p>参考链接</p>\n<ul>\n<li><a href=\"http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html\" target=\"_blank\" rel=\"external\">http://guacamole.incubator.apache.org/doc/gug/installing-guacamole.html</a></li>\n<li><a href=\"https://github.com/cmujedi/guacamole\" target=\"_blank\" rel=\"external\">https://github.com/cmujedi/guacamole</a></li>\n<li><a href=\"http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/\" target=\"_blank\" rel=\"external\">http://ghoulich.xninja.org/2016/01/06/install-guacamole-in-centos/</a></li>\n<li><a href=\"http://guoxiaoming.com/f2etest-install/\" target=\"_blank\" rel=\"external\">http://guoxiaoming.com/f2etest-install/</a></li>\n<li><a href=\"http://blog.csdn.net/inuyasha1121/article/details/50262721\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/inuyasha1121/article/details/50262721</a></li>\n</ul>"},{"title":"深度剖析：如何实现一个 Virtual DOM 算法","date":"2015-12-12T08:33:25.000Z","_content":"https://github.com/livoras/blog/issues/13\n","source":"_posts/virtual-dom.md","raw":"---\ntitle: \"深度剖析：如何实现一个 Virtual DOM 算法\"\ndate: 2015-12-12 16:33:25\ntags: react\n---\nhttps://github.com/livoras/blog/issues/13\n","slug":"virtual-dom","published":1,"updated":"2017-08-03T10:21:24.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dw000ynou9fjxki7pn","content":"<p><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"external\">https://github.com/livoras/blog/issues/13</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/livoras/blog/issues/13\" target=\"_blank\" rel=\"external\">https://github.com/livoras/blog/issues/13</a></p>\n"},{"title":"wifidog认证服务开发 - nodejs","date":"2017-01-13T13:03:35.000Z","_content":"\n### 概述\nwifidog是搭建无线热点认证系统的解决方案之一，他比nocat更适合互联网营销思路。目前支持openwrt系统，他实现了路由器和认证服 务器的数据交互，在路由器方是用C语言代码，通过wifidog程序和linux iptables防火墙实现接入用户的认证跳转和控制，在认证服务器方 是通过php实现用户的认证流程和管理。\n`优点：`有开源代码，可以很方便的搭建认证系统。\n`缺点：`标准协议是通过iptables方式实现，性能比较差，整体拉低了路由器的数据包处理速度，协议比较繁琐，对认证服务器的造成性能损耗比较大，在安全方面都是明文传输，有一定的安全隐患。\n\n### 原理\n\n### 网关心跳协议\nwiﬁdog将ping协议作为心跳机制向认证服务器发送当前状态信息。实现认证服务器 和每个节点的状态双向健康监测的机制。\n\n请求信息：\n```\n http://192.168.1.165/ping/?\n    gw_id=%s\n    sys_load=%lu\n    sys_memfree=%u\n    sys_load=%.2f\n    wiﬁdog_uptime=%lu\n    wmac=               路由器mac地址\n    gw_address=         路由器网关地址\n    router_type=        路由器型号\n    sv＝                 路由固件版本\n```\n回复内容：\n```\nPong\n```\n\n例子：\n```\n\n```\n\n### 用户状态上报协议\n请求格式： \n```       \n    http://auth_server/auth/?\n    stage=\n    ip=\n    mac=\n    token=\n    incoming=\n    outgoing=\n    gw_id=          路由器授权码\n```\n注意：\n    ip，mac，token为⽤用户的基本信息\n    incoming，outgoing为⽤用户的连接计数信息。\n    stage为请求类别，值为 counter/ login/ logout，分别表⽰示：已认证/新认证⽤用户 /超时删除的⽤用户。\n\n回复内容：\nAuth: 状态码   (注意 中间冒号和状态码之间有个空格)\n\n    状态码为：\n    0   认证失败\n    1   认证成功\n\n例子：\n\n\n### 跳转协议\n对于新连接⽤用户，路由器将其产⽣生的任意url请求通过302重定向到认证平台。\n请求格式：\n    http://auth_server/login/?\n    gw_id=\n    gw_address=\n    gw_port=\n    mac=\n    url=\n    gw_mac=     路由器mac地址\n\n例子：\n\n### 用户注册协议\n用户在平台申请注册，开通互联网权限。由平台将⽤用户请求重定向到路由器， 完成注册。\n\n请求格式：\n    http://gw_ip/wiﬁdog/auth?\n    token=\n\n例子：\n\n注册请求成功，以307的⽅方式跳转平台的 portal/?gw_id=\n\n### 注册结果确认协议\n 认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。\n\n请求格式：\n    http://auth_server/portal/?\n    gw_id=\n    auth_result=   认证结果\n\n    auth_result 为 successed表⽰示⽤用户在路由器注册成功，failed表⽰示⽤用户在路由器注册失败。\n\n例子：\n\n### 路由器在线升级协议\n认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。\n\n请求格式：\n    http://auth_server/upgrade/?\n    sv=\n    rmac=\n    router_type=\n\n响应格式：\n    upgrade:md5=cc5ce6c4f7147bbdb1babfc32a44338b#url=http:// 192.168.81.55/static/nolimit_wiﬁdog.trx#ver=4.1.1080\n    md5   为固件的md5值\n    Url   为固件下载地址\n    Ver   为固件版本\n\n例子：\n\n\n\n### 接口\nLoginScriptPathFragment\n```\nlogin/?\n```\nPortalScriptPathFragment\n```\nportal/?\n```\nMsgScriptPathFragment\n```\ngw_message.php?\n```\nPingScriptPathFragment\n```\nping/?\n```\nAuthScriptPathFragment\n```\nauth/?\n```\n\n\n### 服务\n```\nhttp://192.168.1.1:2060/wifidog/status\n```\n\n\nlogin/?gw_address=&gw_port=&gw_id=&ip=&mac=&url=\n### 实现步骤\n\n### 源代码\n```\n\n```\n\n### 问题\n\n在wifidog中默认使用php作为开发语言，在配置中默认写死了接口 gw_message\n```\ngw_message.php?message=denied\n```\n使用其他语言开发，需去掉.php\n```\ngw_message?message=denied\n```\n\n\n### 参考资料\n\n\nhttp://www.cnrouter.com/\n","source":"_posts/wifidog认证服务开发.md","raw":"---\ntitle: wifidog认证服务开发 - nodejs\ndate: 2017-01-13 21:03:35\ntags: [nodejs, wifidog]\n---\n\n### 概述\nwifidog是搭建无线热点认证系统的解决方案之一，他比nocat更适合互联网营销思路。目前支持openwrt系统，他实现了路由器和认证服 务器的数据交互，在路由器方是用C语言代码，通过wifidog程序和linux iptables防火墙实现接入用户的认证跳转和控制，在认证服务器方 是通过php实现用户的认证流程和管理。\n`优点：`有开源代码，可以很方便的搭建认证系统。\n`缺点：`标准协议是通过iptables方式实现，性能比较差，整体拉低了路由器的数据包处理速度，协议比较繁琐，对认证服务器的造成性能损耗比较大，在安全方面都是明文传输，有一定的安全隐患。\n\n### 原理\n\n### 网关心跳协议\nwiﬁdog将ping协议作为心跳机制向认证服务器发送当前状态信息。实现认证服务器 和每个节点的状态双向健康监测的机制。\n\n请求信息：\n```\n http://192.168.1.165/ping/?\n    gw_id=%s\n    sys_load=%lu\n    sys_memfree=%u\n    sys_load=%.2f\n    wiﬁdog_uptime=%lu\n    wmac=               路由器mac地址\n    gw_address=         路由器网关地址\n    router_type=        路由器型号\n    sv＝                 路由固件版本\n```\n回复内容：\n```\nPong\n```\n\n例子：\n```\n\n```\n\n### 用户状态上报协议\n请求格式： \n```       \n    http://auth_server/auth/?\n    stage=\n    ip=\n    mac=\n    token=\n    incoming=\n    outgoing=\n    gw_id=          路由器授权码\n```\n注意：\n    ip，mac，token为⽤用户的基本信息\n    incoming，outgoing为⽤用户的连接计数信息。\n    stage为请求类别，值为 counter/ login/ logout，分别表⽰示：已认证/新认证⽤用户 /超时删除的⽤用户。\n\n回复内容：\nAuth: 状态码   (注意 中间冒号和状态码之间有个空格)\n\n    状态码为：\n    0   认证失败\n    1   认证成功\n\n例子：\n\n\n### 跳转协议\n对于新连接⽤用户，路由器将其产⽣生的任意url请求通过302重定向到认证平台。\n请求格式：\n    http://auth_server/login/?\n    gw_id=\n    gw_address=\n    gw_port=\n    mac=\n    url=\n    gw_mac=     路由器mac地址\n\n例子：\n\n### 用户注册协议\n用户在平台申请注册，开通互联网权限。由平台将⽤用户请求重定向到路由器， 完成注册。\n\n请求格式：\n    http://gw_ip/wiﬁdog/auth?\n    token=\n\n例子：\n\n注册请求成功，以307的⽅方式跳转平台的 portal/?gw_id=\n\n### 注册结果确认协议\n 认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。\n\n请求格式：\n    http://auth_server/portal/?\n    gw_id=\n    auth_result=   认证结果\n\n    auth_result 为 successed表⽰示⽤用户在路由器注册成功，failed表⽰示⽤用户在路由器注册失败。\n\n例子：\n\n### 路由器在线升级协议\n认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。\n\n请求格式：\n    http://auth_server/upgrade/?\n    sv=\n    rmac=\n    router_type=\n\n响应格式：\n    upgrade:md5=cc5ce6c4f7147bbdb1babfc32a44338b#url=http:// 192.168.81.55/static/nolimit_wiﬁdog.trx#ver=4.1.1080\n    md5   为固件的md5值\n    Url   为固件下载地址\n    Ver   为固件版本\n\n例子：\n\n\n\n### 接口\nLoginScriptPathFragment\n```\nlogin/?\n```\nPortalScriptPathFragment\n```\nportal/?\n```\nMsgScriptPathFragment\n```\ngw_message.php?\n```\nPingScriptPathFragment\n```\nping/?\n```\nAuthScriptPathFragment\n```\nauth/?\n```\n\n\n### 服务\n```\nhttp://192.168.1.1:2060/wifidog/status\n```\n\n\nlogin/?gw_address=&gw_port=&gw_id=&ip=&mac=&url=\n### 实现步骤\n\n### 源代码\n```\n\n```\n\n### 问题\n\n在wifidog中默认使用php作为开发语言，在配置中默认写死了接口 gw_message\n```\ngw_message.php?message=denied\n```\n使用其他语言开发，需去掉.php\n```\ngw_message?message=denied\n```\n\n\n### 参考资料\n\n\nhttp://www.cnrouter.com/\n","slug":"wifidog认证服务开发","published":1,"updated":"2017-08-03T10:21:24.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96dz0010nou95qxlxfrk","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>wifidog是搭建无线热点认证系统的解决方案之一，他比nocat更适合互联网营销思路。目前支持openwrt系统，他实现了路由器和认证服 务器的数据交互，在路由器方是用C语言代码，通过wifidog程序和linux iptables防火墙实现接入用户的认证跳转和控制，在认证服务器方 是通过php实现用户的认证流程和管理。<br><code>优点：</code>有开源代码，可以很方便的搭建认证系统。<br><code>缺点：</code>标准协议是通过iptables方式实现，性能比较差，整体拉低了路由器的数据包处理速度，协议比较繁琐，对认证服务器的造成性能损耗比较大，在安全方面都是明文传输，有一定的安全隐患。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h3 id=\"网关心跳协议\"><a href=\"#网关心跳协议\" class=\"headerlink\" title=\"网关心跳协议\"></a>网关心跳协议</h3><p>wiﬁdog将ping协议作为心跳机制向认证服务器发送当前状态信息。实现认证服务器 和每个节点的状态双向健康监测的机制。</p>\n<p>请求信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.1.165/ping/?</div><div class=\"line\">   gw_id=%s</div><div class=\"line\">   sys_load=%lu</div><div class=\"line\">   sys_memfree=%u</div><div class=\"line\">   sys_load=%.2f</div><div class=\"line\">   wiﬁdog_uptime=%lu</div><div class=\"line\">   wmac=               路由器mac地址</div><div class=\"line\">   gw_address=         路由器网关地址</div><div class=\"line\">   router_type=        路由器型号</div><div class=\"line\">   sv＝                 路由固件版本</div></pre></td></tr></table></figure></p>\n<p>回复内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pong</div></pre></td></tr></table></figure></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h3 id=\"用户状态上报协议\"><a href=\"#用户状态上报协议\" class=\"headerlink\" title=\"用户状态上报协议\"></a>用户状态上报协议</h3><p>请求格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://auth_server/auth/?</div><div class=\"line\">stage=</div><div class=\"line\">ip=</div><div class=\"line\">mac=</div><div class=\"line\">token=</div><div class=\"line\">incoming=</div><div class=\"line\">outgoing=</div><div class=\"line\">gw_id=          路由器授权码</div></pre></td></tr></table></figure></p>\n<p>注意：<br>    ip，mac，token为⽤用户的基本信息<br>    incoming，outgoing为⽤用户的连接计数信息。<br>    stage为请求类别，值为 counter/ login/ logout，分别表⽰示：已认证/新认证⽤用户 /超时删除的⽤用户。</p>\n<p>回复内容：<br>Auth: 状态码   (注意 中间冒号和状态码之间有个空格)</p>\n<pre><code>状态码为：\n0   认证失败\n1   认证成功\n</code></pre><p>例子：</p>\n<h3 id=\"跳转协议\"><a href=\"#跳转协议\" class=\"headerlink\" title=\"跳转协议\"></a>跳转协议</h3><p>对于新连接⽤用户，路由器将其产⽣生的任意url请求通过302重定向到认证平台。<br>请求格式：<br>    <a href=\"http://auth_server/login/?\" target=\"_blank\" rel=\"external\">http://auth_server/login/?</a><br>    gw_id=<br>    gw_address=<br>    gw_port=<br>    mac=<br>    url=<br>    gw_mac=     路由器mac地址</p>\n<p>例子：</p>\n<h3 id=\"用户注册协议\"><a href=\"#用户注册协议\" class=\"headerlink\" title=\"用户注册协议\"></a>用户注册协议</h3><p>用户在平台申请注册，开通互联网权限。由平台将⽤用户请求重定向到路由器， 完成注册。</p>\n<p>请求格式：<br>    <a href=\"http://gw_ip/wiﬁdog/auth?\" target=\"_blank\" rel=\"external\">http://gw_ip/wiﬁdog/auth?</a><br>    token=</p>\n<p>例子：</p>\n<p>注册请求成功，以307的⽅方式跳转平台的 portal/?gw_id=</p>\n<h3 id=\"注册结果确认协议\"><a href=\"#注册结果确认协议\" class=\"headerlink\" title=\"注册结果确认协议\"></a>注册结果确认协议</h3><p> 认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。</p>\n<p>请求格式：<br>    <a href=\"http://auth_server/portal/?\" target=\"_blank\" rel=\"external\">http://auth_server/portal/?</a><br>    gw_id=<br>    auth_result=   认证结果</p>\n<pre><code>auth_result 为 successed表⽰示⽤用户在路由器注册成功，failed表⽰示⽤用户在路由器注册失败。\n</code></pre><p>例子：</p>\n<h3 id=\"路由器在线升级协议\"><a href=\"#路由器在线升级协议\" class=\"headerlink\" title=\"路由器在线升级协议\"></a>路由器在线升级协议</h3><p>认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。</p>\n<p>请求格式：<br>    <a href=\"http://auth_server/upgrade/?\" target=\"_blank\" rel=\"external\">http://auth_server/upgrade/?</a><br>    sv=<br>    rmac=<br>    router_type=</p>\n<p>响应格式：<br>    upgrade:md5=cc5ce6c4f7147bbdb1babfc32a44338b#url=http:// 192.168.81.55/static/nolimit_wiﬁdog.trx#ver=4.1.1080<br>    md5   为固件的md5值<br>    Url   为固件下载地址<br>    Ver   为固件版本</p>\n<p>例子：</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>LoginScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">login/?</div></pre></td></tr></table></figure></p>\n<p>PortalScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">portal/?</div></pre></td></tr></table></figure></p>\n<p>MsgScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message.php?</div></pre></td></tr></table></figure></p>\n<p>PingScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping/?</div></pre></td></tr></table></figure></p>\n<p>AuthScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">auth/?</div></pre></td></tr></table></figure></p>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.1.1:2060/wifidog/status</div></pre></td></tr></table></figure>\n<p>login/?gw_address=&amp;gw_port=&amp;gw_id=&amp;ip=&amp;mac=&amp;url=</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在wifidog中默认使用php作为开发语言，在配置中默认写死了接口 gw_message<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message.php?message=denied</div></pre></td></tr></table></figure></p>\n<p>使用其他语言开发，需去掉.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message?message=denied</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.cnrouter.com/\" target=\"_blank\" rel=\"external\">http://www.cnrouter.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>wifidog是搭建无线热点认证系统的解决方案之一，他比nocat更适合互联网营销思路。目前支持openwrt系统，他实现了路由器和认证服 务器的数据交互，在路由器方是用C语言代码，通过wifidog程序和linux iptables防火墙实现接入用户的认证跳转和控制，在认证服务器方 是通过php实现用户的认证流程和管理。<br><code>优点：</code>有开源代码，可以很方便的搭建认证系统。<br><code>缺点：</code>标准协议是通过iptables方式实现，性能比较差，整体拉低了路由器的数据包处理速度，协议比较繁琐，对认证服务器的造成性能损耗比较大，在安全方面都是明文传输，有一定的安全隐患。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h3 id=\"网关心跳协议\"><a href=\"#网关心跳协议\" class=\"headerlink\" title=\"网关心跳协议\"></a>网关心跳协议</h3><p>wiﬁdog将ping协议作为心跳机制向认证服务器发送当前状态信息。实现认证服务器 和每个节点的状态双向健康监测的机制。</p>\n<p>请求信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.1.165/ping/?</div><div class=\"line\">   gw_id=%s</div><div class=\"line\">   sys_load=%lu</div><div class=\"line\">   sys_memfree=%u</div><div class=\"line\">   sys_load=%.2f</div><div class=\"line\">   wiﬁdog_uptime=%lu</div><div class=\"line\">   wmac=               路由器mac地址</div><div class=\"line\">   gw_address=         路由器网关地址</div><div class=\"line\">   router_type=        路由器型号</div><div class=\"line\">   sv＝                 路由固件版本</div></pre></td></tr></table></figure></p>\n<p>回复内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pong</div></pre></td></tr></table></figure></p>\n<p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure></p>\n<h3 id=\"用户状态上报协议\"><a href=\"#用户状态上报协议\" class=\"headerlink\" title=\"用户状态上报协议\"></a>用户状态上报协议</h3><p>请求格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://auth_server/auth/?</div><div class=\"line\">stage=</div><div class=\"line\">ip=</div><div class=\"line\">mac=</div><div class=\"line\">token=</div><div class=\"line\">incoming=</div><div class=\"line\">outgoing=</div><div class=\"line\">gw_id=          路由器授权码</div></pre></td></tr></table></figure></p>\n<p>注意：<br>    ip，mac，token为⽤用户的基本信息<br>    incoming，outgoing为⽤用户的连接计数信息。<br>    stage为请求类别，值为 counter/ login/ logout，分别表⽰示：已认证/新认证⽤用户 /超时删除的⽤用户。</p>\n<p>回复内容：<br>Auth: 状态码   (注意 中间冒号和状态码之间有个空格)</p>\n<pre><code>状态码为：\n0   认证失败\n1   认证成功\n</code></pre><p>例子：</p>\n<h3 id=\"跳转协议\"><a href=\"#跳转协议\" class=\"headerlink\" title=\"跳转协议\"></a>跳转协议</h3><p>对于新连接⽤用户，路由器将其产⽣生的任意url请求通过302重定向到认证平台。<br>请求格式：<br>    <a href=\"http://auth_server/login/?\" target=\"_blank\" rel=\"external\">http://auth_server/login/?</a><br>    gw_id=<br>    gw_address=<br>    gw_port=<br>    mac=<br>    url=<br>    gw_mac=     路由器mac地址</p>\n<p>例子：</p>\n<h3 id=\"用户注册协议\"><a href=\"#用户注册协议\" class=\"headerlink\" title=\"用户注册协议\"></a>用户注册协议</h3><p>用户在平台申请注册，开通互联网权限。由平台将⽤用户请求重定向到路由器， 完成注册。</p>\n<p>请求格式：<br>    <a href=\"http://gw_ip/wiﬁdog/auth?\" target=\"_blank\" rel=\"external\">http://gw_ip/wiﬁdog/auth?</a><br>    token=</p>\n<p>例子：</p>\n<p>注册请求成功，以307的⽅方式跳转平台的 portal/?gw_id=</p>\n<h3 id=\"注册结果确认协议\"><a href=\"#注册结果确认协议\" class=\"headerlink\" title=\"注册结果确认协议\"></a>注册结果确认协议</h3><p> 认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。</p>\n<p>请求格式：<br>    <a href=\"http://auth_server/portal/?\" target=\"_blank\" rel=\"external\">http://auth_server/portal/?</a><br>    gw_id=<br>    auth_result=   认证结果</p>\n<pre><code>auth_result 为 successed表⽰示⽤用户在路由器注册成功，failed表⽰示⽤用户在路由器注册失败。\n</code></pre><p>例子：</p>\n<h3 id=\"路由器在线升级协议\"><a href=\"#路由器在线升级协议\" class=\"headerlink\" title=\"路由器在线升级协议\"></a>路由器在线升级协议</h3><p>认证流程⾛走完，路由器会⽤用307跳转⽅方式，将⽤用户请求重新跳转到认证平台。</p>\n<p>请求格式：<br>    <a href=\"http://auth_server/upgrade/?\" target=\"_blank\" rel=\"external\">http://auth_server/upgrade/?</a><br>    sv=<br>    rmac=<br>    router_type=</p>\n<p>响应格式：<br>    upgrade:md5=cc5ce6c4f7147bbdb1babfc32a44338b#url=http:// 192.168.81.55/static/nolimit_wiﬁdog.trx#ver=4.1.1080<br>    md5   为固件的md5值<br>    Url   为固件下载地址<br>    Ver   为固件版本</p>\n<p>例子：</p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>LoginScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">login/?</div></pre></td></tr></table></figure></p>\n<p>PortalScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">portal/?</div></pre></td></tr></table></figure></p>\n<p>MsgScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message.php?</div></pre></td></tr></table></figure></p>\n<p>PingScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping/?</div></pre></td></tr></table></figure></p>\n<p>AuthScriptPathFragment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">auth/?</div></pre></td></tr></table></figure></p>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://192.168.1.1:2060/wifidog/status</div></pre></td></tr></table></figure>\n<p>login/?gw_address=&amp;gw_port=&amp;gw_id=&amp;ip=&amp;mac=&amp;url=</p>\n<h3 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h3><h3 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在wifidog中默认使用php作为开发语言，在配置中默认写死了接口 gw_message<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message.php?message=denied</div></pre></td></tr></table></figure></p>\n<p>使用其他语言开发，需去掉.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gw_message?message=denied</div></pre></td></tr></table></figure></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"http://www.cnrouter.com/\" target=\"_blank\" rel=\"external\">http://www.cnrouter.com/</a></p>\n"},{"title":"手机网页调起原生微信朋友圈分享的工具","date":"2015-12-12T08:33:25.000Z","_content":"nativeShare\n======\n\nnativeShare是一个可以通过javascript直接调用原生分享的工具.  [demo](http://blog.wangjunfeng.com/demo/native_share/)\n\n我们知道现在我们无法直接通过js直接跳转到微信和QQ等软件进行分享,但是现在像UC浏览器和QQ浏览器这样的主流浏览器自带一个分享工具,而他们也有自己定义的js接口.我们通过调用浏览器的接口去调用浏览器的分享,从而实现原生分享功能.是不是很酷呢?\n\n该工具具有以下特点:\n\n* 支持原生微博、微信好友、微信朋友圈、QQ好友、QQ空间分享\n\n* 支持调用浏览器更多分享功能\n\n* 注意:目前仅支持手机UC浏览器和QQ浏览器\n\ngithub项目地址:  [https://github.com/JefferyWang/nativeShare.js](https://github.com/JefferyWang/nativeShare.js)\n\nGit@OSC项目地址:  [http://git.oschina.net/wangjunfeng/nativeShare.js](http://git.oschina.net/wangjunfeng/nativeShare.js)\n<!-- more -->\n扫描二维码访问Demo\n--------------------\n\n![Demo](http://qrapi.cli.im/qr?data=http%253A%252F%252Fblog.wangjunfeng.com%252Fdemo%252Fnative_share%252F&level=H&transparent=false&bgcolor=%23ffffff&forecolor=%23000000&blockpixel=12&marginblock=1&logourl=&size=280&kid=cliim&key=95f6dfd09d364c85a17da72a307b24c5)\n\n使用方法\n--------------------\n\n* 引入CSS文件\n\n``` html\n<link rel=\"stylesheet\" href=\"nativeShare.css\"/>\n```\n\n* 在需要放分享的地方插入以下代码\n\n``` html\n<div id=\"nativeShare\"></div>\n```\n\n* 添加配置,并实例化\n\n``` javascript\n<script>\n    var config = {\n        url:'http://blog.wangjunfeng.com',// 分享的网页链接\n        title:'王俊锋的个人博客',// 标题\n        desc:'王俊锋的个人博客',// 描述\n        img:'http://www.wangjunfeng.com/img/face.jpg',// 图片\n        img_title:'王俊锋的个人博客',// 图片标题\n        from:'王俊锋的博客' // 来源\n    };\n    var share_obj = new nativeShare('nativeShare',config);\n</script>\n```\n\n截图\n--------------------\n\n![分享列表](http://i1.tietuku.com/5e6c8ab36cfb7990.jpg)\n![微博分享](http://i1.tietuku.com/b95968a5a28720a4.jpg)\n![朋友圈分享](http://i1.tietuku.com/933063f83bffe114.jpg)\n![微信好友分享](http://i4.tietuku.com/0605788e4c9dd17d.jpg)\n![QQ好友分享](http://i1.tietuku.com/cde46bc93b8677fa.png)\n![QQ空间分享](http://i1.tietuku.com/5fa7f7dc87d4215f.png)\n![更多](http://i1.tietuku.com/9f391d6e086aecad.jpg)","source":"_posts/share_native.md","raw":"title: \"手机网页调起原生微信朋友圈分享的工具\"\ndate: 2015-12-12 16:33:25\ntags:\n---\nnativeShare\n======\n\nnativeShare是一个可以通过javascript直接调用原生分享的工具.  [demo](http://blog.wangjunfeng.com/demo/native_share/)\n\n我们知道现在我们无法直接通过js直接跳转到微信和QQ等软件进行分享,但是现在像UC浏览器和QQ浏览器这样的主流浏览器自带一个分享工具,而他们也有自己定义的js接口.我们通过调用浏览器的接口去调用浏览器的分享,从而实现原生分享功能.是不是很酷呢?\n\n该工具具有以下特点:\n\n* 支持原生微博、微信好友、微信朋友圈、QQ好友、QQ空间分享\n\n* 支持调用浏览器更多分享功能\n\n* 注意:目前仅支持手机UC浏览器和QQ浏览器\n\ngithub项目地址:  [https://github.com/JefferyWang/nativeShare.js](https://github.com/JefferyWang/nativeShare.js)\n\nGit@OSC项目地址:  [http://git.oschina.net/wangjunfeng/nativeShare.js](http://git.oschina.net/wangjunfeng/nativeShare.js)\n<!-- more -->\n扫描二维码访问Demo\n--------------------\n\n![Demo](http://qrapi.cli.im/qr?data=http%253A%252F%252Fblog.wangjunfeng.com%252Fdemo%252Fnative_share%252F&level=H&transparent=false&bgcolor=%23ffffff&forecolor=%23000000&blockpixel=12&marginblock=1&logourl=&size=280&kid=cliim&key=95f6dfd09d364c85a17da72a307b24c5)\n\n使用方法\n--------------------\n\n* 引入CSS文件\n\n``` html\n<link rel=\"stylesheet\" href=\"nativeShare.css\"/>\n```\n\n* 在需要放分享的地方插入以下代码\n\n``` html\n<div id=\"nativeShare\"></div>\n```\n\n* 添加配置,并实例化\n\n``` javascript\n<script>\n    var config = {\n        url:'http://blog.wangjunfeng.com',// 分享的网页链接\n        title:'王俊锋的个人博客',// 标题\n        desc:'王俊锋的个人博客',// 描述\n        img:'http://www.wangjunfeng.com/img/face.jpg',// 图片\n        img_title:'王俊锋的个人博客',// 图片标题\n        from:'王俊锋的博客' // 来源\n    };\n    var share_obj = new nativeShare('nativeShare',config);\n</script>\n```\n\n截图\n--------------------\n\n![分享列表](http://i1.tietuku.com/5e6c8ab36cfb7990.jpg)\n![微博分享](http://i1.tietuku.com/b95968a5a28720a4.jpg)\n![朋友圈分享](http://i1.tietuku.com/933063f83bffe114.jpg)\n![微信好友分享](http://i4.tietuku.com/0605788e4c9dd17d.jpg)\n![QQ好友分享](http://i1.tietuku.com/cde46bc93b8677fa.png)\n![QQ空间分享](http://i1.tietuku.com/5fa7f7dc87d4215f.png)\n![更多](http://i1.tietuku.com/9f391d6e086aecad.jpg)","slug":"share_native","published":1,"updated":"2017-08-03T10:21:24.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96e00013nou90eip8fkn","content":"<h1 id=\"nativeShare\"><a href=\"#nativeShare\" class=\"headerlink\" title=\"nativeShare\"></a>nativeShare</h1><p>nativeShare是一个可以通过javascript直接调用原生分享的工具.  <a href=\"http://blog.wangjunfeng.com/demo/native_share/\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p>我们知道现在我们无法直接通过js直接跳转到微信和QQ等软件进行分享,但是现在像UC浏览器和QQ浏览器这样的主流浏览器自带一个分享工具,而他们也有自己定义的js接口.我们通过调用浏览器的接口去调用浏览器的分享,从而实现原生分享功能.是不是很酷呢?</p>\n<p>该工具具有以下特点:</p>\n<ul>\n<li><p>支持原生微博、微信好友、微信朋友圈、QQ好友、QQ空间分享</p>\n</li>\n<li><p>支持调用浏览器更多分享功能</p>\n</li>\n<li><p>注意:目前仅支持手机UC浏览器和QQ浏览器</p>\n</li>\n</ul>\n<p>github项目地址:  <a href=\"https://github.com/JefferyWang/nativeShare.js\" target=\"_blank\" rel=\"external\">https://github.com/JefferyWang/nativeShare.js</a></p>\n<p>Git@OSC项目地址:  <a href=\"http://git.oschina.net/wangjunfeng/nativeShare.js\" target=\"_blank\" rel=\"external\">http://git.oschina.net/wangjunfeng/nativeShare.js</a><br><a id=\"more\"></a></p>\n<h2 id=\"扫描二维码访问Demo\"><a href=\"#扫描二维码访问Demo\" class=\"headerlink\" title=\"扫描二维码访问Demo\"></a>扫描二维码访问Demo</h2><p><img src=\"http://qrapi.cli.im/qr?data=http%253A%252F%252Fblog.wangjunfeng.com%252Fdemo%252Fnative_share%252F&amp;level=H&amp;transparent=false&amp;bgcolor=%23ffffff&amp;forecolor=%23000000&amp;blockpixel=12&amp;marginblock=1&amp;logourl=&amp;size=280&amp;kid=cliim&amp;key=95f6dfd09d364c85a17da72a307b24c5\" alt=\"Demo\"></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>引入CSS文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"nativeShare.css\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在需要放分享的地方插入以下代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nativeShare\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加配置,并实例化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">        url:<span class=\"string\">'http://blog.wangjunfeng.com'</span>,<span class=\"comment\">// 分享的网页链接</span></div><div class=\"line\">        title:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 标题</span></div><div class=\"line\">        desc:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 描述</span></div><div class=\"line\">        img:<span class=\"string\">'http://www.wangjunfeng.com/img/face.jpg'</span>,<span class=\"comment\">// 图片</span></div><div class=\"line\">        img_title:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 图片标题</span></div><div class=\"line\">        <span class=\"keyword\">from</span>:<span class=\"string\">'王俊锋的博客'</span> <span class=\"comment\">// 来源</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> share_obj = <span class=\"keyword\">new</span> nativeShare(<span class=\"string\">'nativeShare'</span>,config);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p><img src=\"http://i1.tietuku.com/5e6c8ab36cfb7990.jpg\" alt=\"分享列表\"><br><img src=\"http://i1.tietuku.com/b95968a5a28720a4.jpg\" alt=\"微博分享\"><br><img src=\"http://i1.tietuku.com/933063f83bffe114.jpg\" alt=\"朋友圈分享\"><br><img src=\"http://i4.tietuku.com/0605788e4c9dd17d.jpg\" alt=\"微信好友分享\"><br><img src=\"http://i1.tietuku.com/cde46bc93b8677fa.png\" alt=\"QQ好友分享\"><br><img src=\"http://i1.tietuku.com/5fa7f7dc87d4215f.png\" alt=\"QQ空间分享\"><br><img src=\"http://i1.tietuku.com/9f391d6e086aecad.jpg\" alt=\"更多\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"nativeShare\"><a href=\"#nativeShare\" class=\"headerlink\" title=\"nativeShare\"></a>nativeShare</h1><p>nativeShare是一个可以通过javascript直接调用原生分享的工具.  <a href=\"http://blog.wangjunfeng.com/demo/native_share/\" target=\"_blank\" rel=\"external\">demo</a></p>\n<p>我们知道现在我们无法直接通过js直接跳转到微信和QQ等软件进行分享,但是现在像UC浏览器和QQ浏览器这样的主流浏览器自带一个分享工具,而他们也有自己定义的js接口.我们通过调用浏览器的接口去调用浏览器的分享,从而实现原生分享功能.是不是很酷呢?</p>\n<p>该工具具有以下特点:</p>\n<ul>\n<li><p>支持原生微博、微信好友、微信朋友圈、QQ好友、QQ空间分享</p>\n</li>\n<li><p>支持调用浏览器更多分享功能</p>\n</li>\n<li><p>注意:目前仅支持手机UC浏览器和QQ浏览器</p>\n</li>\n</ul>\n<p>github项目地址:  <a href=\"https://github.com/JefferyWang/nativeShare.js\" target=\"_blank\" rel=\"external\">https://github.com/JefferyWang/nativeShare.js</a></p>\n<p>Git@OSC项目地址:  <a href=\"http://git.oschina.net/wangjunfeng/nativeShare.js\" target=\"_blank\" rel=\"external\">http://git.oschina.net/wangjunfeng/nativeShare.js</a><br>","more":"</p>\n<h2 id=\"扫描二维码访问Demo\"><a href=\"#扫描二维码访问Demo\" class=\"headerlink\" title=\"扫描二维码访问Demo\"></a>扫描二维码访问Demo</h2><p><img src=\"http://qrapi.cli.im/qr?data=http%253A%252F%252Fblog.wangjunfeng.com%252Fdemo%252Fnative_share%252F&amp;level=H&amp;transparent=false&amp;bgcolor=%23ffffff&amp;forecolor=%23000000&amp;blockpixel=12&amp;marginblock=1&amp;logourl=&amp;size=280&amp;kid=cliim&amp;key=95f6dfd09d364c85a17da72a307b24c5\" alt=\"Demo\"></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>引入CSS文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"nativeShare.css\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>在需要放分享的地方插入以下代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nativeShare\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>添加配置,并实例化</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">        url:<span class=\"string\">'http://blog.wangjunfeng.com'</span>,<span class=\"comment\">// 分享的网页链接</span></div><div class=\"line\">        title:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 标题</span></div><div class=\"line\">        desc:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 描述</span></div><div class=\"line\">        img:<span class=\"string\">'http://www.wangjunfeng.com/img/face.jpg'</span>,<span class=\"comment\">// 图片</span></div><div class=\"line\">        img_title:<span class=\"string\">'王俊锋的个人博客'</span>,<span class=\"comment\">// 图片标题</span></div><div class=\"line\">        <span class=\"keyword\">from</span>:<span class=\"string\">'王俊锋的博客'</span> <span class=\"comment\">// 来源</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> share_obj = <span class=\"keyword\">new</span> nativeShare(<span class=\"string\">'nativeShare'</span>,config);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p><img src=\"http://i1.tietuku.com/5e6c8ab36cfb7990.jpg\" alt=\"分享列表\"><br><img src=\"http://i1.tietuku.com/b95968a5a28720a4.jpg\" alt=\"微博分享\"><br><img src=\"http://i1.tietuku.com/933063f83bffe114.jpg\" alt=\"朋友圈分享\"><br><img src=\"http://i4.tietuku.com/0605788e4c9dd17d.jpg\" alt=\"微信好友分享\"><br><img src=\"http://i1.tietuku.com/cde46bc93b8677fa.png\" alt=\"QQ好友分享\"><br><img src=\"http://i1.tietuku.com/5fa7f7dc87d4215f.png\" alt=\"QQ空间分享\"><br><img src=\"http://i1.tietuku.com/9f391d6e086aecad.jpg\" alt=\"更多\"></p>"},{"title":"mysql在docker中应用","date":"2017-02-17T01:47:28.000Z","_content":"\n### docker 安装\n\n```\n\n```\n\n### mysql 安装\n\n```\ndocker pull mysql\n```\n\n\n### 允许mysql容器\n\n```\ndocker run -d -p 3306:3306 --name nav-mysql -e MYSQL_ROOT_PASSWORD=root mysql\n```\n\n```\ndocker exec -it aae /bin/bash\n\ndocker exec -i aae mysql -uroot -proot navigation < ./navigation.sql\n```\n\n```\nmysql -uroot -proot\n\nshow databases;\n\ncreate database navigation;\n\nuse navigation;\n\nshow tables;\n\n```\n\ndocker cp navigation.sql aae:/tmp/\n\nuse navigation;\nsource /tmp/navigation.sql;\n\n\n\ndocker exec CONTAINER_ID  mysql -uroot -e \"create database DATABASE_NAME\"\n\nservice docker start\n\nsu -\n\n\n  docker run -v /var/db:/var/db:Z rhel7 /bin/sh\n\n\n\n\n\n  http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/\n\n  https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/\n\n  http://jeeinn.com/2016/08/128/\n\n  https://github.com/xiongjungit/docker-mysql","source":"_posts/docker/mysql.md","raw":"---\ntitle: mysql在docker中应用\ndate: 2017-02-17 09:47:28\ncategories: docker\ntags: [mysql, docker]\n---\n\n### docker 安装\n\n```\n\n```\n\n### mysql 安装\n\n```\ndocker pull mysql\n```\n\n\n### 允许mysql容器\n\n```\ndocker run -d -p 3306:3306 --name nav-mysql -e MYSQL_ROOT_PASSWORD=root mysql\n```\n\n```\ndocker exec -it aae /bin/bash\n\ndocker exec -i aae mysql -uroot -proot navigation < ./navigation.sql\n```\n\n```\nmysql -uroot -proot\n\nshow databases;\n\ncreate database navigation;\n\nuse navigation;\n\nshow tables;\n\n```\n\ndocker cp navigation.sql aae:/tmp/\n\nuse navigation;\nsource /tmp/navigation.sql;\n\n\n\ndocker exec CONTAINER_ID  mysql -uroot -e \"create database DATABASE_NAME\"\n\nservice docker start\n\nsu -\n\n\n  docker run -v /var/db:/var/db:Z rhel7 /bin/sh\n\n\n\n\n\n  http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/\n\n  https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/\n\n  http://jeeinn.com/2016/08/128/\n\n  https://github.com/xiongjungit/docker-mysql","slug":"docker/mysql","published":1,"updated":"2017-08-03T10:21:24.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fe001snou9bjlw9bpw","content":"<h3 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql</div></pre></td></tr></table></figure>\n<h3 id=\"允许mysql容器\"><a href=\"#允许mysql容器\" class=\"headerlink\" title=\"允许mysql容器\"></a>允许mysql容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p 3306:3306 --name nav-mysql -e MYSQL_ROOT_PASSWORD=root mysql</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it aae /bin/bash</div><div class=\"line\"></div><div class=\"line\">docker exec -i aae mysql -uroot -proot navigation &lt; ./navigation.sql</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot -proot</div><div class=\"line\"></div><div class=\"line\">show databases;</div><div class=\"line\"></div><div class=\"line\">create database navigation;</div><div class=\"line\"></div><div class=\"line\">use navigation;</div><div class=\"line\"></div><div class=\"line\">show tables;</div></pre></td></tr></table></figure>\n<p>docker cp navigation.sql aae:/tmp/</p>\n<p>use navigation;<br>source /tmp/navigation.sql;</p>\n<p>docker exec CONTAINER_ID  mysql -uroot -e “create database DATABASE_NAME”</p>\n<p>service docker start</p>\n<p>su -</p>\n<p>  docker run -v /var/db:/var/db:Z rhel7 /bin/sh</p>\n<p>  <a href=\"http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/\" target=\"_blank\" rel=\"external\">http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/</a></p>\n<p>  <a href=\"https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/\" target=\"_blank\" rel=\"external\">https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/</a></p>\n<p>  <a href=\"http://jeeinn.com/2016/08/128/\" target=\"_blank\" rel=\"external\">http://jeeinn.com/2016/08/128/</a></p>\n<p>  <a href=\"https://github.com/xiongjungit/docker-mysql\" target=\"_blank\" rel=\"external\">https://github.com/xiongjungit/docker-mysql</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div></pre></td></tr></table></figure>\n<h3 id=\"mysql-安装\"><a href=\"#mysql-安装\" class=\"headerlink\" title=\"mysql 安装\"></a>mysql 安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql</div></pre></td></tr></table></figure>\n<h3 id=\"允许mysql容器\"><a href=\"#允许mysql容器\" class=\"headerlink\" title=\"允许mysql容器\"></a>允许mysql容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p 3306:3306 --name nav-mysql -e MYSQL_ROOT_PASSWORD=root mysql</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it aae /bin/bash</div><div class=\"line\"></div><div class=\"line\">docker exec -i aae mysql -uroot -proot navigation &lt; ./navigation.sql</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot -proot</div><div class=\"line\"></div><div class=\"line\">show databases;</div><div class=\"line\"></div><div class=\"line\">create database navigation;</div><div class=\"line\"></div><div class=\"line\">use navigation;</div><div class=\"line\"></div><div class=\"line\">show tables;</div></pre></td></tr></table></figure>\n<p>docker cp navigation.sql aae:/tmp/</p>\n<p>use navigation;<br>source /tmp/navigation.sql;</p>\n<p>docker exec CONTAINER_ID  mysql -uroot -e “create database DATABASE_NAME”</p>\n<p>service docker start</p>\n<p>su -</p>\n<p>  docker run -v /var/db:/var/db:Z rhel7 /bin/sh</p>\n<p>  <a href=\"http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/\" target=\"_blank\" rel=\"external\">http://beyondvincent.com/2016/09/10/2016-09-10-use-mysql-with-docker/</a></p>\n<p>  <a href=\"https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/\" target=\"_blank\" rel=\"external\">https://hsulei.com/2016/12/15/docker%E4%B9%8Bmysql%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/</a></p>\n<p>  <a href=\"http://jeeinn.com/2016/08/128/\" target=\"_blank\" rel=\"external\">http://jeeinn.com/2016/08/128/</a></p>\n<p>  <a href=\"https://github.com/xiongjungit/docker-mysql\" target=\"_blank\" rel=\"external\">https://github.com/xiongjungit/docker-mysql</a></p>\n"},{"title":"docker常见参数","date":"2016-11-10T10:47:28.000Z","_content":"\n##\n\nservice docker start\n\nsu -\n\n\n## docker 查询容器、镜像、日志\n```\n\tdocker top <container> #显示容器内运行的进程   \n\tdocker images #查询所有的镜像，默认是最近创建的排在最上。  \n\tdocker ps #查看正在运行的容器  \n\tdocker ps -l #查看最后退出的容器的ID  \n\tdocker ps -a #查看所有的容器，包括退出的。  \n\tdocker logs {容器ID|容器名称} #查询某个容器的所有操作记录。  \n\tdocker logs -f {容器ID|容器名称} #实时查看容易的操作记录。\n```\n\n## docker 删除容器与镜像\n```\n\tdocker rm$(docker ps -a -q)  #删除所有容器\n \tdocker rm <containerName or id>  #删除单个容器\n  \tdocker rmi id #删除单个容器\n\tdocker rmi$(docker images | grep none | awk '${print $3}' | sort -r) #删除所有镜像\n```\n\n## 启动停止容器\n\n```\n\tdocker stop <容器名or ID> #停止某个容器  \n\tdocker start <容器名or ID> #启动某个容器  \n\tdocker kill <容器名or ID> #杀掉某个容器\n```\n\n## docker 参数详解\n```\n\tdocker  \n\tuseage of docker  \n\t-D 默认false 允许调试模式(debugmode)  \n\t-H 默认是unix:///var/run/docker.sock tcp://[host[:port]]来绑定 或者unix://[/path/to/socket]来使用(二进制文件的时候)，当主机ip host=[0.0.0.0],(端口)port=[4243] 或者 path=[/var/run/docker.sock]是缺省值，做为默认值来使用  \n\t-api-enable-cors 默认flase 允许CORS header远程api  \n\t-b 默认是空，附加在已存在的网桥上，如果是用'none'参数，就禁用了容器的网络  \n\t-bip 默认是空，使用提供的CIDR（ClasslessInter-Domain Routing-无类型域间选路）标记地址动态创建网桥(dcoker0),和-b参数冲突  \n\t-d 默认false 允许进程模式(daemonmode)  \n\t-dns 默认是空，使docker使用指定的DNS服务器  \n\t-g 默认是\"/var/lib/docker\":作为docker使用的根路径  \n\t-icc 默认true，允许inter-container来通信  \n\t-ip 默认\"0.0.0.0\"：绑定容器端口的默认Ip地址  \n\t-iptables 默认true 禁用docker添加iptables规则  \n\t-mtu 默认1500 : 设置容器网络传输的最大单元(mtu)  \n\t-p 默认是/var/run/docker.pid进程pid使用的文件路径  \n\t-r 默认是true 重启之前运行的容器  \n\t-s 默认是空 ，这个是docker运行是使用一个指定的存储驱动器  \n\t-v 默认false 打印版本信息和退出\n```\n\n## docker run命令详解\n```\n\tUsage: docker run [OPTIONS] IMAGE[:TAG] [COMMAND] \t[ARG...]  \n\tRun a command in a new container  \n\t-a=map[]: 附加标准输入、输出或者错误输出  \n\t-c=0: 共享CPU格式（相对重要）  \n\t-cidfile=\"\": 将容器的ID标识写入文件  \n\t-d=false: 分离模式，在后台运行容器，并且打印出容器ID  \n\t-e=[]:设置环境变量  \n\t-h=\"\": 容器的主机名称  \n\t-i=false: 保持输入流开放即使没有附加输入流  \n\t-privileged=false: 给容器扩展的权限  \n\t-m=\"\": 内存限制 (格式:<number><optional unit>, unit单位 = b, k, m or g)  \n\t-n=true: 允许镜像使用网络  \n\t-p=[]: 匹配镜像内的网络端口号  \n\t-rm=false:当容器退出时自动删除容器 (不能跟 -d一起使用)  \n\t-t=false: 分配一个伪造的终端输入  \n\t-u=\"\": 用户名或者ID  \n\t-dns=[]: 自定义容器的DNS服务器  \n\t-v=[]: 创建一个挂载绑定：[host-dir]:[container-dir]:[rw|ro].如果容器目录丢失，docker会创建一个新的卷  \n\t-volumes-from=\"\": 挂载容器所有的卷  \n\t-entrypoint=\"\": 覆盖镜像设置默认的入口点  \n\t-w=\"\": 工作目录内的容器  \n\t-lxc-conf=[]: 添加自定义-lxc-\tconf=\"lxc.cgroup.cpuset.cpus = 0,1\"\n\t-sig-proxy=true: 代理接收所有进程信号(even in non-tty mode)  \n\t-expose=[]: 让你主机没有开放的端口  \n\t-link=\"\": 连接到另一个容器(name:alias)  \n\t-name=\"\": 分配容器的名称，如果没有指定就会随机生成一个  \n\t-P=false: Publish all exposed ports to thehost interfaces 公布所有显示的端口主机接口\n```\n","source":"_posts/docker/docker常见参数.md","raw":"---\ntitle: docker常见参数\ndate: 2016-11-10 18:47:28\ncategories: docker\ntags:\n---\n\n##\n\nservice docker start\n\nsu -\n\n\n## docker 查询容器、镜像、日志\n```\n\tdocker top <container> #显示容器内运行的进程   \n\tdocker images #查询所有的镜像，默认是最近创建的排在最上。  \n\tdocker ps #查看正在运行的容器  \n\tdocker ps -l #查看最后退出的容器的ID  \n\tdocker ps -a #查看所有的容器，包括退出的。  \n\tdocker logs {容器ID|容器名称} #查询某个容器的所有操作记录。  \n\tdocker logs -f {容器ID|容器名称} #实时查看容易的操作记录。\n```\n\n## docker 删除容器与镜像\n```\n\tdocker rm$(docker ps -a -q)  #删除所有容器\n \tdocker rm <containerName or id>  #删除单个容器\n  \tdocker rmi id #删除单个容器\n\tdocker rmi$(docker images | grep none | awk '${print $3}' | sort -r) #删除所有镜像\n```\n\n## 启动停止容器\n\n```\n\tdocker stop <容器名or ID> #停止某个容器  \n\tdocker start <容器名or ID> #启动某个容器  \n\tdocker kill <容器名or ID> #杀掉某个容器\n```\n\n## docker 参数详解\n```\n\tdocker  \n\tuseage of docker  \n\t-D 默认false 允许调试模式(debugmode)  \n\t-H 默认是unix:///var/run/docker.sock tcp://[host[:port]]来绑定 或者unix://[/path/to/socket]来使用(二进制文件的时候)，当主机ip host=[0.0.0.0],(端口)port=[4243] 或者 path=[/var/run/docker.sock]是缺省值，做为默认值来使用  \n\t-api-enable-cors 默认flase 允许CORS header远程api  \n\t-b 默认是空，附加在已存在的网桥上，如果是用'none'参数，就禁用了容器的网络  \n\t-bip 默认是空，使用提供的CIDR（ClasslessInter-Domain Routing-无类型域间选路）标记地址动态创建网桥(dcoker0),和-b参数冲突  \n\t-d 默认false 允许进程模式(daemonmode)  \n\t-dns 默认是空，使docker使用指定的DNS服务器  \n\t-g 默认是\"/var/lib/docker\":作为docker使用的根路径  \n\t-icc 默认true，允许inter-container来通信  \n\t-ip 默认\"0.0.0.0\"：绑定容器端口的默认Ip地址  \n\t-iptables 默认true 禁用docker添加iptables规则  \n\t-mtu 默认1500 : 设置容器网络传输的最大单元(mtu)  \n\t-p 默认是/var/run/docker.pid进程pid使用的文件路径  \n\t-r 默认是true 重启之前运行的容器  \n\t-s 默认是空 ，这个是docker运行是使用一个指定的存储驱动器  \n\t-v 默认false 打印版本信息和退出\n```\n\n## docker run命令详解\n```\n\tUsage: docker run [OPTIONS] IMAGE[:TAG] [COMMAND] \t[ARG...]  \n\tRun a command in a new container  \n\t-a=map[]: 附加标准输入、输出或者错误输出  \n\t-c=0: 共享CPU格式（相对重要）  \n\t-cidfile=\"\": 将容器的ID标识写入文件  \n\t-d=false: 分离模式，在后台运行容器，并且打印出容器ID  \n\t-e=[]:设置环境变量  \n\t-h=\"\": 容器的主机名称  \n\t-i=false: 保持输入流开放即使没有附加输入流  \n\t-privileged=false: 给容器扩展的权限  \n\t-m=\"\": 内存限制 (格式:<number><optional unit>, unit单位 = b, k, m or g)  \n\t-n=true: 允许镜像使用网络  \n\t-p=[]: 匹配镜像内的网络端口号  \n\t-rm=false:当容器退出时自动删除容器 (不能跟 -d一起使用)  \n\t-t=false: 分配一个伪造的终端输入  \n\t-u=\"\": 用户名或者ID  \n\t-dns=[]: 自定义容器的DNS服务器  \n\t-v=[]: 创建一个挂载绑定：[host-dir]:[container-dir]:[rw|ro].如果容器目录丢失，docker会创建一个新的卷  \n\t-volumes-from=\"\": 挂载容器所有的卷  \n\t-entrypoint=\"\": 覆盖镜像设置默认的入口点  \n\t-w=\"\": 工作目录内的容器  \n\t-lxc-conf=[]: 添加自定义-lxc-\tconf=\"lxc.cgroup.cpuset.cpus = 0,1\"\n\t-sig-proxy=true: 代理接收所有进程信号(even in non-tty mode)  \n\t-expose=[]: 让你主机没有开放的端口  \n\t-link=\"\": 连接到另一个容器(name:alias)  \n\t-name=\"\": 分配容器的名称，如果没有指定就会随机生成一个  \n\t-P=false: Publish all exposed ports to thehost interfaces 公布所有显示的端口主机接口\n```\n","slug":"docker/docker常见参数","published":1,"updated":"2017-08-03T10:21:24.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fi001tnou9wihhones","content":"<p>##</p>\n<p>service docker start</p>\n<p>su -</p>\n<h2 id=\"docker-查询容器、镜像、日志\"><a href=\"#docker-查询容器、镜像、日志\" class=\"headerlink\" title=\"docker 查询容器、镜像、日志\"></a>docker 查询容器、镜像、日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker top &lt;container&gt; #显示容器内运行的进程   </div><div class=\"line\">docker images #查询所有的镜像，默认是最近创建的排在最上。  </div><div class=\"line\">docker ps #查看正在运行的容器  </div><div class=\"line\">docker ps -l #查看最后退出的容器的ID  </div><div class=\"line\">docker ps -a #查看所有的容器，包括退出的。  </div><div class=\"line\">docker logs &#123;容器ID|容器名称&#125; #查询某个容器的所有操作记录。  </div><div class=\"line\">docker logs -f &#123;容器ID|容器名称&#125; #实时查看容易的操作记录。</div></pre></td></tr></table></figure>\n<h2 id=\"docker-删除容器与镜像\"><a href=\"#docker-删除容器与镜像\" class=\"headerlink\" title=\"docker 删除容器与镜像\"></a>docker 删除容器与镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rm$(docker ps -a -q)  #删除所有容器</div><div class=\"line\">\tdocker rm &lt;containerName or id&gt;  #删除单个容器</div><div class=\"line\"> \tdocker rmi id #删除单个容器</div><div class=\"line\">docker rmi$(docker images | grep none | awk &apos;$&#123;print $3&#125;&apos; | sort -r) #删除所有镜像</div></pre></td></tr></table></figure>\n<h2 id=\"启动停止容器\"><a href=\"#启动停止容器\" class=\"headerlink\" title=\"启动停止容器\"></a>启动停止容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop &lt;容器名or ID&gt; #停止某个容器  </div><div class=\"line\">docker start &lt;容器名or ID&gt; #启动某个容器  </div><div class=\"line\">docker kill &lt;容器名or ID&gt; #杀掉某个容器</div></pre></td></tr></table></figure>\n<h2 id=\"docker-参数详解\"><a href=\"#docker-参数详解\" class=\"headerlink\" title=\"docker 参数详解\"></a>docker 参数详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker  </div><div class=\"line\">useage of docker  </div><div class=\"line\">-D 默认false 允许调试模式(debugmode)  </div><div class=\"line\">-H 默认是unix:///var/run/docker.sock tcp://[host[:port]]来绑定 或者unix://[/path/to/socket]来使用(二进制文件的时候)，当主机ip host=[0.0.0.0],(端口)port=[4243] 或者 path=[/var/run/docker.sock]是缺省值，做为默认值来使用  </div><div class=\"line\">-api-enable-cors 默认flase 允许CORS header远程api  </div><div class=\"line\">-b 默认是空，附加在已存在的网桥上，如果是用&apos;none&apos;参数，就禁用了容器的网络  </div><div class=\"line\">-bip 默认是空，使用提供的CIDR（ClasslessInter-Domain Routing-无类型域间选路）标记地址动态创建网桥(dcoker0),和-b参数冲突  </div><div class=\"line\">-d 默认false 允许进程模式(daemonmode)  </div><div class=\"line\">-dns 默认是空，使docker使用指定的DNS服务器  </div><div class=\"line\">-g 默认是&quot;/var/lib/docker&quot;:作为docker使用的根路径  </div><div class=\"line\">-icc 默认true，允许inter-container来通信  </div><div class=\"line\">-ip 默认&quot;0.0.0.0&quot;：绑定容器端口的默认Ip地址  </div><div class=\"line\">-iptables 默认true 禁用docker添加iptables规则  </div><div class=\"line\">-mtu 默认1500 : 设置容器网络传输的最大单元(mtu)  </div><div class=\"line\">-p 默认是/var/run/docker.pid进程pid使用的文件路径  </div><div class=\"line\">-r 默认是true 重启之前运行的容器  </div><div class=\"line\">-s 默认是空 ，这个是docker运行是使用一个指定的存储驱动器  </div><div class=\"line\">-v 默认false 打印版本信息和退出</div></pre></td></tr></table></figure>\n<h2 id=\"docker-run命令详解\"><a href=\"#docker-run命令详解\" class=\"headerlink\" title=\"docker run命令详解\"></a>docker run命令详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: docker run [OPTIONS] IMAGE[:TAG] [COMMAND] \t[ARG...]  </div><div class=\"line\">Run a command in a new container  </div><div class=\"line\">-a=map[]: 附加标准输入、输出或者错误输出  </div><div class=\"line\">-c=0: 共享CPU格式（相对重要）  </div><div class=\"line\">-cidfile=&quot;&quot;: 将容器的ID标识写入文件  </div><div class=\"line\">-d=false: 分离模式，在后台运行容器，并且打印出容器ID  </div><div class=\"line\">-e=[]:设置环境变量  </div><div class=\"line\">-h=&quot;&quot;: 容器的主机名称  </div><div class=\"line\">-i=false: 保持输入流开放即使没有附加输入流  </div><div class=\"line\">-privileged=false: 给容器扩展的权限  </div><div class=\"line\">-m=&quot;&quot;: 内存限制 (格式:&lt;number&gt;&lt;optional unit&gt;, unit单位 = b, k, m or g)  </div><div class=\"line\">-n=true: 允许镜像使用网络  </div><div class=\"line\">-p=[]: 匹配镜像内的网络端口号  </div><div class=\"line\">-rm=false:当容器退出时自动删除容器 (不能跟 -d一起使用)  </div><div class=\"line\">-t=false: 分配一个伪造的终端输入  </div><div class=\"line\">-u=&quot;&quot;: 用户名或者ID  </div><div class=\"line\">-dns=[]: 自定义容器的DNS服务器  </div><div class=\"line\">-v=[]: 创建一个挂载绑定：[host-dir]:[container-dir]:[rw|ro].如果容器目录丢失，docker会创建一个新的卷  </div><div class=\"line\">-volumes-from=&quot;&quot;: 挂载容器所有的卷  </div><div class=\"line\">-entrypoint=&quot;&quot;: 覆盖镜像设置默认的入口点  </div><div class=\"line\">-w=&quot;&quot;: 工作目录内的容器  </div><div class=\"line\">-lxc-conf=[]: 添加自定义-lxc-\tconf=&quot;lxc.cgroup.cpuset.cpus = 0,1&quot;</div><div class=\"line\">-sig-proxy=true: 代理接收所有进程信号(even in non-tty mode)  </div><div class=\"line\">-expose=[]: 让你主机没有开放的端口  </div><div class=\"line\">-link=&quot;&quot;: 连接到另一个容器(name:alias)  </div><div class=\"line\">-name=&quot;&quot;: 分配容器的名称，如果没有指定就会随机生成一个  </div><div class=\"line\">-P=false: Publish all exposed ports to thehost interfaces 公布所有显示的端口主机接口</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>##</p>\n<p>service docker start</p>\n<p>su -</p>\n<h2 id=\"docker-查询容器、镜像、日志\"><a href=\"#docker-查询容器、镜像、日志\" class=\"headerlink\" title=\"docker 查询容器、镜像、日志\"></a>docker 查询容器、镜像、日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker top &lt;container&gt; #显示容器内运行的进程   </div><div class=\"line\">docker images #查询所有的镜像，默认是最近创建的排在最上。  </div><div class=\"line\">docker ps #查看正在运行的容器  </div><div class=\"line\">docker ps -l #查看最后退出的容器的ID  </div><div class=\"line\">docker ps -a #查看所有的容器，包括退出的。  </div><div class=\"line\">docker logs &#123;容器ID|容器名称&#125; #查询某个容器的所有操作记录。  </div><div class=\"line\">docker logs -f &#123;容器ID|容器名称&#125; #实时查看容易的操作记录。</div></pre></td></tr></table></figure>\n<h2 id=\"docker-删除容器与镜像\"><a href=\"#docker-删除容器与镜像\" class=\"headerlink\" title=\"docker 删除容器与镜像\"></a>docker 删除容器与镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker rm$(docker ps -a -q)  #删除所有容器</div><div class=\"line\">\tdocker rm &lt;containerName or id&gt;  #删除单个容器</div><div class=\"line\"> \tdocker rmi id #删除单个容器</div><div class=\"line\">docker rmi$(docker images | grep none | awk &apos;$&#123;print $3&#125;&apos; | sort -r) #删除所有镜像</div></pre></td></tr></table></figure>\n<h2 id=\"启动停止容器\"><a href=\"#启动停止容器\" class=\"headerlink\" title=\"启动停止容器\"></a>启动停止容器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop &lt;容器名or ID&gt; #停止某个容器  </div><div class=\"line\">docker start &lt;容器名or ID&gt; #启动某个容器  </div><div class=\"line\">docker kill &lt;容器名or ID&gt; #杀掉某个容器</div></pre></td></tr></table></figure>\n<h2 id=\"docker-参数详解\"><a href=\"#docker-参数详解\" class=\"headerlink\" title=\"docker 参数详解\"></a>docker 参数详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker  </div><div class=\"line\">useage of docker  </div><div class=\"line\">-D 默认false 允许调试模式(debugmode)  </div><div class=\"line\">-H 默认是unix:///var/run/docker.sock tcp://[host[:port]]来绑定 或者unix://[/path/to/socket]来使用(二进制文件的时候)，当主机ip host=[0.0.0.0],(端口)port=[4243] 或者 path=[/var/run/docker.sock]是缺省值，做为默认值来使用  </div><div class=\"line\">-api-enable-cors 默认flase 允许CORS header远程api  </div><div class=\"line\">-b 默认是空，附加在已存在的网桥上，如果是用&apos;none&apos;参数，就禁用了容器的网络  </div><div class=\"line\">-bip 默认是空，使用提供的CIDR（ClasslessInter-Domain Routing-无类型域间选路）标记地址动态创建网桥(dcoker0),和-b参数冲突  </div><div class=\"line\">-d 默认false 允许进程模式(daemonmode)  </div><div class=\"line\">-dns 默认是空，使docker使用指定的DNS服务器  </div><div class=\"line\">-g 默认是&quot;/var/lib/docker&quot;:作为docker使用的根路径  </div><div class=\"line\">-icc 默认true，允许inter-container来通信  </div><div class=\"line\">-ip 默认&quot;0.0.0.0&quot;：绑定容器端口的默认Ip地址  </div><div class=\"line\">-iptables 默认true 禁用docker添加iptables规则  </div><div class=\"line\">-mtu 默认1500 : 设置容器网络传输的最大单元(mtu)  </div><div class=\"line\">-p 默认是/var/run/docker.pid进程pid使用的文件路径  </div><div class=\"line\">-r 默认是true 重启之前运行的容器  </div><div class=\"line\">-s 默认是空 ，这个是docker运行是使用一个指定的存储驱动器  </div><div class=\"line\">-v 默认false 打印版本信息和退出</div></pre></td></tr></table></figure>\n<h2 id=\"docker-run命令详解\"><a href=\"#docker-run命令详解\" class=\"headerlink\" title=\"docker run命令详解\"></a>docker run命令详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: docker run [OPTIONS] IMAGE[:TAG] [COMMAND] \t[ARG...]  </div><div class=\"line\">Run a command in a new container  </div><div class=\"line\">-a=map[]: 附加标准输入、输出或者错误输出  </div><div class=\"line\">-c=0: 共享CPU格式（相对重要）  </div><div class=\"line\">-cidfile=&quot;&quot;: 将容器的ID标识写入文件  </div><div class=\"line\">-d=false: 分离模式，在后台运行容器，并且打印出容器ID  </div><div class=\"line\">-e=[]:设置环境变量  </div><div class=\"line\">-h=&quot;&quot;: 容器的主机名称  </div><div class=\"line\">-i=false: 保持输入流开放即使没有附加输入流  </div><div class=\"line\">-privileged=false: 给容器扩展的权限  </div><div class=\"line\">-m=&quot;&quot;: 内存限制 (格式:&lt;number&gt;&lt;optional unit&gt;, unit单位 = b, k, m or g)  </div><div class=\"line\">-n=true: 允许镜像使用网络  </div><div class=\"line\">-p=[]: 匹配镜像内的网络端口号  </div><div class=\"line\">-rm=false:当容器退出时自动删除容器 (不能跟 -d一起使用)  </div><div class=\"line\">-t=false: 分配一个伪造的终端输入  </div><div class=\"line\">-u=&quot;&quot;: 用户名或者ID  </div><div class=\"line\">-dns=[]: 自定义容器的DNS服务器  </div><div class=\"line\">-v=[]: 创建一个挂载绑定：[host-dir]:[container-dir]:[rw|ro].如果容器目录丢失，docker会创建一个新的卷  </div><div class=\"line\">-volumes-from=&quot;&quot;: 挂载容器所有的卷  </div><div class=\"line\">-entrypoint=&quot;&quot;: 覆盖镜像设置默认的入口点  </div><div class=\"line\">-w=&quot;&quot;: 工作目录内的容器  </div><div class=\"line\">-lxc-conf=[]: 添加自定义-lxc-\tconf=&quot;lxc.cgroup.cpuset.cpus = 0,1&quot;</div><div class=\"line\">-sig-proxy=true: 代理接收所有进程信号(even in non-tty mode)  </div><div class=\"line\">-expose=[]: 让你主机没有开放的端口  </div><div class=\"line\">-link=&quot;&quot;: 连接到另一个容器(name:alias)  </div><div class=\"line\">-name=&quot;&quot;: 分配容器的名称，如果没有指定就会随机生成一个  </div><div class=\"line\">-P=false: Publish all exposed ports to thehost interfaces 公布所有显示的端口主机接口</div></pre></td></tr></table></figure>\n"},{"title":"在docker中搭建持续集成环境","date":"2016-11-30T10:47:28.000Z","_content":"\n### 目标\n\n新的提交到git服务后，持续集成系统(CI)自动在服务端重新编译、打包、发布、重启服务。\n\n### 工具\n\n**docker:** Docker version 1.10.3, build cb079f6-unsupported\n\n**jenkins:** 2.19.3\n\n**git:**\n\n### 环境\n\n**虚拟机：**VMware® Workstation 12 Pro\n**系  统：**centos 7\n\n### 提前准备\n\n<!--more-->\n\n安装 **docker**\n```\nyum install docker\n```\n```\ndocker -v\n```\n```\nservice docker start\n```\n\n#### 安装jenkins镜像\n\n```bash\ndocker pull jenkins\n```\njenkins需要java环境，通过docker安装省去了安装环境的麻烦。\n\n#### 创建jenkins容器\n\n```\ndocker run -d --name jenkins -p 8080:8080 -v ${pwd}/data:/var/jenkins_home jenkins\n```\n\n指定jenkins访问端口8080，数据卷挂载到宿主机上，浏览器访问 http://blog.stbui.com:8080\n根据页面提示查找初始密码，进入刚刚运行的容器\n```\ndocker exec -it d05 bash\n```\n```\ncat /var/jenkins_home/secrets/initialAdminPassword\n```\n返回的密码是：688fb319e597471fba2ab7e4cab72e38\n\n进入jenkins 向导页面......\n\n\n\n#### 部署nodejs项目\n\n插件安装\n。。。\n系统设置\n。。。\n\n访问docker服务器\n```\ncd /root/eastmoney/stock && \\\ndocker rm -f node-stbui-stock && \\\ndocker build -t node-stbui-stock . && \\\ndocker run -d -p 8000:8080 --name node-stbui-stock node-stbui-stock\n```\n","source":"_posts/docker/在docker中搭建持续集成环境.md","raw":"---\ntitle: 在docker中搭建持续集成环境\ndate: 2016-11-30 18:47:28\ncategories: docker\ntags: [docker, jenkins, git]\n---\n\n### 目标\n\n新的提交到git服务后，持续集成系统(CI)自动在服务端重新编译、打包、发布、重启服务。\n\n### 工具\n\n**docker:** Docker version 1.10.3, build cb079f6-unsupported\n\n**jenkins:** 2.19.3\n\n**git:**\n\n### 环境\n\n**虚拟机：**VMware® Workstation 12 Pro\n**系  统：**centos 7\n\n### 提前准备\n\n<!--more-->\n\n安装 **docker**\n```\nyum install docker\n```\n```\ndocker -v\n```\n```\nservice docker start\n```\n\n#### 安装jenkins镜像\n\n```bash\ndocker pull jenkins\n```\njenkins需要java环境，通过docker安装省去了安装环境的麻烦。\n\n#### 创建jenkins容器\n\n```\ndocker run -d --name jenkins -p 8080:8080 -v ${pwd}/data:/var/jenkins_home jenkins\n```\n\n指定jenkins访问端口8080，数据卷挂载到宿主机上，浏览器访问 http://blog.stbui.com:8080\n根据页面提示查找初始密码，进入刚刚运行的容器\n```\ndocker exec -it d05 bash\n```\n```\ncat /var/jenkins_home/secrets/initialAdminPassword\n```\n返回的密码是：688fb319e597471fba2ab7e4cab72e38\n\n进入jenkins 向导页面......\n\n\n\n#### 部署nodejs项目\n\n插件安装\n。。。\n系统设置\n。。。\n\n访问docker服务器\n```\ncd /root/eastmoney/stock && \\\ndocker rm -f node-stbui-stock && \\\ndocker build -t node-stbui-stock . && \\\ndocker run -d -p 8000:8080 --name node-stbui-stock node-stbui-stock\n```\n","slug":"docker/在docker中搭建持续集成环境","published":1,"updated":"2017-08-03T10:21:24.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fk001wnou9roys24m3","content":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>新的提交到git服务后，持续集成系统(CI)自动在服务端重新编译、打包、发布、重启服务。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p><strong>docker:</strong> Docker version 1.10.3, build cb079f6-unsupported</p>\n<p><strong>jenkins:</strong> 2.19.3</p>\n<p><strong>git:</strong></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p><strong>虚拟机：</strong>VMware® Workstation 12 Pro<br><strong>系  统：</strong>centos 7</p>\n<h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3><a id=\"more\"></a>\n<p>安装 <strong>docker</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install docker</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker start</div></pre></td></tr></table></figure>\n<h4 id=\"安装jenkins镜像\"><a href=\"#安装jenkins镜像\" class=\"headerlink\" title=\"安装jenkins镜像\"></a>安装jenkins镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull jenkins</div></pre></td></tr></table></figure>\n<p>jenkins需要java环境，通过docker安装省去了安装环境的麻烦。</p>\n<h4 id=\"创建jenkins容器\"><a href=\"#创建jenkins容器\" class=\"headerlink\" title=\"创建jenkins容器\"></a>创建jenkins容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d --name jenkins -p 8080:8080 -v $&#123;pwd&#125;/data:/var/jenkins_home jenkins</div></pre></td></tr></table></figure>\n<p>指定jenkins访问端口8080，数据卷挂载到宿主机上，浏览器访问 <a href=\"http://blog.stbui.com:8080\">http://blog.stbui.com:8080</a><br>根据页面提示查找初始密码，进入刚刚运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it d05 bash</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/jenkins_home/secrets/initialAdminPassword</div></pre></td></tr></table></figure>\n<p>返回的密码是：688fb319e597471fba2ab7e4cab72e38</p>\n<p>进入jenkins 向导页面……</p>\n<h4 id=\"部署nodejs项目\"><a href=\"#部署nodejs项目\" class=\"headerlink\" title=\"部署nodejs项目\"></a>部署nodejs项目</h4><p>插件安装<br>。。。<br>系统设置<br>。。。</p>\n<p>访问docker服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/eastmoney/stock &amp;&amp; \\</div><div class=\"line\">docker rm -f node-stbui-stock &amp;&amp; \\</div><div class=\"line\">docker build -t node-stbui-stock . &amp;&amp; \\</div><div class=\"line\">docker run -d -p 8000:8080 --name node-stbui-stock node-stbui-stock</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>新的提交到git服务后，持续集成系统(CI)自动在服务端重新编译、打包、发布、重启服务。</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p><strong>docker:</strong> Docker version 1.10.3, build cb079f6-unsupported</p>\n<p><strong>jenkins:</strong> 2.19.3</p>\n<p><strong>git:</strong></p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p><strong>虚拟机：</strong>VMware® Workstation 12 Pro<br><strong>系  统：</strong>centos 7</p>\n<h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3>","more":"<p>安装 <strong>docker</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install docker</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker start</div></pre></td></tr></table></figure>\n<h4 id=\"安装jenkins镜像\"><a href=\"#安装jenkins镜像\" class=\"headerlink\" title=\"安装jenkins镜像\"></a>安装jenkins镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull jenkins</div></pre></td></tr></table></figure>\n<p>jenkins需要java环境，通过docker安装省去了安装环境的麻烦。</p>\n<h4 id=\"创建jenkins容器\"><a href=\"#创建jenkins容器\" class=\"headerlink\" title=\"创建jenkins容器\"></a>创建jenkins容器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d --name jenkins -p 8080:8080 -v $&#123;pwd&#125;/data:/var/jenkins_home jenkins</div></pre></td></tr></table></figure>\n<p>指定jenkins访问端口8080，数据卷挂载到宿主机上，浏览器访问 <a href=\"http://blog.stbui.com:8080\">http://blog.stbui.com:8080</a><br>根据页面提示查找初始密码，进入刚刚运行的容器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it d05 bash</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /var/jenkins_home/secrets/initialAdminPassword</div></pre></td></tr></table></figure>\n<p>返回的密码是：688fb319e597471fba2ab7e4cab72e38</p>\n<p>进入jenkins 向导页面……</p>\n<h4 id=\"部署nodejs项目\"><a href=\"#部署nodejs项目\" class=\"headerlink\" title=\"部署nodejs项目\"></a>部署nodejs项目</h4><p>插件安装<br>。。。<br>系统设置<br>。。。</p>\n<p>访问docker服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /root/eastmoney/stock &amp;&amp; \\</div><div class=\"line\">docker rm -f node-stbui-stock &amp;&amp; \\</div><div class=\"line\">docker build -t node-stbui-stock . &amp;&amp; \\</div><div class=\"line\">docker run -d -p 8000:8080 --name node-stbui-stock node-stbui-stock</div></pre></td></tr></table></figure></p>"},{"title":"nginx在docker中应用","date":"2017-02-17T01:47:28.000Z","_content":"\n```\ndocker build -t stbui.stbui.com .\n\ndocker run -d -p 80:80 stbui.stbui.com\ndocker run -d -p 80:80 --name stbui.stbui.com stbui.stbui.com\n```\n\ndocker cp /root/stbui.stbui.com/nginx.conf ff0:/etc/nginx/conf.d/\n\n\n### 数据持久化\n\n\n```\ndocker run -p 80:80 -v /nginx/conf.d:/etc/nginx/conf.d -d nginx\ndocker run -d -p 80:80 -v `pwd`/ngin/conf.d:/etc/nginx/conf.d stbui.stbui.com\n```\n\n如果需要持久化日记数据\n```\ndocker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx nginx\n```\n在当前目录下创建logs目录，存放access.log和error.log\n\n\n```\ndocker exec -it e86 /bin/bash\n\n```\n\nDockerfile\n\n```\nFROM nginx:latest\n\nCOPY . /usr/share/nginx/html\n\nEXPOSE 80\n```","source":"_posts/docker/nginx.md","raw":"---\ntitle: nginx在docker中应用\ndate: 2017-02-17 09:47:28\ncategories: docker\ntags: [nginx, docker]\n---\n\n```\ndocker build -t stbui.stbui.com .\n\ndocker run -d -p 80:80 stbui.stbui.com\ndocker run -d -p 80:80 --name stbui.stbui.com stbui.stbui.com\n```\n\ndocker cp /root/stbui.stbui.com/nginx.conf ff0:/etc/nginx/conf.d/\n\n\n### 数据持久化\n\n\n```\ndocker run -p 80:80 -v /nginx/conf.d:/etc/nginx/conf.d -d nginx\ndocker run -d -p 80:80 -v `pwd`/ngin/conf.d:/etc/nginx/conf.d stbui.stbui.com\n```\n\n如果需要持久化日记数据\n```\ndocker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx nginx\n```\n在当前目录下创建logs目录，存放access.log和error.log\n\n\n```\ndocker exec -it e86 /bin/bash\n\n```\n\nDockerfile\n\n```\nFROM nginx:latest\n\nCOPY . /usr/share/nginx/html\n\nEXPOSE 80\n```","slug":"docker/nginx","published":1,"updated":"2017-08-03T10:21:24.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fl001xnou9yusrb3i1","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t stbui.stbui.com .</div><div class=\"line\"></div><div class=\"line\">docker run -d -p 80:80 stbui.stbui.com</div><div class=\"line\">docker run -d -p 80:80 --name stbui.stbui.com stbui.stbui.com</div></pre></td></tr></table></figure>\n<p>docker cp /root/stbui.stbui.com/nginx.conf ff0:/etc/nginx/conf.d/</p>\n<h3 id=\"数据持久化\"><a href=\"#数据持久化\" class=\"headerlink\" title=\"数据持久化\"></a>数据持久化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 80:80 -v /nginx/conf.d:/etc/nginx/conf.d -d nginx</div><div class=\"line\">docker run -d -p 80:80 -v `pwd`/ngin/conf.d:/etc/nginx/conf.d stbui.stbui.com</div></pre></td></tr></table></figure>\n<p>如果需要持久化日记数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx nginx</div></pre></td></tr></table></figure></p>\n<p>在当前目录下创建logs目录，存放access.log和error.log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it e86 /bin/bash</div></pre></td></tr></table></figure>\n<p>Dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM nginx:latest</div><div class=\"line\"></div><div class=\"line\">COPY . /usr/share/nginx/html</div><div class=\"line\"></div><div class=\"line\">EXPOSE 80</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker build -t stbui.stbui.com .</div><div class=\"line\"></div><div class=\"line\">docker run -d -p 80:80 stbui.stbui.com</div><div class=\"line\">docker run -d -p 80:80 --name stbui.stbui.com stbui.stbui.com</div></pre></td></tr></table></figure>\n<p>docker cp /root/stbui.stbui.com/nginx.conf ff0:/etc/nginx/conf.d/</p>\n<h3 id=\"数据持久化\"><a href=\"#数据持久化\" class=\"headerlink\" title=\"数据持久化\"></a>数据持久化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 80:80 -v /nginx/conf.d:/etc/nginx/conf.d -d nginx</div><div class=\"line\">docker run -d -p 80:80 -v `pwd`/ngin/conf.d:/etc/nginx/conf.d stbui.stbui.com</div></pre></td></tr></table></figure>\n<p>如果需要持久化日记数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it -p 80:80  -v `pwd`/logs:/var/log/nginx nginx</div></pre></td></tr></table></figure></p>\n<p>在当前目录下创建logs目录，存放access.log和error.log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker exec -it e86 /bin/bash</div></pre></td></tr></table></figure>\n<p>Dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM nginx:latest</div><div class=\"line\"></div><div class=\"line\">COPY . /usr/share/nginx/html</div><div class=\"line\"></div><div class=\"line\">EXPOSE 80</div></pre></td></tr></table></figure>"},{"title":"pandorabox tcpdump抓包","date":"2017-01-09T01:24:59.000Z","_content":"\n\n### 目的\n\n路由器上安装tcpdump抓包\n\n\n### 安装命令\n\n\n```\nopkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\n\nopkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\n```\n\n\n### tcpdump\n\n抓取HTTP包\n\n```\ntcpdump -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854\n\ntcpdump -XvvennSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854 -c 2000 -w http.cap\n\n```\n\n抓取HTTP Request Headers\n```\ntcpdump -n -S -s 0 -A 'tcp dst port 80' | grep -B3 -A10 \"GET /\"\n```\n\n\n### 源\n\nhttp://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\n\nhttp://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\n\n\n### 扩展\n\nhttp://linuxwiki.github.io/NetTools/tcpdump.html\n\nhttp://www.cnblogs.com/beer/p/4932146.html\n\nhttp://www.cnblogs.com/beer/p/4938427.html\n\nhttp://www.cnblogs.com/beer/p/4921066.html\n","source":"_posts/openwrt/pandorabox-tcpdump.md","raw":"\ntitle: pandorabox tcpdump抓包\ndate: 2017-01-09 09:24:59\ncategories: openwrt\ntags: [tcpdump, openwrt,pandorabox,hc5861]\n---\n\n\n### 目的\n\n路由器上安装tcpdump抓包\n\n\n### 安装命令\n\n\n```\nopkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\n\nopkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\n```\n\n\n### tcpdump\n\n抓取HTTP包\n\n```\ntcpdump -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854\n\ntcpdump -XvvennSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854 -c 2000 -w http.cap\n\n```\n\n抓取HTTP Request Headers\n```\ntcpdump -n -S -s 0 -A 'tcp dst port 80' | grep -B3 -A10 \"GET /\"\n```\n\n\n### 源\n\nhttp://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\n\nhttp://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\n\n\n### 扩展\n\nhttp://linuxwiki.github.io/NetTools/tcpdump.html\n\nhttp://www.cnblogs.com/beer/p/4932146.html\n\nhttp://www.cnblogs.com/beer/p/4938427.html\n\nhttp://www.cnblogs.com/beer/p/4921066.html\n","slug":"openwrt/pandorabox-tcpdump","published":1,"updated":"2017-08-03T10:21:24.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fl001ynou9zkitnhqf","content":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>路由器上安装tcpdump抓包</p>\n<h3 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk</div><div class=\"line\"></div><div class=\"line\">opkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk</div></pre></td></tr></table></figure>\n<h3 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h3><p>抓取HTTP包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854</div><div class=\"line\"></div><div class=\"line\">tcpdump -XvvennSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854 -c 2000 -w http.cap</div></pre></td></tr></table></figure>\n<p>抓取HTTP Request Headers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -n -S -s 0 -A &apos;tcp dst port 80&apos; | grep -B3 -A10 &quot;GET /&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"源\"><a href=\"#源\" class=\"headerlink\" title=\"源\"></a>源</h3><p><a href=\"http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk</a></p>\n<p><a href=\"http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk</a></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p><a href=\"http://linuxwiki.github.io/NetTools/tcpdump.html\" target=\"_blank\" rel=\"external\">http://linuxwiki.github.io/NetTools/tcpdump.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4932146.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4932146.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4938427.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4938427.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4921066.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4921066.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>路由器上安装tcpdump抓包</p>\n<h3 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">opkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk</div><div class=\"line\"></div><div class=\"line\">opkg install http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk</div></pre></td></tr></table></figure>\n<h3 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h3><p>抓取HTTP包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -XvvennSs 0 -i eth0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854</div><div class=\"line\"></div><div class=\"line\">tcpdump -XvvennSs 0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854 -c 2000 -w http.cap</div></pre></td></tr></table></figure>\n<p>抓取HTTP Request Headers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -n -S -s 0 -A &apos;tcp dst port 80&apos; | grep -B3 -A10 &quot;GET /&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"源\"><a href=\"#源\" class=\"headerlink\" title=\"源\"></a>源</h3><p><a href=\"http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/libpcap_1.5.3-1_ralink.ipk</a></p>\n<p><a href=\"http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base/tcpdump_4.5.1-4_ralink.ipk</a></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p><a href=\"http://linuxwiki.github.io/NetTools/tcpdump.html\" target=\"_blank\" rel=\"external\">http://linuxwiki.github.io/NetTools/tcpdump.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4932146.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4932146.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4938427.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4938427.html</a></p>\n<p><a href=\"http://www.cnblogs.com/beer/p/4921066.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/beer/p/4921066.html</a></p>\n"},{"title":"php","date":"2017-02-23T08:01:00.000Z","_content":"\n\nhttp://avnpc.com/pages/build-php-develop-env-by-docker","source":"_posts/docker/php.md","raw":"---\ntitle: php\ndate: 2017-02-23 16:01:00\ncategories: docker\ntags: [php, docker]\n---\n\n\nhttp://avnpc.com/pages/build-php-develop-env-by-docker","slug":"docker/php","published":1,"updated":"2017-08-03T10:21:24.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fn0021nou92c58lvbg","content":"<p><a href=\"http://avnpc.com/pages/build-php-develop-env-by-docker\" target=\"_blank\" rel=\"external\">http://avnpc.com/pages/build-php-develop-env-by-docker</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://avnpc.com/pages/build-php-develop-env-by-docker\" target=\"_blank\" rel=\"external\">http://avnpc.com/pages/build-php-develop-env-by-docker</a></p>\n"},{"title":"极路由3刷机过程","date":"2017-01-09T01:24:59.000Z","_content":"\n### 实现\n在选用的路由器上刷入pandorabox固件，可以自由扩展功能\n\n### 硬件\n\n路由器：极米3(智能双频路由器)\n型号：HC5861\n\n### 固件\n\npandorabox固件下载地址:\n[pandorabox-16-10-stable](http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin)\n\n\n### 准备工作\n\nssh：xshell\n\n**WinSCP**：它可以向路由器里面传输文件\n\n**Breed**：它是一款引导加载器，用它可以刷固件\n```\nhttps://breed.hackpascal.net/breed-mt7620-hiwifi-hc5861.bin\n```\n\n### 开通极路由的root权限\n没有root权限就无法刷机\n\n### 开始步骤\n\n<!-- more -->\n\n一、 SSH登录路由器\n路由器IP：192.168.1.1\n路由器用户名：root\n路由器密　码：admin\n\n二、下载固件到路由器\n```\ncd /tmp\n```\n```\nwget http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\n```\n\n三、刷入固件\n```\nsysupgrade -F -n PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\n```\n\n等待几分钟，会自动重启路由器\n\n四、验证\n\n访问：http://192.168.1.1\n输入默认用户名和密码\n用户名：root\n密码：admin\n\n\n### 常用插件\n\n一，无线审计 \nairodump-ng \nreaver \ntcpdump\nport-mirroring\n\n\n二，脱机下载\nthunder-xware（迅雷下载）\ntransmission\nAria2\n\n三，无线音响\nkmod-usb-audio\ninstall alsa-utils\nshairport\nMPDroid\n\n四，影印共享\nxmlrpc\ndlna\nAirplay\nsamba36-server\n\n五，部署服务器\nvsftpd\nlighttpd\nphp5-mod-apc\nmysql-server\n\n六：特殊拨号\nMentoHUST\nH3C 802.1x Client\nsxplugin\nnwan\n\n七，无线监控\nwebcam\nkmod-uѕb2\nkmod-video-uvc\nkmod-nlѕ-base\nkmod-usb-core\nkmod-i2c-core\nkmod-video-core\nkmod-input-core\nkmod-usb-ohci \nkmod-usb-video\nlibjpeg \nlibrt\nlibpthread\n\n八，翻越长城\nGoAgent [需要先安装python] \nopenvpn\nshadowsocks\ndnsmasq\n\n九，无线打印共享\nkmod-usb-printer\ninstall luci-app-p910nd\n\n\n### 参考资料\npandorabox镜像: http://downloads.pandorabox.com.cn/\nopenwrt镜像：https://downloads.openwrt.org/\nopenwrt固件：https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin\n支持OpenWrt无线路由器列表：https://wiki.openwrt.org/toh/start\n\n\npandorabox 发行版软件源\n```\nsrc/gz 16.10_base http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base\nsrc/gz 16.10_lafite http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/lafite\nsrc/gz 16.10_luci http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/luci\nsrc/gz 16.10_mtkdrv http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/mtkdrv\nsrc/gz 16.10_packages http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/packages\n```\n\n```\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/base\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/lafite\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/luci\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/mtkdrv\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/packages\n```\n","source":"_posts/openwrt/极路由3刷机过程.md","raw":"\ntitle: 极路由3刷机过程\ndate: 2017-01-09 09:24:59\ncategories: openwrt\ntags: [openwrt,pandorabox,hc5861]\n---\n\n### 实现\n在选用的路由器上刷入pandorabox固件，可以自由扩展功能\n\n### 硬件\n\n路由器：极米3(智能双频路由器)\n型号：HC5861\n\n### 固件\n\npandorabox固件下载地址:\n[pandorabox-16-10-stable](http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin)\n\n\n### 准备工作\n\nssh：xshell\n\n**WinSCP**：它可以向路由器里面传输文件\n\n**Breed**：它是一款引导加载器，用它可以刷固件\n```\nhttps://breed.hackpascal.net/breed-mt7620-hiwifi-hc5861.bin\n```\n\n### 开通极路由的root权限\n没有root权限就无法刷机\n\n### 开始步骤\n\n<!-- more -->\n\n一、 SSH登录路由器\n路由器IP：192.168.1.1\n路由器用户名：root\n路由器密　码：admin\n\n二、下载固件到路由器\n```\ncd /tmp\n```\n```\nwget http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\n```\n\n三、刷入固件\n```\nsysupgrade -F -n PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\n```\n\n等待几分钟，会自动重启路由器\n\n四、验证\n\n访问：http://192.168.1.1\n输入默认用户名和密码\n用户名：root\n密码：admin\n\n\n### 常用插件\n\n一，无线审计 \nairodump-ng \nreaver \ntcpdump\nport-mirroring\n\n\n二，脱机下载\nthunder-xware（迅雷下载）\ntransmission\nAria2\n\n三，无线音响\nkmod-usb-audio\ninstall alsa-utils\nshairport\nMPDroid\n\n四，影印共享\nxmlrpc\ndlna\nAirplay\nsamba36-server\n\n五，部署服务器\nvsftpd\nlighttpd\nphp5-mod-apc\nmysql-server\n\n六：特殊拨号\nMentoHUST\nH3C 802.1x Client\nsxplugin\nnwan\n\n七，无线监控\nwebcam\nkmod-uѕb2\nkmod-video-uvc\nkmod-nlѕ-base\nkmod-usb-core\nkmod-i2c-core\nkmod-video-core\nkmod-input-core\nkmod-usb-ohci \nkmod-usb-video\nlibjpeg \nlibrt\nlibpthread\n\n八，翻越长城\nGoAgent [需要先安装python] \nopenvpn\nshadowsocks\ndnsmasq\n\n九，无线打印共享\nkmod-usb-printer\ninstall luci-app-p910nd\n\n\n### 参考资料\npandorabox镜像: http://downloads.pandorabox.com.cn/\nopenwrt镜像：https://downloads.openwrt.org/\nopenwrt固件：https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin\n支持OpenWrt无线路由器列表：https://wiki.openwrt.org/toh/start\n\n\npandorabox 发行版软件源\n```\nsrc/gz 16.10_base http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base\nsrc/gz 16.10_lafite http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/lafite\nsrc/gz 16.10_luci http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/luci\nsrc/gz 16.10_mtkdrv http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/mtkdrv\nsrc/gz 16.10_packages http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/packages\n```\n\n```\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/base\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/lafite\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/luci\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/mtkdrv\nhttp://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/packages\n```\n","slug":"openwrt/极路由3刷机过程","published":1,"updated":"2017-08-03T10:21:24.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fo0023nou9lhm1re6n","content":"<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>在选用的路由器上刷入pandorabox固件，可以自由扩展功能</p>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>路由器：极米3(智能双频路由器)<br>型号：HC5861</p>\n<h3 id=\"固件\"><a href=\"#固件\" class=\"headerlink\" title=\"固件\"></a>固件</h3><p>pandorabox固件下载地址:<br><a href=\"http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">pandorabox-16-10-stable</a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>ssh：xshell</p>\n<p><strong>WinSCP</strong>：它可以向路由器里面传输文件</p>\n<p><strong>Breed</strong>：它是一款引导加载器，用它可以刷固件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://breed.hackpascal.net/breed-mt7620-hiwifi-hc5861.bin</div></pre></td></tr></table></figure></p>\n<h3 id=\"开通极路由的root权限\"><a href=\"#开通极路由的root权限\" class=\"headerlink\" title=\"开通极路由的root权限\"></a>开通极路由的root权限</h3><p>没有root权限就无法刷机</p>\n<h3 id=\"开始步骤\"><a href=\"#开始步骤\" class=\"headerlink\" title=\"开始步骤\"></a>开始步骤</h3><a id=\"more\"></a>\n<p>一、 SSH登录路由器<br>路由器IP：192.168.1.1<br>路由器用户名：root<br>路由器密　码：admin</p>\n<p>二、下载固件到路由器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /tmp</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin</div></pre></td></tr></table></figure>\n<p>三、刷入固件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysupgrade -F -n PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin</div></pre></td></tr></table></figure></p>\n<p>等待几分钟，会自动重启路由器</p>\n<p>四、验证</p>\n<p>访问：<a href=\"http://192.168.1.1\" target=\"_blank\" rel=\"external\">http://192.168.1.1</a><br>输入默认用户名和密码<br>用户名：root<br>密码：admin</p>\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><p>一，无线审计<br>airodump-ng<br>reaver<br>tcpdump<br>port-mirroring</p>\n<p>二，脱机下载<br>thunder-xware（迅雷下载）<br>transmission<br>Aria2</p>\n<p>三，无线音响<br>kmod-usb-audio<br>install alsa-utils<br>shairport<br>MPDroid</p>\n<p>四，影印共享<br>xmlrpc<br>dlna<br>Airplay<br>samba36-server</p>\n<p>五，部署服务器<br>vsftpd<br>lighttpd<br>php5-mod-apc<br>mysql-server</p>\n<p>六：特殊拨号<br>MentoHUST<br>H3C 802.1x Client<br>sxplugin<br>nwan</p>\n<p>七，无线监控<br>webcam<br>kmod-uѕb2<br>kmod-video-uvc<br>kmod-nlѕ-base<br>kmod-usb-core<br>kmod-i2c-core<br>kmod-video-core<br>kmod-input-core<br>kmod-usb-ohci<br>kmod-usb-video<br>libjpeg<br>librt<br>libpthread</p>\n<p>八，翻越长城<br>GoAgent [需要先安装python]<br>openvpn<br>shadowsocks<br>dnsmasq</p>\n<p>九，无线打印共享<br>kmod-usb-printer<br>install luci-app-p910nd</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>pandorabox镜像: <a href=\"http://downloads.pandorabox.com.cn/\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/</a><br>openwrt镜像：<a href=\"https://downloads.openwrt.org/\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/</a><br>openwrt固件：<a href=\"https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin</a><br>支持OpenWrt无线路由器列表：<a href=\"https://wiki.openwrt.org/toh/start\" target=\"_blank\" rel=\"external\">https://wiki.openwrt.org/toh/start</a></p>\n<p>pandorabox 发行版软件源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">src/gz 16.10_base http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base</div><div class=\"line\">src/gz 16.10_lafite http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/lafite</div><div class=\"line\">src/gz 16.10_luci http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/luci</div><div class=\"line\">src/gz 16.10_mtkdrv http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/mtkdrv</div><div class=\"line\">src/gz 16.10_packages http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/packages</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/base</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/lafite</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/luci</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/mtkdrv</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/packages</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>在选用的路由器上刷入pandorabox固件，可以自由扩展功能</p>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>路由器：极米3(智能双频路由器)<br>型号：HC5861</p>\n<h3 id=\"固件\"><a href=\"#固件\" class=\"headerlink\" title=\"固件\"></a>固件</h3><p>pandorabox固件下载地址:<br><a href=\"http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">pandorabox-16-10-stable</a></p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>ssh：xshell</p>\n<p><strong>WinSCP</strong>：它可以向路由器里面传输文件</p>\n<p><strong>Breed</strong>：它是一款引导加载器，用它可以刷固件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://breed.hackpascal.net/breed-mt7620-hiwifi-hc5861.bin</div></pre></td></tr></table></figure></p>\n<h3 id=\"开通极路由的root权限\"><a href=\"#开通极路由的root权限\" class=\"headerlink\" title=\"开通极路由的root权限\"></a>开通极路由的root权限</h3><p>没有root权限就无法刷机</p>\n<h3 id=\"开始步骤\"><a href=\"#开始步骤\" class=\"headerlink\" title=\"开始步骤\"></a>开始步骤</h3>","more":"<p>一、 SSH登录路由器<br>路由器IP：192.168.1.1<br>路由器用户名：root<br>路由器密　码：admin</p>\n<p>二、下载固件到路由器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /tmp</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin</div></pre></td></tr></table></figure>\n<p>三、刷入固件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysupgrade -F -n PandoraBox-ralink-mt7620-hc5861-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin</div></pre></td></tr></table></figure></p>\n<p>等待几分钟，会自动重启路由器</p>\n<p>四、验证</p>\n<p>访问：<a href=\"http://192.168.1.1\" target=\"_blank\" rel=\"external\">http://192.168.1.1</a><br>输入默认用户名和密码<br>用户名：root<br>密码：admin</p>\n<h3 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h3><p>一，无线审计<br>airodump-ng<br>reaver<br>tcpdump<br>port-mirroring</p>\n<p>二，脱机下载<br>thunder-xware（迅雷下载）<br>transmission<br>Aria2</p>\n<p>三，无线音响<br>kmod-usb-audio<br>install alsa-utils<br>shairport<br>MPDroid</p>\n<p>四，影印共享<br>xmlrpc<br>dlna<br>Airplay<br>samba36-server</p>\n<p>五，部署服务器<br>vsftpd<br>lighttpd<br>php5-mod-apc<br>mysql-server</p>\n<p>六：特殊拨号<br>MentoHUST<br>H3C 802.1x Client<br>sxplugin<br>nwan</p>\n<p>七，无线监控<br>webcam<br>kmod-uѕb2<br>kmod-video-uvc<br>kmod-nlѕ-base<br>kmod-usb-core<br>kmod-i2c-core<br>kmod-video-core<br>kmod-input-core<br>kmod-usb-ohci<br>kmod-usb-video<br>libjpeg<br>librt<br>libpthread</p>\n<p>八，翻越长城<br>GoAgent [需要先安装python]<br>openvpn<br>shadowsocks<br>dnsmasq</p>\n<p>九，无线打印共享<br>kmod-usb-printer<br>install luci-app-p910nd</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p>pandorabox镜像: <a href=\"http://downloads.pandorabox.com.cn/\" target=\"_blank\" rel=\"external\">http://downloads.pandorabox.com.cn/</a><br>openwrt镜像：<a href=\"https://downloads.openwrt.org/\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/</a><br>openwrt固件：<a href=\"https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin\" target=\"_blank\" rel=\"external\">https://downloads.openwrt.org/snapshots/trunk/ramips/mt7620/openwrt-ramips-mt7620-hc5861-squashfs-sysupgrade.bin</a><br>支持OpenWrt无线路由器列表：<a href=\"https://wiki.openwrt.org/toh/start\" target=\"_blank\" rel=\"external\">https://wiki.openwrt.org/toh/start</a></p>\n<p>pandorabox 发行版软件源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">src/gz 16.10_base http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/base</div><div class=\"line\">src/gz 16.10_lafite http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/lafite</div><div class=\"line\">src/gz 16.10_luci http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/luci</div><div class=\"line\">src/gz 16.10_mtkdrv http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/mtkdrv</div><div class=\"line\">src/gz 16.10_packages http://downloads.pandorabox.com.cn/pandorabox/packages/mt7620/packages/packages</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/base</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/lafite</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/luci</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/mtkdrv</div><div class=\"line\">http://openwrt.proxy.ustclug.org/snapshots/trunk/ramips/mt7620/packages/packages</div></pre></td></tr></table></figure>"},{"title":"nodejs 创建命令行脚本工具","date":"2016-12-02T00:34:23.000Z","_content":"\n### 环境\n\n系统：windows 10\nnode: v6.9.1\nnpm: v3.9.1\n\n### 前提准备\n\n安装 nodejs\n\n### 新建项目\n\n<!--more-->\n\n```\nnpm init\n```\n在我们项目中会创建一个新的package.josn文件\n根据引导初始化项目配置\n\n### 添加入口脚本\n```\n#!/usr/bin/env node\nconsole.log('hi stbui');\n```\n\n```\n\"bin\":{\n\t\"stbui\":\"index.js\"\n}\n```\n\n### 调试\n```\nnpm link\n```\n\n### 发布\n\n```\nnpm publish\n```\n\n\n## 解析命令行参数\n\n```\nnpm install --save commander\n```\n\n```\n#!/usr/bin/env node\nvar program = require('commander');\nprogram\n    .version(pkg.version, '-v, --version')\n    .usage('<command> [options]')\n    .on('--help', printHelp)\n    .on('-h', printHelp)\n    .parse(process.argv);\n```\n\n\n## 终端输出彩色化\n```\nnpm install --save chalk\n```\n","source":"_posts/node/nodejs 创建命令行脚本工具.md","raw":"---\ntitle: nodejs 创建命令行脚本工具\ndate: 2016-12-02 08:34:23\ncategories: node\ntags: [nodejs,npm]\n---\n\n### 环境\n\n系统：windows 10\nnode: v6.9.1\nnpm: v3.9.1\n\n### 前提准备\n\n安装 nodejs\n\n### 新建项目\n\n<!--more-->\n\n```\nnpm init\n```\n在我们项目中会创建一个新的package.josn文件\n根据引导初始化项目配置\n\n### 添加入口脚本\n```\n#!/usr/bin/env node\nconsole.log('hi stbui');\n```\n\n```\n\"bin\":{\n\t\"stbui\":\"index.js\"\n}\n```\n\n### 调试\n```\nnpm link\n```\n\n### 发布\n\n```\nnpm publish\n```\n\n\n## 解析命令行参数\n\n```\nnpm install --save commander\n```\n\n```\n#!/usr/bin/env node\nvar program = require('commander');\nprogram\n    .version(pkg.version, '-v, --version')\n    .usage('<command> [options]')\n    .on('--help', printHelp)\n    .on('-h', printHelp)\n    .parse(process.argv);\n```\n\n\n## 终端输出彩色化\n```\nnpm install --save chalk\n```\n","slug":"node/nodejs 创建命令行脚本工具","published":1,"updated":"2017-08-03T10:21:24.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fs0027nou937ox6ku9","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>系统：windows 10<br>node: v6.9.1<br>npm: v3.9.1</p>\n<h3 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h3><p>安装 nodejs</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>在我们项目中会创建一个新的package.josn文件<br>根据引导初始化项目配置</p>\n<h3 id=\"添加入口脚本\"><a href=\"#添加入口脚本\" class=\"headerlink\" title=\"添加入口脚本\"></a>添加入口脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env node</div><div class=\"line\">console.log(&apos;hi stbui&apos;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;bin&quot;:&#123;</div><div class=\"line\">\t&quot;stbui&quot;:&quot;index.js&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm link</div></pre></td></tr></table></figure>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<h2 id=\"解析命令行参数\"><a href=\"#解析命令行参数\" class=\"headerlink\" title=\"解析命令行参数\"></a>解析命令行参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save commander</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env node</div><div class=\"line\">var program = require(&apos;commander&apos;);</div><div class=\"line\">program</div><div class=\"line\">    .version(pkg.version, &apos;-v, --version&apos;)</div><div class=\"line\">    .usage(&apos;&lt;command&gt; [options]&apos;)</div><div class=\"line\">    .on(&apos;--help&apos;, printHelp)</div><div class=\"line\">    .on(&apos;-h&apos;, printHelp)</div><div class=\"line\">    .parse(process.argv);</div></pre></td></tr></table></figure>\n<h2 id=\"终端输出彩色化\"><a href=\"#终端输出彩色化\" class=\"headerlink\" title=\"终端输出彩色化\"></a>终端输出彩色化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save chalk</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>系统：windows 10<br>node: v6.9.1<br>npm: v3.9.1</p>\n<h3 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h3><p>安装 nodejs</p>\n<h3 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>在我们项目中会创建一个新的package.josn文件<br>根据引导初始化项目配置</p>\n<h3 id=\"添加入口脚本\"><a href=\"#添加入口脚本\" class=\"headerlink\" title=\"添加入口脚本\"></a>添加入口脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env node</div><div class=\"line\">console.log(&apos;hi stbui&apos;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;bin&quot;:&#123;</div><div class=\"line\">\t&quot;stbui&quot;:&quot;index.js&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm link</div></pre></td></tr></table></figure>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm publish</div></pre></td></tr></table></figure>\n<h2 id=\"解析命令行参数\"><a href=\"#解析命令行参数\" class=\"headerlink\" title=\"解析命令行参数\"></a>解析命令行参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save commander</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env node</div><div class=\"line\">var program = require(&apos;commander&apos;);</div><div class=\"line\">program</div><div class=\"line\">    .version(pkg.version, &apos;-v, --version&apos;)</div><div class=\"line\">    .usage(&apos;&lt;command&gt; [options]&apos;)</div><div class=\"line\">    .on(&apos;--help&apos;, printHelp)</div><div class=\"line\">    .on(&apos;-h&apos;, printHelp)</div><div class=\"line\">    .parse(process.argv);</div></pre></td></tr></table></figure>\n<h2 id=\"终端输出彩色化\"><a href=\"#终端输出彩色化\" class=\"headerlink\" title=\"终端输出彩色化\"></a>终端输出彩色化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save chalk</div></pre></td></tr></table></figure>"},{"title":"npm镜像","date":"2016-11-09T04:33:25.000Z","_content":"\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n\n### 临时使用\n```\nnpm --registry https://registry.npm.taobao.org install stbui\n```\n\n### 持久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n\n```\n\n配置后可通过下面方式来验证是否成功\n```\nnpm config get registry\n```\n或\n```\nnpm info stbui\n```\n\n### 通过cnpm使用\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install stbui\n```\n","source":"_posts/node/npm镜像.md","raw":"title: npm镜像\ndate: 2016-11-09 12:33:25\ntags: [npm]\n---\n\n## 国内优秀npm镜像\n\n### 淘宝npm镜像\n\n- 搜索地址：http://npm.taobao.org/\n- registry地址：http://registry.npm.taobao.org/\n\n### cnpmjs镜像\n\n- 搜索地址：http://cnpmjs.org/\n- registry地址：http://r.cnpmjs.org/\n\n## 如何使用\n\n### 临时使用\n```\nnpm --registry https://registry.npm.taobao.org install stbui\n```\n\n### 持久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n\n```\n\n配置后可通过下面方式来验证是否成功\n```\nnpm config get registry\n```\n或\n```\nnpm info stbui\n```\n\n### 通过cnpm使用\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n// 使用\ncnpm install stbui\n```\n","slug":"node/npm镜像","published":1,"updated":"2017-08-03T10:21:24.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96ft002anou9xe2n23fd","content":"<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm --registry https://registry.npm.taobao.org install stbui</div></pre></td></tr></table></figure>\n<h3 id=\"持久使用\"><a href=\"#持久使用\" class=\"headerlink\" title=\"持久使用\"></a>持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>配置后可通过下面方式来验证是否成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm info stbui</div></pre></td></tr></table></figure></p>\n<h3 id=\"通过cnpm使用\"><a href=\"#通过cnpm使用\" class=\"headerlink\" title=\"通过cnpm使用\"></a>通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 使用</div><div class=\"line\">cnpm install stbui</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"国内优秀npm镜像\"><a href=\"#国内优秀npm镜像\" class=\"headerlink\" title=\"国内优秀npm镜像\"></a>国内优秀npm镜像</h2><h3 id=\"淘宝npm镜像\"><a href=\"#淘宝npm镜像\" class=\"headerlink\" title=\"淘宝npm镜像\"></a>淘宝npm镜像</h3><ul>\n<li>搜索地址：<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>registry地址：<a href=\"http://registry.npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"cnpmjs镜像\"><a href=\"#cnpmjs镜像\" class=\"headerlink\" title=\"cnpmjs镜像\"></a>cnpmjs镜像</h3><ul>\n<li>搜索地址：<a href=\"http://cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://cnpmjs.org/</a></li>\n<li>registry地址：<a href=\"http://r.cnpmjs.org/\" target=\"_blank\" rel=\"external\">http://r.cnpmjs.org/</a></li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"临时使用\"><a href=\"#临时使用\" class=\"headerlink\" title=\"临时使用\"></a>临时使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm --registry https://registry.npm.taobao.org install stbui</div></pre></td></tr></table></figure>\n<h3 id=\"持久使用\"><a href=\"#持久使用\" class=\"headerlink\" title=\"持久使用\"></a>持久使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>配置后可通过下面方式来验证是否成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm info stbui</div></pre></td></tr></table></figure></p>\n<h3 id=\"通过cnpm使用\"><a href=\"#通过cnpm使用\" class=\"headerlink\" title=\"通过cnpm使用\"></a>通过cnpm使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"></div><div class=\"line\">// 使用</div><div class=\"line\">cnpm install stbui</div></pre></td></tr></table></figure>\n"},{"title":"React-Native开发指南","date":"2015-12-07T14:38:48.000Z","_content":"### 一、前言\n介绍ReactNative开发整个流程步骤\n\n### 二、环境配置\n（1）电脑：一台Mac（OSX）\n（2）调试工具：Xcode，建议在Xcode 6.3以上版本\n（3）安装node.js：https://nodejs.org/download/\n（4）安装brew：\n（4.1）安装watchman\n（4.2）安装flow\n安装上述步骤，环境已经配置好了。\n<!-- more -->\n### 三、Hello, React-Native\n现在我们需要创建项目，按照下面的步骤：\n打开终端\n安装命令行工具：\n``` bash\nsudo npm install -g react-native-cli\n```\n创建新项目：\n``` bash\nreact-native init HelloWorld\n```\n找到刚创建的HelloWorld项目文件夹，双击HelloWorld.xcodeproj将会在Xcode中打开项目。（xcodeproj是Xocde的项目文件）\n在Xcode中，使用快捷键cmd＋R即可启动项目。\n启动完成后，你会看到IOS模拟器，具体效果如下，说明你创建项目成功了。\n![HelloWorld](pic/1.png)\n\n### 四、修改HelloWorld\n\n### 五、恭喜你","source":"_posts/react/React-Native开发指南.md","raw":"title: React-Native开发指南\ndate: 2015-12-07 22:38:48\ntags: ReactNative\n---\n### 一、前言\n介绍ReactNative开发整个流程步骤\n\n### 二、环境配置\n（1）电脑：一台Mac（OSX）\n（2）调试工具：Xcode，建议在Xcode 6.3以上版本\n（3）安装node.js：https://nodejs.org/download/\n（4）安装brew：\n（4.1）安装watchman\n（4.2）安装flow\n安装上述步骤，环境已经配置好了。\n<!-- more -->\n### 三、Hello, React-Native\n现在我们需要创建项目，按照下面的步骤：\n打开终端\n安装命令行工具：\n``` bash\nsudo npm install -g react-native-cli\n```\n创建新项目：\n``` bash\nreact-native init HelloWorld\n```\n找到刚创建的HelloWorld项目文件夹，双击HelloWorld.xcodeproj将会在Xcode中打开项目。（xcodeproj是Xocde的项目文件）\n在Xcode中，使用快捷键cmd＋R即可启动项目。\n启动完成后，你会看到IOS模拟器，具体效果如下，说明你创建项目成功了。\n![HelloWorld](pic/1.png)\n\n### 四、修改HelloWorld\n\n### 五、恭喜你","slug":"react/React-Native开发指南","published":1,"updated":"2017-08-03T10:21:24.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fv002fnou9qr17ma2w","content":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>介绍ReactNative开发整个流程步骤</p>\n<h3 id=\"二、环境配置\"><a href=\"#二、环境配置\" class=\"headerlink\" title=\"二、环境配置\"></a>二、环境配置</h3><p>（1）电脑：一台Mac（OSX）<br>（2）调试工具：Xcode，建议在Xcode 6.3以上版本<br>（3）安装node.js：<a href=\"https://nodejs.org/download/\" target=\"_blank\" rel=\"external\">https://nodejs.org/download/</a><br>（4）安装brew：<br>（4.1）安装watchman<br>（4.2）安装flow<br>安装上述步骤，环境已经配置好了。<br><a id=\"more\"></a></p>\n<h3 id=\"三、Hello-React-Native\"><a href=\"#三、Hello-React-Native\" class=\"headerlink\" title=\"三、Hello, React-Native\"></a>三、Hello, React-Native</h3><p>现在我们需要创建项目，按照下面的步骤：<br>打开终端<br>安装命令行工具：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install -g react-native-cli</div></pre></td></tr></table></figure></p>\n<p>创建新项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init HelloWorld</div></pre></td></tr></table></figure></p>\n<p>找到刚创建的HelloWorld项目文件夹，双击HelloWorld.xcodeproj将会在Xcode中打开项目。（xcodeproj是Xocde的项目文件）<br>在Xcode中，使用快捷键cmd＋R即可启动项目。<br>启动完成后，你会看到IOS模拟器，具体效果如下，说明你创建项目成功了。<br><img src=\"pic/1.png\" alt=\"HelloWorld\"></p>\n<h3 id=\"四、修改HelloWorld\"><a href=\"#四、修改HelloWorld\" class=\"headerlink\" title=\"四、修改HelloWorld\"></a>四、修改HelloWorld</h3><h3 id=\"五、恭喜你\"><a href=\"#五、恭喜你\" class=\"headerlink\" title=\"五、恭喜你\"></a>五、恭喜你</h3>","site":{"data":{}},"excerpt":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><p>介绍ReactNative开发整个流程步骤</p>\n<h3 id=\"二、环境配置\"><a href=\"#二、环境配置\" class=\"headerlink\" title=\"二、环境配置\"></a>二、环境配置</h3><p>（1）电脑：一台Mac（OSX）<br>（2）调试工具：Xcode，建议在Xcode 6.3以上版本<br>（3）安装node.js：<a href=\"https://nodejs.org/download/\" target=\"_blank\" rel=\"external\">https://nodejs.org/download/</a><br>（4）安装brew：<br>（4.1）安装watchman<br>（4.2）安装flow<br>安装上述步骤，环境已经配置好了。<br>","more":"</p>\n<h3 id=\"三、Hello-React-Native\"><a href=\"#三、Hello-React-Native\" class=\"headerlink\" title=\"三、Hello, React-Native\"></a>三、Hello, React-Native</h3><p>现在我们需要创建项目，按照下面的步骤：<br>打开终端<br>安装命令行工具：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install -g react-native-cli</div></pre></td></tr></table></figure></p>\n<p>创建新项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init HelloWorld</div></pre></td></tr></table></figure></p>\n<p>找到刚创建的HelloWorld项目文件夹，双击HelloWorld.xcodeproj将会在Xcode中打开项目。（xcodeproj是Xocde的项目文件）<br>在Xcode中，使用快捷键cmd＋R即可启动项目。<br>启动完成后，你会看到IOS模拟器，具体效果如下，说明你创建项目成功了。<br><img src=\"pic/1.png\" alt=\"HelloWorld\"></p>\n<h3 id=\"四、修改HelloWorld\"><a href=\"#四、修改HelloWorld\" class=\"headerlink\" title=\"四、修改HelloWorld\"></a>四、修改HelloWorld</h3><h3 id=\"五、恭喜你\"><a href=\"#五、恭喜你\" class=\"headerlink\" title=\"五、恭喜你\"></a>五、恭喜你</h3>"},{"title":"开发专属自己的前端打包工具","date":"2016-10-20T04:54:12.000Z","_content":"\n在前端领域开发中，少不了打包工具的使用，常见的工具就有：`rollup`、`webpack`、`fis`、`grunt`、`gulp`等等，都是前端工程师的好助手，为此爱折腾的你是否也想造轮子呢。\n\n<!--more-->\n\n涉及技术要点\n- [x] npm\n- [x] webpack\n- [x] nodejs\n\n## 前提准备\n\n\n## 代码实现\n\n\n## 发布与验证\n\n\n## 扩展\n\n\n## 参考资料","source":"_posts/node/refactor.md","raw":"---\ntitle: 开发专属自己的前端打包工具\ndate: 2016-10-20 12:54:12\ntags:\n---\n\n在前端领域开发中，少不了打包工具的使用，常见的工具就有：`rollup`、`webpack`、`fis`、`grunt`、`gulp`等等，都是前端工程师的好助手，为此爱折腾的你是否也想造轮子呢。\n\n<!--more-->\n\n涉及技术要点\n- [x] npm\n- [x] webpack\n- [x] nodejs\n\n## 前提准备\n\n\n## 代码实现\n\n\n## 发布与验证\n\n\n## 扩展\n\n\n## 参考资料","slug":"node/refactor","published":1,"updated":"2017-08-03T10:21:24.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fx002inou9nhinl7mp","content":"<p>在前端领域开发中，少不了打包工具的使用，常见的工具就有：<code>rollup</code>、<code>webpack</code>、<code>fis</code>、<code>grunt</code>、<code>gulp</code>等等，都是前端工程师的好助手，为此爱折腾的你是否也想造轮子呢。</p>\n<a id=\"more\"></a>\n<p>涉及技术要点</p>\n<ul>\n<li>[x] npm</li>\n<li>[x] webpack</li>\n<li>[x] nodejs</li>\n</ul>\n<h2 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h2><h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h2 id=\"发布与验证\"><a href=\"#发布与验证\" class=\"headerlink\" title=\"发布与验证\"></a>发布与验证</h2><h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2>","site":{"data":{}},"excerpt":"<p>在前端领域开发中，少不了打包工具的使用，常见的工具就有：<code>rollup</code>、<code>webpack</code>、<code>fis</code>、<code>grunt</code>、<code>gulp</code>等等，都是前端工程师的好助手，为此爱折腾的你是否也想造轮子呢。</p>","more":"<p>涉及技术要点</p>\n<ul>\n<li>[x] npm</li>\n<li>[x] webpack</li>\n<li>[x] nodejs</li>\n</ul>\n<h2 id=\"前提准备\"><a href=\"#前提准备\" class=\"headerlink\" title=\"前提准备\"></a>前提准备</h2><h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h2 id=\"发布与验证\"><a href=\"#发布与验证\" class=\"headerlink\" title=\"发布与验证\"></a>发布与验证</h2><h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2>"},{"title":"React 资源","date":"2015-12-10T14:41:59.000Z","_content":"\nReact Flux架构简介\nhttps://github.com/kuitos/kuitos.github.io/issues/27\n\n\nMock Server\nhttps://github.com/kuitos/json-mock-server\nhttps://github.com/kuitos/json-mock-server\n\n纯ES6实现的工具集\nhttps://github.com/kuitos/es6-utils\n\nGulp新手入门教程\nhttp://www.w3ctrain.com/2015/12/22/gulp-for-beginners/\n\n\n//////////////\ngit\n\n\nhttp://segmentfault.com/a/1190000004177660\n\nTodoList-as-redux-demo\nhttps://github.com/TongchengQiu/TodoList-as-redux-demo\n\n类似jquery\nhttps://github.com/drduan/minggeJS\ngridster.js\nhttp://gridster.net/\n一款用于搭建简单的可拖拽网格化布局的jQuery插件。\n\n\ndoc\n\nhttp://http2-explained.haxx.se/content/zh/\n\n\nnode\n\nhttps://github.com/doramart/DoraCMS\n\nhttp://blog.fens.me/series-nodejs/\n\n\n抛弃jQuery，拥抱原生JavaScript\nhttps://github.com/camsong/blog/issues/\n测试链接：http://jsperf.com/jquery-vs-native-api/3\n\nhttps://github.com/oneuijs/You-Dont-Need-jQuery\nhttps://github.com/oneuijs/oui-dom-utils\nhttps://github.com/drduan/minggeJS\nhttps://github.com/phodal/lettuce\n\n\n\nhttp://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/\n\nhttp://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html\n\n\n文档教程\nhttps://github.com/nimojs/gulp-book\n\n\n编码规范\n百度 JavaScript编码规范 - ESNext补充篇\nhttps://github.com/ecomfe/spec/blob/master/es-next-style-guide.md\n\nES6\nhttp://gank.io/post/564151c1f1df1210001c9161","source":"_posts/react/myfav.md","raw":"title: React 资源\ndate: 2015-12-10 22:41:59\ntags: React\n---\n\nReact Flux架构简介\nhttps://github.com/kuitos/kuitos.github.io/issues/27\n\n\nMock Server\nhttps://github.com/kuitos/json-mock-server\nhttps://github.com/kuitos/json-mock-server\n\n纯ES6实现的工具集\nhttps://github.com/kuitos/es6-utils\n\nGulp新手入门教程\nhttp://www.w3ctrain.com/2015/12/22/gulp-for-beginners/\n\n\n//////////////\ngit\n\n\nhttp://segmentfault.com/a/1190000004177660\n\nTodoList-as-redux-demo\nhttps://github.com/TongchengQiu/TodoList-as-redux-demo\n\n类似jquery\nhttps://github.com/drduan/minggeJS\ngridster.js\nhttp://gridster.net/\n一款用于搭建简单的可拖拽网格化布局的jQuery插件。\n\n\ndoc\n\nhttp://http2-explained.haxx.se/content/zh/\n\n\nnode\n\nhttps://github.com/doramart/DoraCMS\n\nhttp://blog.fens.me/series-nodejs/\n\n\n抛弃jQuery，拥抱原生JavaScript\nhttps://github.com/camsong/blog/issues/\n测试链接：http://jsperf.com/jquery-vs-native-api/3\n\nhttps://github.com/oneuijs/You-Dont-Need-jQuery\nhttps://github.com/oneuijs/oui-dom-utils\nhttps://github.com/drduan/minggeJS\nhttps://github.com/phodal/lettuce\n\n\n\nhttp://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/\n\nhttp://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html\n\n\n文档教程\nhttps://github.com/nimojs/gulp-book\n\n\n编码规范\n百度 JavaScript编码规范 - ESNext补充篇\nhttps://github.com/ecomfe/spec/blob/master/es-next-style-guide.md\n\nES6\nhttp://gank.io/post/564151c1f1df1210001c9161","slug":"react/myfav","published":1,"updated":"2017-08-03T10:21:24.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96fz002mnou9lwr3bxb2","content":"<p>React Flux架构简介<br><a href=\"https://github.com/kuitos/kuitos.github.io/issues/27\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/kuitos.github.io/issues/27</a></p>\n<p>Mock Server<br><a href=\"https://github.com/kuitos/json-mock-server\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/json-mock-server</a><br><a href=\"https://github.com/kuitos/json-mock-server\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/json-mock-server</a></p>\n<p>纯ES6实现的工具集<br><a href=\"https://github.com/kuitos/es6-utils\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/es6-utils</a></p>\n<p>Gulp新手入门教程<br><a href=\"http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/\" target=\"_blank\" rel=\"external\">http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/</a></p>\n<p>//////////////<br>git</p>\n<p><a href=\"http://segmentfault.com/a/1190000004177660\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000004177660</a></p>\n<p>TodoList-as-redux-demo<br><a href=\"https://github.com/TongchengQiu/TodoList-as-redux-demo\" target=\"_blank\" rel=\"external\">https://github.com/TongchengQiu/TodoList-as-redux-demo</a></p>\n<p>类似jquery<br><a href=\"https://github.com/drduan/minggeJS\" target=\"_blank\" rel=\"external\">https://github.com/drduan/minggeJS</a><br>gridster.js<br><a href=\"http://gridster.net/\" target=\"_blank\" rel=\"external\">http://gridster.net/</a><br>一款用于搭建简单的可拖拽网格化布局的jQuery插件。</p>\n<p>doc</p>\n<p><a href=\"http://http2-explained.haxx.se/content/zh/\" target=\"_blank\" rel=\"external\">http://http2-explained.haxx.se/content/zh/</a></p>\n<p>node</p>\n<p><a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" rel=\"external\">https://github.com/doramart/DoraCMS</a></p>\n<p><a href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/series-nodejs/</a></p>\n<p>抛弃jQuery，拥抱原生JavaScript<br><a href=\"https://github.com/camsong/blog/issues/\" target=\"_blank\" rel=\"external\">https://github.com/camsong/blog/issues/</a><br>测试链接：<a href=\"http://jsperf.com/jquery-vs-native-api/3\" target=\"_blank\" rel=\"external\">http://jsperf.com/jquery-vs-native-api/3</a></p>\n<p><a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery\" target=\"_blank\" rel=\"external\">https://github.com/oneuijs/You-Dont-Need-jQuery</a><br><a href=\"https://github.com/oneuijs/oui-dom-utils\" target=\"_blank\" rel=\"external\">https://github.com/oneuijs/oui-dom-utils</a><br><a href=\"https://github.com/drduan/minggeJS\" target=\"_blank\" rel=\"external\">https://github.com/drduan/minggeJS</a><br><a href=\"https://github.com/phodal/lettuce\" target=\"_blank\" rel=\"external\">https://github.com/phodal/lettuce</a></p>\n<p><a href=\"http://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/\" target=\"_blank\" rel=\"external\">http://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/</a></p>\n<p><a href=\"http://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html\" target=\"_blank\" rel=\"external\">http://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html</a></p>\n<p>文档教程<br><a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"external\">https://github.com/nimojs/gulp-book</a></p>\n<p>编码规范<br>百度 JavaScript编码规范 - ESNext补充篇<br><a href=\"https://github.com/ecomfe/spec/blob/master/es-next-style-guide.md\" target=\"_blank\" rel=\"external\">https://github.com/ecomfe/spec/blob/master/es-next-style-guide.md</a></p>\n<p>ES6<br><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">http://gank.io/post/564151c1f1df1210001c9161</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>React Flux架构简介<br><a href=\"https://github.com/kuitos/kuitos.github.io/issues/27\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/kuitos.github.io/issues/27</a></p>\n<p>Mock Server<br><a href=\"https://github.com/kuitos/json-mock-server\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/json-mock-server</a><br><a href=\"https://github.com/kuitos/json-mock-server\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/json-mock-server</a></p>\n<p>纯ES6实现的工具集<br><a href=\"https://github.com/kuitos/es6-utils\" target=\"_blank\" rel=\"external\">https://github.com/kuitos/es6-utils</a></p>\n<p>Gulp新手入门教程<br><a href=\"http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/\" target=\"_blank\" rel=\"external\">http://www.w3ctrain.com/2015/12/22/gulp-for-beginners/</a></p>\n<p>//////////////<br>git</p>\n<p><a href=\"http://segmentfault.com/a/1190000004177660\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000004177660</a></p>\n<p>TodoList-as-redux-demo<br><a href=\"https://github.com/TongchengQiu/TodoList-as-redux-demo\" target=\"_blank\" rel=\"external\">https://github.com/TongchengQiu/TodoList-as-redux-demo</a></p>\n<p>类似jquery<br><a href=\"https://github.com/drduan/minggeJS\" target=\"_blank\" rel=\"external\">https://github.com/drduan/minggeJS</a><br>gridster.js<br><a href=\"http://gridster.net/\" target=\"_blank\" rel=\"external\">http://gridster.net/</a><br>一款用于搭建简单的可拖拽网格化布局的jQuery插件。</p>\n<p>doc</p>\n<p><a href=\"http://http2-explained.haxx.se/content/zh/\" target=\"_blank\" rel=\"external\">http://http2-explained.haxx.se/content/zh/</a></p>\n<p>node</p>\n<p><a href=\"https://github.com/doramart/DoraCMS\" target=\"_blank\" rel=\"external\">https://github.com/doramart/DoraCMS</a></p>\n<p><a href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\" rel=\"external\">http://blog.fens.me/series-nodejs/</a></p>\n<p>抛弃jQuery，拥抱原生JavaScript<br><a href=\"https://github.com/camsong/blog/issues/\" target=\"_blank\" rel=\"external\">https://github.com/camsong/blog/issues/</a><br>测试链接：<a href=\"http://jsperf.com/jquery-vs-native-api/3\" target=\"_blank\" rel=\"external\">http://jsperf.com/jquery-vs-native-api/3</a></p>\n<p><a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery\" target=\"_blank\" rel=\"external\">https://github.com/oneuijs/You-Dont-Need-jQuery</a><br><a href=\"https://github.com/oneuijs/oui-dom-utils\" target=\"_blank\" rel=\"external\">https://github.com/oneuijs/oui-dom-utils</a><br><a href=\"https://github.com/drduan/minggeJS\" target=\"_blank\" rel=\"external\">https://github.com/drduan/minggeJS</a><br><a href=\"https://github.com/phodal/lettuce\" target=\"_blank\" rel=\"external\">https://github.com/phodal/lettuce</a></p>\n<p><a href=\"http://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/\" target=\"_blank\" rel=\"external\">http://gold.xitu.io/?spm=a26qs.7821685.0.0.RfCPe7#/</a></p>\n<p><a href=\"http://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html\" target=\"_blank\" rel=\"external\">http://zhibimo.com/read/xiaolai/growth/the-startup-of-you.html</a></p>\n<p>文档教程<br><a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"external\">https://github.com/nimojs/gulp-book</a></p>\n<p>编码规范<br>百度 JavaScript编码规范 - ESNext补充篇<br><a href=\"https://github.com/ecomfe/spec/blob/master/es-next-style-guide.md\" target=\"_blank\" rel=\"external\">https://github.com/ecomfe/spec/blob/master/es-next-style-guide.md</a></p>\n<p>ES6<br><a href=\"http://gank.io/post/564151c1f1df1210001c9161\" target=\"_blank\" rel=\"external\">http://gank.io/post/564151c1f1df1210001c9161</a></p>\n"},{"title":"Shadowsocks服务安装","date":"2017-01-09T06:33:10.000Z","_content":"\n### 环境\n\n系统：\nShadowsocks 版本：\n\n### 安装\n\n\n### 验证\n\n\n### 参考资料\n","source":"_posts/react/shadownsocks-install.md","raw":"---\ntitle: Shadowsocks服务安装\ndate: 2017-01-09 14:33:10\ntags: [代理]\n---\n\n### 环境\n\n系统：\nShadowsocks 版本：\n\n### 安装\n\n\n### 验证\n\n\n### 参考资料\n","slug":"react/shadownsocks-install","published":1,"updated":"2017-08-03T10:21:24.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5wd96g0002pnou9dqr0bpia","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>系统：<br>Shadowsocks 版本：</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>系统：<br>Shadowsocks 版本：</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5wd96dn000knou9gphpld01","category_id":"cj5wd96dp000mnou9md14o9vp","_id":"cj5wd96du000vnou9470xbkaw"},{"post_id":"cj5wd96dp000nnou9r71xo0gd","category_id":"cj5wd96dt000snou9jk5blrkd","_id":"cj5wd96dz0011nou9aakpme52"},{"post_id":"cj5wd96dv000wnou9lb9ylte1","category_id":"cj5wd96dy000znou9p2dvy85v","_id":"cj5wd96e10018nou9qcidg3c4"},{"post_id":"cj5wd96fl001xnou9yusrb3i1","category_id":"cj5wd96fj001unou94v3tdfvh","_id":"cj5wd96fo0022nou9931qbsp7"},{"post_id":"cj5wd96fe001snou9bjlw9bpw","category_id":"cj5wd96fj001unou94v3tdfvh","_id":"cj5wd96fr0026nou9piz8isc3"},{"post_id":"cj5wd96fl001ynou9zkitnhqf","category_id":"cj5wd96dp000mnou9md14o9vp","_id":"cj5wd96ft0029nou95j2g9dfz"},{"post_id":"cj5wd96fn0021nou92c58lvbg","category_id":"cj5wd96fj001unou94v3tdfvh","_id":"cj5wd96fv002enou9pd8t8o68"},{"post_id":"cj5wd96fi001tnou9wihhones","category_id":"cj5wd96fj001unou94v3tdfvh","_id":"cj5wd96fx002hnou9e0ncesok"},{"post_id":"cj5wd96fo0023nou9lhm1re6n","category_id":"cj5wd96dp000mnou9md14o9vp","_id":"cj5wd96fz002lnou9ri4qvfhl"},{"post_id":"cj5wd96fk001wnou9roys24m3","category_id":"cj5wd96fj001unou94v3tdfvh","_id":"cj5wd96g0002onou99zyy92iq"},{"post_id":"cj5wd96fs0027nou937ox6ku9","category_id":"cj5wd96fv002dnou9bnef0fog","_id":"cj5wd96g1002qnou9uo1424d2"}],"PostTag":[{"post_id":"cj5wd96dg000hnou9ufw8hrfb","tag_id":"cj5wd96dj000jnou9l6n9jtuz","_id":"cj5wd96dq000pnou9l2u7a76v"},{"post_id":"cj5wd96dn000knou9gphpld01","tag_id":"cj5wd96dq000onou97d6isoe0","_id":"cj5wd96e10014nou9ecinuil6"},{"post_id":"cj5wd96dn000knou9gphpld01","tag_id":"cj5wd96dt000tnou9lx731ety","_id":"cj5wd96e10015nou92m00k35p"},{"post_id":"cj5wd96dn000knou9gphpld01","tag_id":"cj5wd96dw000xnou9esd678jh","_id":"cj5wd96e10017nou96i4qvf9a"},{"post_id":"cj5wd96do000lnou9hhhaduej","tag_id":"cj5wd96e00012nou9xnwrpazv","_id":"cj5wd96e2001anou91tz0gnxo"},{"post_id":"cj5wd96do000lnou9hhhaduej","tag_id":"cj5wd96e10016nou96s2tftek","_id":"cj5wd96e2001bnou9gyw9i2db"},{"post_id":"cj5wd96dr000qnou93bzlzyri","tag_id":"cj5wd96e20019nou9vwienckq","_id":"cj5wd96e2001dnou9zdspwgxo"},{"post_id":"cj5wd96ds000rnou9rsb1pswd","tag_id":"cj5wd96e2001cnou9lnoz9hkk","_id":"cj5wd96e3001fnou9g7i8jrpu"},{"post_id":"cj5wd96ds000rnou9rsb1pswd","tag_id":"cj5wd96dq000onou97d6isoe0","_id":"cj5wd96e3001gnou9wg8o0o4i"},{"post_id":"cj5wd96dv000wnou9lb9ylte1","tag_id":"cj5wd96e2001enou90h1ear5c","_id":"cj5wd96e5001knou94nio4egm"},{"post_id":"cj5wd96dv000wnou9lb9ylte1","tag_id":"cj5wd96e3001hnou9k637j3o3","_id":"cj5wd96e5001lnou95aw05aw4"},{"post_id":"cj5wd96dv000wnou9lb9ylte1","tag_id":"cj5wd96e4001inou9l9hjzkgg","_id":"cj5wd96e6001nnou9f34u4whe"},{"post_id":"cj5wd96dw000ynou9fjxki7pn","tag_id":"cj5wd96e3001hnou9k637j3o3","_id":"cj5wd96e6001onou90li5d4ow"},{"post_id":"cj5wd96dz0010nou95qxlxfrk","tag_id":"cj5wd96e2001enou90h1ear5c","_id":"cj5wd96e7001qnou90yrbbfl8"},{"post_id":"cj5wd96dz0010nou95qxlxfrk","tag_id":"cj5wd96e6001pnou94u26qjuv","_id":"cj5wd96e7001rnou9cc9e3ftr"},{"post_id":"cj5wd96fe001snou9bjlw9bpw","tag_id":"cj5wd96fk001vnou9ed3ktlzk","_id":"cj5wd96ft0028nou9o88g9ktq"},{"post_id":"cj5wd96fe001snou9bjlw9bpw","tag_id":"cj5wd96fn0020nou953gluu9m","_id":"cj5wd96fu002bnou9ldij5k22"},{"post_id":"cj5wd96fo0023nou9lhm1re6n","tag_id":"cj5wd96dq000onou97d6isoe0","_id":"cj5wd96fw002gnou9eerqgxlj"},{"post_id":"cj5wd96fo0023nou9lhm1re6n","tag_id":"cj5wd96dt000tnou9lx731ety","_id":"cj5wd96fy002jnou9oqqvsigk"},{"post_id":"cj5wd96fo0023nou9lhm1re6n","tag_id":"cj5wd96dw000xnou9esd678jh","_id":"cj5wd96g0002nnou9qkejli18"},{"post_id":"cj5wd96fk001wnou9roys24m3","tag_id":"cj5wd96fn0020nou953gluu9m","_id":"cj5wd96g2002snou9gpugkx6q"},{"post_id":"cj5wd96fk001wnou9roys24m3","tag_id":"cj5wd96fu002cnou9rcu4c0sb","_id":"cj5wd96g2002tnou9024y1m7z"},{"post_id":"cj5wd96fk001wnou9roys24m3","tag_id":"cj5wd96fy002knou9ejirndhs","_id":"cj5wd96g3002vnou9gmfbq6bx"},{"post_id":"cj5wd96fl001xnou9yusrb3i1","tag_id":"cj5wd96g1002rnou9yf6oc9l0","_id":"cj5wd96g3002xnou9y9vsnn17"},{"post_id":"cj5wd96fl001xnou9yusrb3i1","tag_id":"cj5wd96fn0020nou953gluu9m","_id":"cj5wd96g4002ynou9kxyh7at4"},{"post_id":"cj5wd96fl001ynou9zkitnhqf","tag_id":"cj5wd96g3002wnou9nruv8oc5","_id":"cj5wd96g40030nou9gol5euaf"},{"post_id":"cj5wd96fl001ynou9zkitnhqf","tag_id":"cj5wd96dq000onou97d6isoe0","_id":"cj5wd96g40031nou9c1myh1q0"},{"post_id":"cj5wd96fl001ynou9zkitnhqf","tag_id":"cj5wd96dt000tnou9lx731ety","_id":"cj5wd96g50033nou9ncbihcdy"},{"post_id":"cj5wd96fl001ynou9zkitnhqf","tag_id":"cj5wd96dw000xnou9esd678jh","_id":"cj5wd96g50034nou9cdb163am"},{"post_id":"cj5wd96fn0021nou92c58lvbg","tag_id":"cj5wd96g4002znou9og2nlr2h","_id":"cj5wd96g50036nou9s2sl9fn8"},{"post_id":"cj5wd96fn0021nou92c58lvbg","tag_id":"cj5wd96fn0020nou953gluu9m","_id":"cj5wd96g50037nou9hyy8o5gc"},{"post_id":"cj5wd96fs0027nou937ox6ku9","tag_id":"cj5wd96e2001enou90h1ear5c","_id":"cj5wd96g60039nou9fxqguslb"},{"post_id":"cj5wd96fs0027nou937ox6ku9","tag_id":"cj5wd96g40032nou9rgsf10z6","_id":"cj5wd96g6003anou9xnqjyyz9"},{"post_id":"cj5wd96ft002anou9xe2n23fd","tag_id":"cj5wd96g40032nou9rgsf10z6","_id":"cj5wd96g6003cnou9atiyqlzl"},{"post_id":"cj5wd96fv002fnou9qr17ma2w","tag_id":"cj5wd96g60038nou9m90df97w","_id":"cj5wd96g7003dnou9o2l8u8vg"},{"post_id":"cj5wd96fz002mnou9lwr3bxb2","tag_id":"cj5wd96g6003bnou9n560e3tr","_id":"cj5wd96g7003fnou97pqenrkm"},{"post_id":"cj5wd96g0002pnou9dqr0bpia","tag_id":"cj5wd96g7003enou91l1r6m1a","_id":"cj5wd96g7003gnou9mcjjsboz"}],"Tag":[{"name":"kali","_id":"cj5wd96dj000jnou9l6n9jtuz"},{"name":"openwrt","_id":"cj5wd96dq000onou97d6isoe0"},{"name":"pandorabox","_id":"cj5wd96dt000tnou9lx731ety"},{"name":"hc5861","_id":"cj5wd96dw000xnou9esd678jh"},{"name":"opentwrt","_id":"cj5wd96e00012nou9xnwrpazv"},{"name":"respberry","_id":"cj5wd96e10016nou96s2tftek"},{"name":"native","_id":"cj5wd96e20019nou9vwienckq"},{"name":"raspberry","_id":"cj5wd96e2001cnou9lnoz9hkk"},{"name":"nodejs","_id":"cj5wd96e2001enou90h1ear5c"},{"name":"react","_id":"cj5wd96e3001hnou9k637j3o3"},{"name":"nw","_id":"cj5wd96e4001inou9l9hjzkgg"},{"name":"wifidog","_id":"cj5wd96e6001pnou94u26qjuv"},{"name":"mysql","_id":"cj5wd96fk001vnou9ed3ktlzk"},{"name":"docker","_id":"cj5wd96fn0020nou953gluu9m"},{"name":"jenkins","_id":"cj5wd96fu002cnou9rcu4c0sb"},{"name":"git","_id":"cj5wd96fy002knou9ejirndhs"},{"name":"nginx","_id":"cj5wd96g1002rnou9yf6oc9l0"},{"name":"tcpdump","_id":"cj5wd96g3002wnou9nruv8oc5"},{"name":"php","_id":"cj5wd96g4002znou9og2nlr2h"},{"name":"npm","_id":"cj5wd96g40032nou9rgsf10z6"},{"name":"ReactNative","_id":"cj5wd96g60038nou9m90df97w"},{"name":"React","_id":"cj5wd96g6003bnou9n560e3tr"},{"name":"代理","_id":"cj5wd96g7003enou91l1r6m1a"}]}}